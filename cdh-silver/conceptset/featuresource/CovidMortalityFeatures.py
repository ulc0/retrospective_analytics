# Databricks notebook source
# MAGIC %md 
# MAGIC ### Create Covid Cohort 

# COMMAND ----------

# %md
# This script is designed to create a function that will build the COVID-19 population for Premier data. A user will be able to read in the notebook directly into their workspace. An example will be shown below.

# **Function**: ***covid_cohort***:   
# 1) User determines which data types should be used to define the covid population.  The options are only diagnosis, only labs, or all 
# 2) Build covid cohort based on selected data types  
# 3) Create a row number to filter down to only one row per covid encounter is in the final dataframe  
# 4) Return final dataframe  

# **Function**: ***first_covid_cohort***:  
# 1) Read in the ***covid_cohort*** with defined parameter values  
# 2) Reduces dataframe to only be the first occurence of a covid encounter for each covid patient out of all covid encounters per covid patient ; Occurences are ordered by ADM_MON, DISC_MON, DISC_MON respectively. 



# COMMAND ----------

from pyspark.sql import SparkSession 

#import pyspark sql functions with alias
import pyspark.sql.functions as F
import pyspark.sql.window as W

#import specific functions from pyspark sql types
from pyspark.sql.functions import asc, desc, col

# COMMAND ----------

# MAGIC %sql
# MAGIC use edav_prd_cdh.cdh_premier

# COMMAND ----------

# Create new ICD code table with COVID definitions and underlying conditions 
icd_code = spark.sql("""
select 
     PAT_KEY,
     ICD_VERSION,
     ICD_CODE,
     ICD_PRI_SEC,
     ICD_POA,
     year as year_icd, 
     
(Case when icd_code like '%U099%' then 1 else 0 end) as PostCOVID_U099,

(Case when icd_code in  ('F411', 'F4323', 'F331', 'F4322', 'F4320', 'F419', 
                         'F4310', 'F4321', 'F3212', 'Z630', 'F330', 'F902', 
                         'F321', 'F341', 'F900', 'F332', 'F320', 'F4325', 'F410', 'F840') 
 then 1 else 0 end) as mh_conds, 

(Case when icd_code in ('I60', 'I600', 'I6000', 'I6001', 'I6002', 'I601', 'I6010', 'I6011', 'I6012', 'I602', 'I603', 'I6030', 'I6031', 'I6032', 'I604', 'I605', 'I6050', 'I6051', 'I6052', 'I606', 'I607', 'I608', 'I609', 'I61', 'I610', 'I611', 'I612', 'I613', 'I614', 'I615', 'I616', 'I618', 'I619', 'I62', 'I620', 'I6200', 'I6201', 'I6202', 'I6203', 'I621', 'I629', 'I63', 'I63', 'I63', 'I6301', 'I63011', 'I63012', 'I63013', 'I63019', 'I6302', 'I6303', 'I63031', 'I63032', 'I63033', 'I63039', 'I6309', 'I631', 'I631', 'I6311', 'I63111', 'I63112', 'I63113', 'I63119', 'I6312', 'I6313', 'I63131', 'I63132', 'I63133', 'I63139', 'I6319', 'I632', 'I632', 'I6321', 'I63211', 'I63212', 'I63213', 'I63219', 'I6322', 'I6323', 'I63231', 'I63232', 'I63233', 'I63239', 'I6329', 'I633', 'I633', 'I6331', 'I63311', 'I63312', 'I63313', 'I63319', 'I6332', 'I63321', 'I63322', 'I63323', 'I63329', 'I6333', 'I63331', 'I63332', 'I63333', 'I63339', 'I6334', 'I63341', 'I63342', 'I63343', 'I63349', 'I6339', 'I634', 'I634', 'I6341', 'I63411', 'I63412', 'I63413', 'I63419', 'I6342', 'I63421', 'I63422', 'I63423', 'I63429', 'I6343', 'I63431', 'I63432', 'I63433', 'I63439', 'I6344', 'I63441', 'I63442', 'I63443', 'I63449', 'I6349', 'I635', 'I635', 'I6351', 'I63511', 'I63512', 'I63513', 'I63519', 'I6352', 'I63521', 'I63522', 'I63523', 'I63529', 'I6353', 'I63531', 'I63532', 'I63533', 'I63539', 'I6354', 'I63541', 'I63542', 'I63543', 'I63549', 'I6359', 'I636', 'I638', 'I6381', 'I6389', 'I639', 'I65', 'I65', 'I6501', 'I6502', 'I6503', 'I6509', 'I651', 'I652', 'I6521', 'I6522', 'I6523', 'I6529', 'I658', 'I659', 'I66', 'I66', 'I6601', 'I6602', 'I6603', 'I6609', 'I661', 'I6611', 'I6612', 'I6613', 'I6619', 'I662', 'I6621', 'I6622', 'I6623', 'I6629', 'I663', 'I668', 'I669', 'I67', 'I67', 'I671', 'I672', 'I673', 'I674', 'I675', 'I676', 'I677', 'I678', 'I6781', 'I6782', 'I6783', 'I6784', 'I67841', 'I67848', 'I6785', 'I6785', 'I67858', 'I6789', 'I679', 'I68', 'I68', 'I682', 'I688', 'I69', 'I69', 'I69', 'I6901', 'I6901', 'I69011', 'I69012', 'I69013', 'I69014', 'I69015', 'I69018', 'I69019', 'I6902', 'I6902', 'I69021', 'I69022', 'I69023', 'I69028', 'I6903', 'I69031', 'I69032', 'I69033', 'I69034', 'I69039', 'I6904', 'I69041', 'I69042', 'I69043', 'I69044', 'I69049', 'I6905', 'I69051', 'I69052', 'I69053', 'I69054', 'I69059', 'I6906', 'I69061', 'I69062', 'I69063', 'I69064', 'I69065', 'I69069', 'I6909', 'I6909', 'I69091', 'I69092', 'I69093', 'I69098', 'I691', 'I691', 'I6911', 'I6911', 'I69111', 'I69112', 'I69113', 'I69114', 'I69115', 'I69118', 'I69119', 'I6912', 'I6912', 'I69121', 'I69122', 'I69123', 'I69128', 'I6913', 'I69131', 'I69132', 'I69133', 'I69134', 'I69139', 'I6914', 'I69141', 'I69142', 'I69143', 'I69144', 'I69149', 'I6915', 'I69151', 'I69152', 'I69153', 'I69154', 'I69159', 'I6916', 'I69161', 'I69162', 'I69I63', 'I69164', 'I69I65', 'I69I69', 'I6919', 'I6919', 'I69191', 'I69192', 'I69193', 'I69198', 'I692', 'I692', 'I6921', 'I6921', 'I69211', 'I69212', 'I69213', 'I69214', 'I69215', 'I69218', 'I69219', 'I6922', 'I6922', 'I69221', 'I69222', 'I69223', 'I69228', 'I6923', 'I69231', 'I69232', 'I69233', 'I69234', 'I69239', 'I6924', 'I69241', 'I69242', 'I69243', 'I69244', 'I69249', 'I6925', 'I69251', 'I69252', 'I69253', 'I69254', 'I69259', 'I6926', 'I69261', 'I69262', 'I69263', 'I69264', 'I69265', 'I69269', 'I6929', 'I6929', 'I69291', 'I69292', 'I69293', 'I69298', 'I693', 'I693', 'I6931', 'I6931', 'I69311', 'I69312', 'I69313', 'I69314', 'I69315', 'I69318', 'I69319', 'I6932', 'I6932', 'I69321', 'I69322', 'I69323', 'I69328', 'I6933', 'I69331', 'I69332', 'I69333', 'I69334', 'I69339', 'I6934', 'I69341', 'I69342', 'I69343', 'I69344', 'I69349', 'I6935', 'I69351', 'I69352', 'I69353', 'I69354', 'I69359', 'I6936', 'I69361', 'I69362', 'I69363', 'I69364', 'I69365', 'I69369', 'I6939', 'I6939', 'I69391', 'I69392', 'I69393', 'I69398', 'I698', 'I698', 'I6981', 'I6981', 'I69811', 'I69812', 'I69813', 'I69814', 'I69815', 'I69818', 'I69819', 'I6982', 'I6982', 'I69821', 'I69822', 'I69823', 'I69828', 'I6983', 'I69831', 'I69832', 'I69833', 'I69834', 'I69839', 'I6984', 'I69841', 'I69842', 'I69843', 'I69844', 'I69849', 'I6985', 'I69851', 'I69852', 'I69853', 'I69854', 'I69859', 'I6986', 'I69861', 'I69862', 'I69863', 'I69864', 'I69865', 'I69869', 'I6989', 'I6989', 'I69891', 'I69892', 'I69893', 'I69898', 'I699', 'I699', 'I6991', 'I6991', 'I69911', 'I69912', 'I69913', 'I69914', 'I69915', 'I69918', 'I69919', 'I6992', 'I6992', 'I69921', 'I69922', 'I69923', 'I69928', 'I6993', 'I69931', 'I69932', 'I69933', 'I69934', 'I69939', 'I6994', 'I69941', 'I69942', 'I69943', 'I69944', 'I69949', 'I6995', 'I69951', 'I69952', 'I69953', 'I69954', 'I69959', 'I6996', 'I69961', 'I69962', 'I69963', 'I69964', 'I69965', 'I69969', 'I6999', 'I6999', 'I69991', 'I69992', 'I69993', 'I69998')
then 1 else 0 end) as Cerebrovascular_Disease,

 (Case when icd_code in ('C00', 'C000', 'C001', 'C002', 'C003', 'C004', 'C005', 'C006', 'C008', 'C009', 'C01', 'C02', 'C020', 'C021', 'C022', 'C023', 'C024', 'C028', 'C029', 'C03', 'C030', 'C031', 'C039', 'C04', 'C040', 'C041', 'C048', 'C049', 'C05', 'C050', 'C051', 'C052', 'C058', 'C059', 'C06', 'C060', 'C061', 'C062', 'C068', 'C0680', 'C0689', 'C069', 'C07', 'C08', 'C080', 'C081', 'C089', 'C09', 'C090', 'C091', 'C098', 'C099', 'C10', 'C100', 'C101', 'C102', 'C103', 'C104', 'C108', 'C109', 'C11', 'C110', 'C111', 'C112', 'C113', 'C118', 'C119', 'C12', 'C13', 'C130', 'C131', 'C132', 'C14', 'C140', 'C142', 'C148', 'C15', 'C153', 'C154', 'C155', 'C158', 'C159', 'C16', 'C160', 'C161', 'C162', 'C163', 'C164', 'C165', 'C166', 'C168', 'C169', 'C17', 'C170', 'C171', 'C172', 'C173', 'C178', 'C179', 'C18', 'C180', 'C181', 'C182', 'C183', 'C184', 'C185', 'C186', 'C187', 'C188', 'C189', 'C19', 'C20', 'C21', 'C210', 'C211', 'C212', 'C218', 'C22', 'C220', 'C221', 'C222', 'C223', 'C224', 'C227', 'C228', 'C229', 'C23', 'C24', 'C240', 'C241', 'C248', 'C249', 'C25', 'C250', 'C251', 'C252', 'C253', 'C254', 'C257', 'C258', 'C259', 'C26', 'C260', 'C261', 'C269', 'C30', 'C300', 'C301', 'C31', 'C310', 'C311', 'C312', 'C313', 'C318', 'C319', 'C32', 'C320', 'C321', 'C322', 'C323', 'C328', 'C329', 'C33', 'C34', 'C340', 'C3400', 'C3401', 'C3402', 'C341', 'C3410', 'C3411', 'C3412', 'C342', 'C343', 'C3430', 'C3431', 'C3432', 'C348', 'C3480', 'C3481', 'C3482', 'C349', 'C3490', 'C3491', 'C3492', 'C37', 'C38', 'C380', 'C381', 'C382', 'C383', 'C384', 'C388', 'C39', 'C390', 'C399', 'C40', 'C400', 'C4000', 'C4001', 'C4002', 'C401', 'C4010', 'C4011', 'C4012', 'C402', 'C4020', 'C4021', 'C4022', 'C403', 'C4030', 'C4031', 'C4032', 'C408', 'C4080', 'C4081', 'C4082', 'C409', 'C4090', 'C4091', 'C4092', 'C41', 'C410', 'C411', 'C412', 'C413', 'C414', 'C419', 'C43', 'C430', 'C431', 'C4310', 'C4311', 'C43111', 'C43112', 'C4312', 'C43121', 'C43122', 'C432', 'C4320', 'C4321', 'C4322', 'C433', 'C4330', 'C4331', 'C4339', 'C434', 'C435', 'C4351', 'C4352', 'C4359', 'C436', 'C4360', 'C4361', 'C4362', 'C437', 'C4370', 'C4371', 'C4372', 'C438', 'C439', 'C45', 'C450', 'C451', 'C451', 'C452', 'C457', 'C459', 'C46', 'C460', 'C461', 'C462', 'C463', 'C464', 'C465', 'C4650', 'C4651', 'C4652', 'C467', 'C469', 'C47', 'C470', 'C471', 'C4710', 'C4711', 'C4712', 'C472', 'C4720', 'C4721', 'C4722', 'C473', 'C474', 'C475', 'C476', 'C478', 'C479', 'C48', 'C480', 'C481', 'C482', 'C488', 'C49', 'C490', 'C491', 'C4910', 'C4911', 'C4912', 'C492', 'C4920', 'C4921', 'C4922', 'C493', 'C494', 'C495', 'C496', 'C498', 'C499', 'C49A', 'C49A0', 'C49A1', 'C49A2', 'C49A3', 'C49A4', 'C49A5', 'C49A9', 'C50', 'C500', 'C5001', 'C50011', 'C50012', 'C50019', 'C5002', 'C50021', 'C50022', 'C50029', 'C501', 'C5011', 'C50111', 'C50112', 'C50119', 'C5012', 'C50121', 'C50122', 'C50129', 'C502', 'C5021', 'C50211', 'C50212', 'C50219', 'C5022', 'C50221', 'C50222', 'C50229', 'C503', 'C5031', 'C50311', 'C50312', 'C50319', 'C5032', 'C50321', 'C50322', 'C50329', 'C504', 'C5041', 'C50411', 'C50412', 'C50419', 'C5042', 'C50421', 'C50422', 'C50429', 'C505', 'C5051', 'C50511', 'C50512', 'C50519', 'C5052', 'C50521', 'C50522', 'C50529', 'C506', 'C5061', 'C50611', 'C50612', 'C50619', 'C5062', 'C50621', 'C50622', 'C50629', 'C508', 'C5081', 'C50811', 'C50812', 'C50819', 'C5082', 'C50821', 'C50822', 'C50829', 'C509', 'C5091', 'C50911', 'C50912', 'C50919', 'C5092', 'C50921', 'C50922', 'C50929', 'C51', 'C510', 'C511', 'C512', 'C518', 'C519', 'C52', 'C53', 'C530', 'C531', 'C538', 'C539', 'C54', 'C540', 'C541', 'C542', 'C543', 'C548', 'C549', 'C55', 'C56', 'C561', 'C562', 'C569', 'C57', 'C570', 'C5700', 'C5701', 'C5702', 'C571', 'C5710', 'C5711', 'C5712', 'C572', 'C5720', 'C5721', 'C5722', 'C573', 'C574', 'C577', 'C578', 'C579', 'C58', 'C60', 'C600', 'C601', 'C602', 'C608', 'C609', 'C61', 'C62', 'C620', 'C6200', 'C6201', 'C6202', 'C621', 'C6210', 'C6211', 'C6212', 'C629', 'C6290', 'C6291', 'C6292', 'C63', 'C630', 'C6300', 'C6301', 'C6302', 'C631', 'C6310', 'C6311', 'C6312', 'C632', 'C637', 'C638', 'C639', 'C64', 'C641', 'C642', 'C649', 'C65', 'C651', 'C652', 'C659', 'C66', 'C661', 'C662', 'C669', 'C67', 'C670', 'C671', 'C672', 'C673', 'C674', 'C675', 'C676', 'C677', 'C678', 'C679', 'C68', 'C680', 'C681', 'C682', 'C688', 'C689', 'C69', 'C690', 'C6900', 'C6901', 'C6902', 'C691', 'C6910', 'C6911', 'C6912', 'C692', 'C6920', 'C6921', 'C6922', 'C693', 'C6930', 'C6931', 'C6932', 'C694', 'C6940', 'C6941', 'C6942', 'C695', 'C6950', 'C6951', 'C6952', 'C696', 'C6960', 'C6961', 'C6962', 'C698', 'C6980', 'C6981', 'C6982', 'C699', 'C6990', 'C6991', 'C6992', 'C70', 'C700', 'C701', 'C709', 'C71', 'C710', 'C711', 'C712', 'C713', 'C714', 'C715', 'C716', 'C717', 'C718', 'C719', 'C72', 'C720', 'C721', 'C722', 'C7220', 'C7221', 'C7222', 'C723', 'C7230', 'C7231', 'C7232', 'C724', 'C7240', 'C7241', 'C7242', 'C725', 'C7250', 'C7259', 'C729', 'C73', 'C74', 'C740', 'C7400', 'C7401', 'C7402', 'C741', 'C7410', 'C7411', 'C7412', 'C749', 'C7490', 'C7491', 'C7492', 'C75', 'C750', 'C751', 'C752', 'C753', 'C754', 'C755', 'C758', 'C759', 'C76', 'C760', 'C761', 'C762', 'C763', 'C764', 'C7640', 'C7641', 'C7642', 'C765', 'C7650', 'C7651', 'C7652', 'C768', 'C77', 'C770', 'C771', 'C772', 'C773', 'C774', 'C775', 'C778', 'C779', 'C78', 'C780', 'C7800', 'C7801', 'C7802', 'C781', 'C782', 'C783', 'C7830', 'C7839', 'C784', 'C785', 'C786', 'C787', 'C788', 'C7880', 'C7889', 'C79', 'C790', 'C7900', 'C7901', 'C7902', 'C791', 'C7910', 'C7911', 'C7919', 'C792', 'C793', 'C7931', 'C7932', 'C794', 'C7940', 'C7949', 'C795', 'C7951', 'C7952', 'C796', 'C7960', 'C7961', 'C7962', 'C797', 'C7970', 'C7971', 'C7972', 'C798', 'C7981', 'C7982', 'C7989', 'C799', 'C80', 'C800', 'C801', 'C802', 'C7A', 'C7A0', 'C7A00', 'C7A01', 'C7A010', 'C7A011', 'C7A012', 'C7A019', 'C7A02', 'C7A020', 'C7A021', 'C7A022', 'C7A023', 'C7A024', 'C7A025', 'C7A026', 'C7A029', 'C7A09', 'C7A090', 'C7A091', 'C7A092', 'C7A093', 'C7A094', 'C7A095', 'C7A096', 'C7A098', 'C7A1', 'C7A8', 'C7B', 'C7B0', 'C7B00', 'C7B01', 'C7B02', 'C7B03', 'C7B04', 'C7B09', 'C7B1', 'C7B8', 'C81', 'C810', 'C8100', 'C8101', 'C8102', 'C8103', 'C8104', 'C8105', 'C8106', 'C8107', 'C8108', 'C8109', 'C811', 'C8110', 'C8111', 'C8112', 'C8113', 'C8114', 'C8115', 'C8116', 'C8117', 'C8118', 'C8119', 'C812', 'C8120', 'C8121', 'C8122', 'C8123', 'C8124', 'C8125', 'C8126', 'C8127', 'C8128', 'C8129', 'C813', 'C8130', 'C8131', 'C8132', 'C8133', 'C8134', 'C8135', 'C8136', 'C8137', 'C8138', 'C8139', 'C384', 'C8140', 'C8141', 'C8142', 'C8143', 'C8144', 'C8145', 'C8146', 'C8147', 'C8148', 'C8149', 'C817', 'C8170', 'C8172', 'C8173', 'C8174', 'C875', 'C8176', 'C8177', 'C8178', 'C8179', 'C819', 'C8190', 'C8191', 'C8192', 'C8193', 'C8194', 'C8195', 'C8196', 'C8197', 'C8198', 'C8199', 'C82', 'C820 ', 'C8200', 'C8201', 'C8202', 'C8203', 'C8204', 'C8205', 'C8206', 'C8207', 'C8208', 'C8209', 'C821', 'C8210', 'C8211', 'C8212', 'C8213', 'C8214', 'C8215', 'C8216', 'C8217', 'C8218', 'C8219', 'C822', 'C8220', 'C8221', 'C8222', 'C8223', 'C8224', 'C8225', 'C8226', 'C8227', 'C8228', 'C8229', 'C823', 'C8230', 'C8231', 'C8232', 'C8233', 'C8234', 'C8235', 'C8236', 'C8237', 'C8238', 'C8239', 'C824', 'C8240', 'C8241', 'C8242', 'C8243', 'C8244', 'C8245', 'C8246', 'C8247', 'C8248', 'C8249', 'C825', 'C8250', 'C8251', 'C8252', 'C8253', 'C85254', 'C8255', 'C8256', 'C8257', 'C8258', 'C8259', 'C826', 'C8260', 'C8261', 'C8262', 'C8263', 'C8264', 'C8265', 'C8266', 'C8267', 'C8268', 'C8269', 'C828', 'C8280', 'C8281', 'C8282', 'C8283', 'C8284', 'C8285', 'C8286', 'C8287', 'C8288', 'C8289', 'C829', 'C8290', 'C8291', 'C8292', 'C8293', 'C8294', 'C8295', 'C8296', 'C8297', 'C8298', 'C8299', 'C83', 'C830', 'C8300', 'C8301', 'C8302', 'C8303', 'C8304', 'C8305', 'C8306', 'C8307', 'C8308', 'C8308', 'C8309', 'C831', 'C8310', 'C8311', 'C8312', 'C8313', 'C8314', 'C8315', 'C8316', 'C8317', 'C8318', 'C8319', 'C833', 'C8330', 'C8331', 'C8332', 'C8333', 'C8334', 'C8335', 'C8336', 'C8337', 'C8338', 'C8339', 'C835', 'C8350', 'C8351', 'C8352', 'C8353', 'C8354', 'C8355', 'C8356', 'C8357', 'C8358', 'C8359', 'C837', 'C8370', 'C8371', 'C8372', 'C8373', 'C8374', 'C8375', 'C8376', 'C8377', 'C8378', 'C8379', 'C838', 'C8380', 'C8381', 'C3882', 'C8383', 'C8384', 'C8385', 'C8386', 'C8387', 'C8388', 'C8389', 'C839', 'C8390', 'C8391', 'C8392', 'C8393', 'C8394', 'C8395', 'C8396', 'C8397', 'C8398', 'C8399', 'C84', 'C840', 'C8400', 'C8401', 'C8402', 'C8403', 'C8404', 'C8405', 'C8406', 'C8407', 'C8408', 'C8409', 'C841', 'C8410', 'C8411', 'C8412', 'C8413', 'C8414', 'C8415', 'C8416', 'C8417', 'C8418', 'C8419', 'C844', 'C8440', 'C8441', 'C8442', 'C8443', 'C8444', 'C8445', 'C8446', 'C8447', 'C8448', 'C8449', 'C846', 'C8460', 'C8461', 'C8462', 'C8463', 'C8464', 'C8465', 'C8466', 'C8467', 'C8468', 'C8469', 'C847', 'C8470', 'C8471', 'C8472', 'C8473', 'C8474', 'C8475', 'C8476', 'C8477', 'C8478', 'C8479', 'C84A', 'C84A0', 'C84A1', 'C84A2', 'C84A3', 'C84A4', 'C84A5', 'C84A6', 'C84A7', 'C84A8', 'C84A9', 'C84Z', 'C84Z0', 'C84Z1', 'C84Z2',
'C84Z3', 'C84Z4', 'C84Z5', 'C84Z6', 'C84Z7', 'C84Z8', 'C84Z9', 'C849', 'C8490', 'C8491', 'C8492', 'C8493', 'C8494', 'C8495', 'C8496', 'C8497', 'C8498', 'C8499', 'C85', 'C851', 'C8510', 'C8511', 'C8512', 'C8513', 'C8514', 'C8515', 'C8516', 'C8517', 'C8518', 'C8519', 'C852', 'C8520', 'C8521', 'C8522', 'C8523', 'C8524', 'C8525', 'C8526', 'C8527', 'C8528', 'C8529', 'C858', 'C8580', 'C8581', 'C8582', 'C8583', 'C8584', 'C8585', 'C8586', 'C8587', 'C8588', 'C8589', 'C859', 'C8590', 'C8591', 'C8592', 'C8593', 'C8594', 'C8595', 'C8596', 'C8597', 'C8598', 'C8599', 'C86', 'C860', 'C861', 'C862', 'C863', 'C864', 'C865', 'C866', 'C88', 'C880', 'C882', 'C883', 'C884', 'C888', 'C889', 'C90', 'C900', 'C9000', 'C9001', 'C9002', 'C901', 'C9010', 'C9011', 'C9012', 'C902', 'C9020', 'C9021', 'C9022', 'C903', 'C9030', 'C9031', 'C9032', 'C91', 'C910', 'C9100', 'C9101', 'C9102', 'C911', 'C9110', 'C9111', 'C9112', 'C913', 'C9130', 'C9131', 'C9132', 'C914', 'C9140', 'C9141', 'C9142', 'C915', 'C9150', 'C9151', 'C9152', 'C916', 'C9160', 'C9161', 'C9162', 'C91A', 'C91A0', 'C91A1', 'C91A2', 'C91Z', 'C91Z0', 'C91Z1', 'C91Z2', 'C919', 'C9190', 'C9191', 'C9192', 'C92', 'C920', 'C9200', 'C9201', 'C9202', 'C921', 'C9210', 'C9211', 'C9212', 'C922', 'C9220', 'C9221', 'C9222', 'C923', 'C9230', 'C9231', 'C9232', 'C924', 'C9240', 'C9241', 'C9242', 'C925', 'C9250', 'C9251', 'C9252', 'C926', 'C9260', 'C9261', 'C9262', 'C92A', 'C92A0', 'C92A1', 'C92A2', 'C92Z', 'C92Z0', 'C92Z1', 'C92Z2', 'C929', 'C9290', 'C9291', 'C9292', 'C93', 'C930', 'C9300', 'C9301', 'C9302', 'C931', 'C9310', 'C9311', 'C9312', 'C933', 'C9330', 'C9331', 'C9332', 'C93Z', 'C93Z0', 'C93Z1', 'C93Z2', 'C939', 'C9390', 'C9391', 'C9392', 'C94', 'C940', 'C9400', 'C9401', 'C9402', 'C942', 'C9420', 'C9421', 'C9422', 'C943', 'C9430', 'C9431', 'C9432', 'C944', 'C9440', 'C9441', 'C9442', 'C946', 'C948', 'C9480', 'C9481', 'C9482', 'C95', 'C950', 'C9500', 'C9501', 'C9502', 'C951', 'C9510', 'C9511', 'C9512', 'C959', 'C9590', 'C9591', 'C9592', 'C96', 'C960', 'C962', 'C9620', 'C9621', 'C9622', 'C9629', 'C964', 'C965', 'C966', 'C96A', 'C96Z', 'C969', 'D00', 'D000', 'D0000', 'D0001', 'D0002', 'D0003', 'D0004', 'D0005', 'D0006', 'D0007', 'D0008', 'D001', 'D002', 'D01', 'D010', 'D011', 'D012', 'D013', 'D014', 'D0140', 'D0149', 'D015', 'D017', 'D019', 'D02', 'D020', 'D021', 'D022', 'D0220', 'D0221', 'D0222', 'D023', 'D024', 'D03', 'D030', 'D031', 'D0310', 'D0311', 'D03111', 'D03112', 'D0312', 'D03121', 'D03122', 'D032', 'D0320', 'D0321', 'D0322', 'D033', 'D0330', 'D0339', 'D034', 'D035', 'D0351', 'D0352', 'D0359', 'D036', 'D0360', 'D0361', 'D0362', 'D037', 'D0370', 'D0371', 'D0372', 'D038', 'D039', 'D04', 'D040', 'D041', 'D0410', 'D0411', 'D04111', 'D04112', 'D0412', 'D04121', 'D04122', 'D042', 'D0420', 'D0421', 'D0422', 'D043', 'D0430', 'D0439', 'D044', 'D045', 'D046', 'D0460', 'D0461', 'D0462', 'D047', 'D0470', 'D0471', 'D0472', 'D048', 'D049', 'D05', 'D050', 'D0500', 'D0501', 'D0502', 'D051', 'D0510', 'D0511', 'D0512', 'D058', 'D0580', 'D0581', 'D0582', 'D059', 'D0590', 'D0591', 'D0592', 'D06', 'D060', 'D061', 'D067', 'D069', 'D07', 'D070', 'D071', 'D072', 'D073', 'D0730', 'D0739', 'D074', 'D075', 'D076', 'D0760', 'D0761', 'D0769', 'D09', 'D090', 'D091', 'D0910', 'D0919', 'D092', 'D0920', 'D0921', 'D0922', 'D093', 'D098', 'D099')
then 1 else 0 end) as Cancer,

(Case when icd_code in ('A1811', 'A5275', 'B520', 'C641', 'C642', 'C649', 'C689', 'D3000', 'D3001', 'D3002', 'D4100', 'D4101', 'D4102', 'D4110', 'D4111', 'D4112', 'D4120', 'D4121', 'D4122', 'D593', 'E0821', 'E0822', 'E0829', 'E0865', 'E0921', 'E0922', 'E0929', 'E1021', 'E1022', 'E1029', 'E1065', 'E1121', 'E1122', 'E1129', 'E1165', 'E1321', 'E1322', 'E1329', 'E748', 'I120', 'I129', 'I130', 'I1310', 'I1311', 'I132', 'I701', 'I722', 'K767', 'M1030', 'M10311', 'M10312', 'M10319', 'M10321', 'M10322', 'M10329', 'M10331', 'M10332', 'M10339', 'M10341', 'M10342', 'M10349', 'M10351', 'M10352', 'M10359', 'M10361', 'M10362', 'M10369', 'M10371', 'M10372', 'M10379', 'M1038', 'M1039', 'M3214', 'M3215', 'M3504', 'N000', 'N001', 'N002', 'N003', 'N004', 'N005', 'N006', 'N007', 'N008', 'N009', 'N00A', 'N010', 'N011', 'N012', 'N013', 'N014', 'N015', 'N016', 'N017', 'N018', 'N019', 'N01A', 'N020', 'N021', 'N022', 'N023', 'N024', 'N025', 'N026', 'N027', 'N028', 'N029', 'N02A', 'N030', 'N031', 'N032', 'N033', 'N034', 'N035', 'N036', 'N037', 'N038', 'N039', 'N03A', 'N040', 'N041', 'N042', 'N043', 'N044', 'N045', 'N046', 'N047', 'N048', 'N049', 'N04A', 'N050', 'N051', 'N052', 'N053', 'N054', 'N055', 'N056', 'N057', 'N058', 'N059', 'N05A', 'N060', 'N061', 'N062', 'N063', 'N064', 'N065', 'N066', 'N067', 'N068', 'N069', 'N06A', 'N070', 'N071', 'N072', 'N073', 'N074', 'N075', 'N076', 'N077', 'N078', 'N079', 'N07A', 'N08', 'N131', 'N132', 'N1330', 'N1339', 'N140', 'N141', 'N142', 'N143', 'N144', 'N150', 'N158', 'N159', 'N16', 'N170', 'N171', 'N172', 'N178', 'N179', 'N181', 'N182', 'N183', 'N1830', 'N1831', 'N1832', 'N184', 'N185', 'N186', 'N189', 'N19', 'N250', 'N251', 'N2581', 'N2589', 'N259', 'N261', 'N269', 'Q6102', 'Q6111', 'Q6119', 'Q612', 'Q613', 'Q614', 'Q615', 'Q618', 'Q620', 'Q622', 'Q6210', 'Q6211', 'Q6212', 'Q6231', 'Q6232', 'Q6239', 'R944')
then 1 else 0 end) as Chr_Kidney_Dis,

(Case when icd_code in ('J8410', 'J84112', 'J40', 'J410', 'J411', 'J418', 'J42', 'J430', 'J431', 'J432', 'J438', 'J439', 'J44', 'J440', 'J441', 'J449', /* COPD end*/ 'J470', 'J471', 'J479') then 1 else 0 end) as Chr_lung_dis,

(Case when icd_code in ('B18', 'B180', 'B181', 'B182', 'B188', 'B189', 'K70', 'K700', 'K701', 
                        'K703', 'K704', 'K709', 'K7010', 'K7011', 'K702', 'K703', 'K7030', 
                        'K7031', 'K7040', 'K7041', 'K709', 'K71', 'K710', 'K711', 'K712', 'K713', 
                        'K714', 'K715', 'K717', 'K718', 'K719', 'K7110', 'K7111', 'K7150', 
                        'K7151', 'K716', 'K7200', 'K72', 'K720', 'K721', 'K7201', 'K7210', 'K7211', 
                        'K7290', 'K729', 'K7290', 'K7291', 'K73', 'K730', 'K731', 'K732', 'K738', 
                        'K739', 'K740', 'K7400', 'K74', 'K7401', 'K7402', 'K741', 'K742', 'K743', 
                        'K744', 'K745', 'K746', 'K7460', 'K7469', 'K750', 'K751', 'K75', 'K750', 
                        'K752', 'K753', 'K754', 'K758', 'K7581', 'K7589', 'K759', 'K7581', 'K7589', 
                        'K759', 'K760', 'K761', 'K76', 'K760', 'K761', 'K762', 'K763','K764', 'K765', 
                        'K766', 'K767', 'K768', 'K7681', 'K7689', 'K769', 'K77', 'K8030', 'K8031', 
                        'K8032', 'K8033', 'K8034', 'K8035', 'K8036', 'K8037', 'K830', 'R160', 
                        'R162', 'Z4823', 'Z944', 'Z2251', 'Z2252') then 1 else 0 end) 
                        as Liver_Dis_Hep,

(Case when icd_code in ('D81810', 'D841', 'E000', 'E001', 'E002', 'E009', 'E030', 'E031', 'E250', 'E258', 'E259', 'E569', 'E700', 'E701', 'E7020', 'E7021', 'E7029', 'E7030', 'E70310', 'E70311', 'E70318', 'E70319', 'E70320', 'E70321', 'E70328', 'E70329', 'E70330', 'E70331', 'E70338', 'E70339', 'E7039', 'E705', 'E708', 'E7081', 'E7089', 'E709', 'E710', 'E71110', 'E71111', 'E71118', 'E7119', 'E712', 'E71310', 'E71311', 'E71312', 'E71313', 'E71314', 'E71318', 'E7132', 'E7141', 'E7210', 'E7211', 'E7212', 'E7219', 'E7220', 'E7221', 'E7222', 'E7223', 'E7229', 'E723', 'E724', 'E7250', 'E7251', 'E7259', 'E728', 'E7420', 'E7421', 'E7429', 'E74810', 'E74818', 'E74819', 'E7489', 'E840', 'E8411', 'E8419', 'E848', 'E849') 
 then 1 else 0 end) as Cystic_Fibrosis,

(Case when icd_code in ('E0800', 'E0801', 'E0810', 'E0811', 'E0821', 'E0822', 'E0829', 'E08311', 'E08319', 'E08321', 'E083211', 'E083212', 'E083213', 'E083219', 'E08329', 'E083291', 'E083292', 'E083293', 'E083299', 'E08331', 'E083311', 'E083312', 'E083313', 'E083319', 'E08339', 'E083391', 'E083392', 'E083393', 'E083399', 'E08341', 'E083411', 'E083412', 'E083413', 'E083419', 'E08349', 'E083491', 'E083492', 'E083493', 'E083499', 'E08351', 'E083511', 'E083512', 'E083513', 'E083519', 'E083521', 'E083522', 'E083523', 'E083529', 'E083531', 'E083532', 'E083533', 'E083539', 'E083541', 'E083542', 'E083543', 'E083549', 'E083551', 'E083552', 'E083553', 'E083559', 'E08359', 'E083591', 'E083592', 'E083593', 'E083599', 'E0836', 'E0837X1', 'E0837X2', 'E0837X3', 'E0837X9', 'E0839', 'E0840', 'E0841', 'E0842', 'E0843', 'E0844', 'E0849', 'E0851', 'E0852', 'E0859', 'E08610', 'E08618', 'E08620', 'E08621', 'E08622', 'E08628', 'E08630', 'E08638', 'E08641', 'E08649', 'E0865', 'E0869', 'E088', 'E089', 'E0900', 'E0901', 'E0910', 'E0911', 'E0921', 'E0922', 'E0929', 'E09311', 'E09319', 'E09321', 'E093211', 'E093212', 'E093213', 'E093219', 'E09329', 'E093291', 'E093292', 'E093293', 'E093299', 'E09331', 'E093311', 'E093312', 'E093313', 'E093319', 'E09339', 'E093391', 'E093392', 'E093393', 'E093399', 'E09341', 'E093411', 'E093412', 'E093413', 'E093419', 'E09349', 'E093491', 'E093492', 'E093493', 'E093499', 'E09351', 'E093511', 'E093512', 'E093513', 'E093519', 'E093521', 'E093522', 'E093523', 'E093529', 'E093531', 'E093532', 'E093533', 'E093539', 'E093541', 'E093542', 'E093543', 'E093549', 'E093551', 'E093552', 'E093553', 'E093559', 'E09359', 'E093591', 'E093592', 'E093593', 'E093599', 'E0936', 'E0937X1', 'E0937X2', 'E0937X3', 'E0937X9', 'E0939', 'E0940', 'E0941', 'E0942', 'E0943', 'E0944', 'E0949', 'E0951', 'E0952', 'E0959', 'E09610', 'E09618', 'E09620', 'E09621', 'E09622', 'E09628', 'E09630', 'E09638', 'E09641', 'E09649', 'E0965', 'E0969', 'E098', 'E099', 'E1010', 'E1011', 'E1021', 'E1022', 'E1029', 'E10311', 'E10319', 'E10321', 'E103211', 'E103212', 'E103213', 'E103219', 'E10329', 'E103291', 'E103292', 'E103293', 'E103299', 'E10331', 'E103311', 'E103312', 'E103313', 'E103319', 'E10339', 'E103391', 'E103392', 'E103393', 'E103399', 'E10341', 'E103411', 'E103412', 'E103413', 'E103419', 'E10349', 'E103491', 'E103492', 'E103493', 'E103499', 'E10351', 'E103511', 'E103512', 'E103513', 'E103519', 'E103521', 'E103522', 'E103523', 'E103529', 'E103531', 'E103532', 'E103533', 'E103539', 'E103541', 'E103542', 'E103543', 'E103549', 'E103551', 'E103552', 'E103553', 'E103559', 'E10359', 'E103591', 'E103592', 'E103593', 'E103599', 'E1036', 'E1037X1', 'E1037X2', 'E1037X3', 'E1037X9', 'E1039', 'E1040', 'E1041', 'E1042', 'E1043', 'E1044', 'E1049', 'E1051', 'E1052', 'E1059', 'E10610', 'E10618', 'E10620', 'E10621', 'E10622', 'E10628', 'E10630', 'E10638', 'E10641', 'E10649', 'E1065', 'E1069', 'E108', 'E109', 'E1100', 'E1101', 'E1110', 'E1111', 'E1121', 'E1122', 'E1129', 'E11311', 'E11319', 'E11321', 'E113211', 'E113212', 'E113213', 'E113219', 'E11329', 'E113291', 'E113292', 'E113293', 'E113299', 'E11331', 'E113311', 'E113312', 'E113313', 'E113319', 'E11339', 'E113391', 'E113392', 'E113393', 'E113399', 'E11341', 'E113411', 'E113412', 'E113413', 'E113419', 'E11349', 'E113491', 'E113492', 'E113493', 'E113499', 'E11351', 'E113511', 'E113512', 'E113513', 'E113519', 'E113521', 'E113522', 'E113523', 'E113529', 'E113531', 'E113532', 'E113533', 'E113539', 'E113541', 'E113542', 'E113543', 'E113549', 'E113551', 'E113552', 'E113553', 'E113559', 'E11359', 'E113591', 'E113592', 'E113593', 'E113599', 'E1136', 'E1137X1', 'E1137X2', 'E1137X3', 'E1137X9', 'E1139', 'E1140', 'E1141', 'E1142', 'E1143', 'E1144', 'E1149', 'E1151', 'E1152', 'E1159', 'E11610', 'E11618', 'E11620', 'E11621', 'E11622', 'E11628', 'E11630', 'E11638', 'E11641', 'E11649', 'E1165', 'E1169', 'E118', 'E119', 'E1300', 'E1301', 'E1310', 'E1311', 'E1321', 'E1322', 'E1329', 'E13311', 'E13319', 'E13321', 'E133211', 'E133212', 'E133213', 'E133219', 'E13329', 'E133291', 'E133292', 'E133293', 'E133299', 'E13331', 'E133311', 'E133312', 'E133313', 'E133319', 'E13339', 'E133391', 'E133392', 'E133393', 'E133399', 'E13341', 'E133411', 'E133412', 'E133413', 'E133419', 'E13349', 'E133491', 'E133492', 'E133493', 'E133499', 'E13351', 'E133511', 'E133512', 'E133513', 'E133519', 'E133521', 'E133522', 'E133523', 'E133529', 'E133531', 'E133532', 'E133533', 'E133539', 'E133541', 'E133542', 'E133543', 'E133549', 'E133551', 'E133552', 'E133553', 'E133559', 'E13359', 'E133591', 'E133592', 'E133593', 'E133599', 'E1336', 'E1339', 'E1340', 'E1341', 'E1342', 'E1343', 'E1344', 'E1349', 'E1351', 'E1352', 'E1359', 'E13610', 'E13618', 'E13620', 'E13621', 'E13622', 'E13628', 'E13630', 'E13638', 'E13641', 'E13649', 'E1365', 'E1369', 'E138', 'E139')
then 1 else 0 end) as Diabetes,

(Case when icd_code in ('F819', 'F82', 'F88', 'F89', --Other dev dis 
                        'F800', 'F801', 'F802', 'F804', 'F8081', 
                        'F8082', 'F8089', 'F809', 'F810', 'F812', 
                        'F8181', 'F8189', 'F819', 'F82', 'H9325', 'R480' -- LD
                        'E7871', 'E7872', 'F70', 'F71', 'F72', 'F73', 'F78', 'F79', -- Int Dis
                        'P043', 'Q860', 'Q871', 'Q8711', 'Q8719', 'Q872', 'Q873', 
                        'Q875', 'Q8781', 'Q8789', 'Q897', 'Q898', 'Q900', 'Q901', 
                        'Q902', 'Q909', 'Q910', 'Q911', 'Q912', 'Q913', 'Q914', 
                        'Q915', 'Q916', 'Q917', 'Q920', 'Q921', 'Q922', 'Q925', 
                        'Q9261', 'Q9262', 'Q927', 'Q928', 'Q929', 'Q930', 'Q931', 
                        'Q932', 'Q933', 'Q934', 'Q935', 'Q9351', 'Q9359', 'Q937', 
                        'Q9381', 'Q9388', 'Q9389', 'Q939', 'Q952', 'Q953', 'Q992'
                        'G800', 'G801', 'G802', 'G803', 'G804', 'G808', 'G809' -- CerPalsy
                        'F630', 'F631', 'F632', 'F633', 'F6381', 'F6389', 'F639', --ADHD
                        'F900', 'F901', 'F902', 'F908', 'F909', 'F910', 'F911', 
                        'F912', 'F913', 'F918', 'F919'
                        'J40', 'J410', 'J411', 'J418', 'J42', 'J430', 
                        'J431', 'J432', 'J438', 'J439', 'J440', 'J441', 
                        'J449', 'J470', 'J471', 'J479', 
                        'Q90', 'Q900', 'Q901', 'Q902', 'Q909') --Downs Syndrome
 then 1 else 0 end) as Disabilities,

(Case When  icd_code in ('I21', 'I210', 'I2101', 'I2102', 'I2109', 'I211', 'I2111', 'I2119', 'I212', 'I2121', 'I2129', 'I213', 'I214', 'I219', 'I21A', 'I21A1', 'I21A9', 'I22', 'I220', 'I221', 'I222', 'I228', 'I229', 'I23', 'I230', 'I231', 'I232', 'I233', 'I234', 'I235', 'I236', 'I237', 'I238', 'I24', 'I240', 'I241', 'I248', 'I249', 'I25', 'I251', 'I2510', 'I2511', 'I25110', 'I25111', 'I251108', 'I25119', 'I252', 'I253', 'I254', 'I2541', 'I2542', 'I255', 'I256', 'I257', 'I2570', 'I25700', 'I25701', 'I25708', 'I25709', 'I2571', 'I25710', 'I25711', 'I25718', 'I25719', 'I2572', 'I25720', 'I25721', 'I25728', 'I25729', 'I25729', 'I2573', 'I25730', 'I25731', 'I25738', 'I25739', 'I2575', 'I25750', 'I25751', 'I25758', 'I25759', 'I2576', 'I25760', 'I25761', 'I25768', 'I25769', 'I2579', 'I25790', 'I25791', 'I25798', 'I25799', 'I258', 'I2581', 'I25810', 'I25811', 'I25812', 'I2582', 'I2583', 'I2584', 'I2589', 'I259', 'I42', 'I420', 'I421', 'I422', 'I423', 'I424', 'I425', 'I426', 'I427', 'I428', 'I429', 'I43', 'I50', 'I501', 'I502', 'I5020', 'I5021', 'I5022', 'I5023', 'I503', 'I5030', 'I5031', 'I5032', 'I5033', 'I504', 'I5040', 'I5041', 'I5042', 'I5043', 'I508', 'I5081', 'I50810', 'I50811', 'I50812', 'I50813', 'I50814', 'I5082', 'I5083', 'I5084', 'I5089', 'I509')
then 1 else 0 end) as Heart_condition,

(Case when  icd_code in ('B20', 'B9735', 'R75', 'Z21') 
 then 1 else 0 end) as HIV_AIDS,

(Case When  icd_code in ('F3130', 'F3131', 'F3132', 'F314', 'F315', 'F3160', 
                         'F3161', 'F3162', 'F3163', 'F3164', 'F3175', 'F3176', 
                         'F3177', 'F3178', 'F3181', 'F320', 'F321', 'F322', 
                         'F323', 'F324', 'F325', 'F329', 'F330', 'F331', 'F332', 
                         'F333', 'F3340', 'F3341', 'F3342', 'F338', 'F339', 
                         'F341', 'F4321', 'F4323', 'F320', 'F321', 'F322', 
                         'F323', 'F324', 'F325', 'F3289', 'F329', 'F330', 'F331', 
                         'F332', 'F333', 'F3340', 'F3341', 'F3342', 'F338', 
                         'F339', 'F341', 'F200', 'F201', 'F202', 'F203', 
                         'F205', 'F2081', 'F2089', 'F209', 'F250', 'F251', 'F258', 
                         'F259', 'F060', 'F062', 'F200', 'F201', 'F202', 
                         'F203', 'F205', 'F2081', 'F2089', 'F209', 'F21', 'F22', 'F23', 
                         'F24', 'F250', 'F251', 'F258', 'F259', 'F28', 'F29', 'F323', 
                         'F333', 'F4489', 'F4310', 'F4311', 'F4312') 
 then 1 else 0 end) as MentalHealth_Dis,

(Case when  icd_code in ('F0150', 'F0151', 'F0280', 'F0281', 'F0390', 'F0391', 'F04', 
                         'G138', 'F05', 'F061', 'F068', 'G300', 'G301', 'G308', 'G309', 
                         'G311', 'G312', 'G3101', 'G3109', 'G94', 'R4181', 'R54') 
 then 1 else 0 end) as Dementia,

(Case when icd_code in ('F01', 'F015', 'F0150', 'F0151', 'F02', 'F028', 'F0280', 'F0281', 'F03', 'F039', 'F0390', 'F0391', 'G30', 'G300', 'G301', 'G308', 'G309')
then 1 else 0 end) as Neuro_Cond,

(Case When  icd_code in ('E663', 'Z6826', 'Z6827', 'Z6828', 'Z6829') then 1 else 0 end) as Overweight,

(Case When icd_code in ('E6601', 'E6609', 'E661', 'E662', 'E668', 'E669', 'Z6830', 
                        'Z6831', 'Z6832', 'Z6833', 'Z6834', 'Z6835', 'Z6836', 'Z6837', 
                        'Z6838', 'Z6839', 'Z6841', 'Z6842', 'Z6843', 'Z6844', 'Z6845') 
 then 1 else 0 end) as Obesity,

(Case when icd_code in ('B20', 'D80', 'D800', 'D801', 'D802', 'D803', 'D804', 'D805', 'D806', 'D807', 'D808', 'D809', 'D81', 'D810', 'D811', 'D812', 'D813', 'D8130', 'D8131', 'D8132', 'D8139', 'D814', 'D815', 'D816', 'D817', 'D818', 'D8181', 'D81810', 'D81818', 'D81819', 'D8189', 'D819', 'D82', 'D820', 'D821', 'D822', 'D823', 'D824', 'D828', 'D829', 'D83', 'D830', 'D831', 'D832', 'D838', 'D839', 'D84', 'D840', 'D841', 'D848', 'D8481', 'D8482', 'D84821', 'D84822', 'D8489', 'D849', 'D86', 'D860', 'D861', 'D862', 'D863', 'D868', 'D8681', 'D8682', 'D8683', 'D8684', 'D8685', 'D8686', 'D8687', 'D8689', 'D869', 'D89', 'D890', 'D891', 'D892', 'D893', 'D894', 'D8940', 'D8941', 'D8942', 'D8943', 'D8949', 'D898', 'D8981', 'D89810', 'D89811', 'D89812', 'D89813', 'D8982', 'D8983', 'D89831', 'D89832', 'D89833', 'D89834', 'D89835', 'D89839', 'D8989', 'D899', 'Z9225', 'Z9481', 'Z9484 ', 'Z7952')
then 1 else 0 end) as  Primary_Immuno,

(Case when icd_code in ('Z94', 'Z940', 'Z941', 'Z942', 'Z943', 'Z944', 'Z945', 'Z946', 'Z947', 'Z948', 'Z9481', 'Z9482', 'Z9483', 'Z9484', 'Z9489', 'Z949')
then 1 else 0 end) as Immun_Comp_SolidOrgan,

(Case when icd_code in ('Z331', 'Z333', 'Z34', 'Z340', 'Z3400', 'Z3401', 'Z3402', 'Z3403', 'Z348', 'Z3480', 'Z3481', 'Z3482', 'Z3483', 'Z349', 'Z3490', 'Z3491', 'Z3492', 'Z3493', 'O09', 'O090', 'O0900', 'O0901', 'O0902', 'O0903', 'O091', 'O0910', 'O0911', 'O0912', 'O0913', 'O09A', 'O09A0', 'O09A1', 'O09A2', 'O09A3', 'O092', 'O0921', 'O09211', 'O09212', 'O09213', 'O09219', 'O0929', 'O09291', 'O09292', 'O09293', 'O09299', 'O093', 'O0930', 'O0931', 'O0932', 'O0933', 'O094', 'O0941', 'O0942', 'O0943', 'O095', 'O0951', 'O09511', 'O09512', 'O09513', 'O09519', 'O0952', 'O09521', 'O09522', 'O09523', 'O09529', 'O096', 'O0961', 'O09611', 'O09612', 'O09613', 'O09619', 'O0962', 'O09621', 'O09622', 'O09623', 'O09629', 'O097', 'O0970', 'O0971', 'O0972', 'O0973', 'O098', 'O0981', 'O09811', 'O09812', 'O09813', 'O09819', 'O0982', 'O09821', 'O09822', 'O09823', 'O09829', 'O0989', 'O09891', 'O09892', 'O09893', 'O09899', 'O099', 'O0990', 'O0991', 'O0992', 'O0993')
then 1 else 0 end) as Pregnancy,

(Case when icd_code in ('Z94', 'Z940', 'Z941', 'Z942', 'Z943', 'Z944', 'Z945', 'Z946', 'Z947', 'Z948', 'Z9481', 'Z9482', 'Z9483', 'Z9484', 'Z9489', 'Z949', 'T86x') 
then 1 else 0 end) as Transplantation,


(Case when icd_code in ('Z111', 'Z227', 'Z8615', 'Z117')
then 1 else 0 end) as Tuberculosis,

(Case when icd_code in ('A021','A021','A227','A227','A267','A267','A327','A327','A400','A400','A401','A401','A403','A403','A408','A408','A409','A409','A4101','A4101','A4102','A4102','A411','A411','A412','A412','A413','A413','A414','A414','A4150','A4150','A4151','A4151','A4152','A4152','A4153','A4153','A4159','A4159','A4181','A4181','A4189','A4189','A419','A419','A427','A427','A5486','A5486','B377','B377','O0337','O0337','O0387','O0387','O0487','O0487','O0737','O0737','O0882','O0882','O85','O85','O8604','O8604','P360','P360','P360','P3610','P3610','P3610','P3619','P3619','P3619','P362','P362','P362','P3630','P3630','P3630','P3639','P3639','P3639','P364','P364','P364','P365','P365','P365','P368','P368','P368','P369','P369','P369','R6520','R6521','R6521','T8144XA','T8144XA','T8144XD','T8144XS') 
then 1 else 0 end) as Sepsis,

(Case when icd_code in ('A0103','A0103','A0222','A0222','A3700','A3701','A3701','A3710','A3711','A3711','A3780','A3781','A3781','A3790','A3791','A3791','A403','A403','A5004','A5004','A5004','A5484','A5484','B012','B012','B052','B052','B0681','B0681','B7781','B7781','B953','B960','B961','J09X1','J09X1','J1000','J1000','J1001','J1001','J1008','J1008','J1100','J1100','J1108','J1108','J120','J120','J121','J121','J122','J122','J123','J123','J1281','J1281','J1282','J1282','J1289','J1289','J129','J129','J13','J13','J14','J14','J150','J150','J151','J151','J1520','J1520','J15211','J15211','J15212','J15212','J1529','J1529','J153','J153','J154','J154','J155','J155','J156','J156','J157','J157','J158','J158','J159','J159','J160','J160','J168','J17','J180','J181','J182','J188','J189','J200','J200','J8281','J8282','J84111','J84116','J84117','J842','J851','J852','J95851','J95851','P230','P230','P230','P231','P231','P231','P232','P232','P232','P233','P233','P233','P234','P234','P234','P235','P235','P235','P236','P236','P236','P238','P238','P238','P239','P239','Z8701')
 then 1 else 0 end) as Pneumonia,

(Case when icd_code in ('J95821','J95821','J95822','J95822','J9600','J9601','J9602','J9620','J9621','J9622')
 then 1 else 0 end) as acRespFail,

(Case when icd_code in ('I0981','I0981','I110','I110','I119','I130','I130','I130','I1310','I1310','I1311','I1311','I132','I132','I132','I5020','I5021','I5022','I5023','I5030','I5031','I5032','I5033','I5040','I5041','I5042','I5043','I50810','I50811','I50812','I50813','I50814','I5082','I5083','I5084','I5089','I509','I97130','I97130','I97131','I97131','T8622','T8632')
 then 1 else 0 end) as HeartFail,

(Case when icd_code in ('N170','N171','N172','N178','N179','N990','N990','O904','O904') 
then 1 else 0 end) as acKidneyFail,

(Case when icd_code='I499' 
 then 1 else 0 end) as Arrhythmia,

(Case when icd_code in ('I2101','I2102','I2109','I2111','I2119','I2121','I2129','I213','I214','I219','I21A1','I21A9','I220','I221','I222','I228','I229','I230','I231','I232','I233','I234','I235','I236','I238','I240','I252') 
then 1 else 0 end) as Myocardial_acCS,

(Case when icd_code in ('I2601','I2609','I2690','I2693','I2694','I2699','I2782','Z86711')
 then 1 else 0 end) as PulmonaryEmb,

(Case when icd_code in ('G43601','G43609','G43611','G43619','I6300','I63011','I63012','I63013','I63019','I6302','I63031','I63032','I63033','I63039','I6309','I6310','I63111','I63112','I63113','I63119','I6312','I63131','I63132','I63133','I63139','I6319','I6320','I63211','I63212','I63213','I63219','I6322','I63231','I63232','I63233','I63239','I6329','I6330','I63311','I63312','I63313','I63319','I63321','I63322','I63323','I63329','I63331','I63332','I63333','I63339','I63341','I63342','I63343','I63349','I6339','I6340','I63411','I63412','I63413','I63419','I63421','I63422','I63423','I63429','I63431','I63432','I63433','I63439','I63441','I63442','I63443','I63449','I6349','I6350','I63511','I63512','I63513','I63519','I63521','I63522','I63523','I63529','I63531','I63532','I63533','I63539','I63541','I63542','I63543','I63549','I6359','I636','I638','I6381','I6389','I639','I6930','I6931','I69310','I69311','I69312','I69313','I69314','I69315','I69318','I69319','I69320','I69321','I69322','I69323','I69328','I69331','I69332','I69333','I69334','I69339','I69341','I69342','I69343','I69344','I69349','I69351','I69352','I69353','I69354','I69359','I69361','I69362','I69363','I69364','I69365','I69369','I69390','I69391','I69392','I69393','I69398','G458','G459','Z8673')
 then 1 else 0 end) as IschemicStroke, 

(Case
  when ( (icd_code in ('U071'))
 ----or (A4189, A419, R652%,, J9600, J9601, J9602, J9620, J9621, J9622, J80, R0603, R069, R092, J12%, J18%, I2782, I26% %)
  and (icd_pri_sec in ('P', 'S'))) then 1 else 0 end) 
  as covid_of, -- dying from or of covid 
  
(Case
  when (
          (icd_code in ('A4189', 'A419') or 
          icd_code like 'R652%')
       and (icd_pri_sec='P')
       ) then 1 else 0
 end) as sept, 
 
(Case
  when ( icd_code in 
          ('J9600','J9601','J9602','J9620','J9621','J9622','J80','R0603','R069','R092')
           and (icd_pri_sec='P')
       ) then 1 else 0
end) as arf, 

(Case 
   when ( (icd_code like 'J12%' or icd_code like 'J18%') 
--          or 
--          icd_code in ('A0103','A0103','A0222','A0222','A3700','A3701','A3701','A3710','A3711','A3711','A3780','A3781','A3781','A3790','A3791','A3791','A403','A403','A5004','A5004','A5004','A5484','A5484','B012','B012','B052','B052','B0681','B0681','B7781','B7781','B953','B960','B961','J09X1','J09X1','J1000','J1000','J1001','J1001','J1008','J1008','J1100','J1100','J1108','J1108','J120','J120','J121','J121','J122','J122','J123','J1281','J1282','J1289','J1289','J129','J129','J13','J13','J14','J14','J150','J150','J151','J151','J1520','J1520','J15211','J15211','J15212','J15212','J1529','J1529','J153','J153','J154','J154','J155','J155','J156','J156','J157','J157','J158','J158','J159','J159','J160','J160','J168','J17','J180','J181','J182','J188','J189','J200','J200','J8281','J8282','J84111','J84116','J84117','J842','J851','J852','J95851','J95851','P230','P230','P230','P231','P231','P231','P232','P232','P232','P233','P233','P233','P234','P234','P234','P235','P235','P235','P236','P236','P236','P238','P238','P238','P239','P239','Z8701') 
         and icd_pri_sec='P' 
        )
 then 1 else 0 end ) as pneu, 
 
(Case when (
       (icd_code in ('I2782') or  
         icd_code like 'I26%') 
         and (icd_pri_sec='P')
        ) 
        then 1 else 0 end ) as pul_emb
 
FROM paticd_diag
""")


icd_code = icd_code.withColumn('ICD_CODE', F.regexp_replace("ICD_CODE", "\\.", ""))

# COMMAND ----------

mh_conds_list=['F411', 'F4323', 'F331', 'F4322', 'F4320', 'F419', 
'F4310', 'F4321', 'F3212', 'Z630', 'F330', 'F902', 
'F321', 'F341', 'F900', 'F332', 'F320', 'F4325', 'F410', 'F840']
cerebrovascular_conds_list=['I60', 'I600', 'I6000', 'I6001', 'I6002', 'I601', 'I6010', 'I6011', 'I6012', 'I602', 'I603', 'I6030', 'I6031', 'I6032', 'I604', 'I605', 'I6050', 'I6051', 'I6052', 'I606', 'I607', 'I608', 'I609', 'I61', 'I610', 'I611', 'I612', 'I613', 'I614', 'I615', 'I616', 'I618', 'I619', 'I62', 'I620', 'I6200', 'I6201', 'I6202', 'I6203', 'I621', 'I629', 'I63', 'I63', 'I63', 'I6301', 'I63011', 'I63012', 'I63013', 'I63019', 'I6302', 'I6303', 'I63031', 'I63032', 'I63033', 'I63039', 'I6309', 'I631', 'I631', 'I6311', 'I63111', 'I63112', 'I63113', 'I63119', 'I6312', 'I6313', 'I63131', 'I63132', 'I63133', 'I63139', 'I6319', 'I632', 'I632', 'I6321', 'I63211', 'I63212', 'I63213', 'I63219', 'I6322', 'I6323', 'I63231', 'I63232', 'I63233', 'I63239', 'I6329', 'I633', 'I633', 'I6331', 'I63311', 'I63312', 'I63313', 'I63319', 'I6332', 'I63321', 'I63322', 'I63323', 'I63329', 'I6333', 'I63331', 'I63332', 'I63333', 'I63339', 'I6334', 'I63341', 'I63342', 'I63343', 'I63349', 'I6339', 'I634', 'I634', 'I6341', 'I63411', 'I63412', 'I63413', 'I63419', 'I6342', 'I63421', 'I63422', 'I63423', 'I63429', 'I6343', 'I63431', 'I63432', 'I63433', 'I63439', 'I6344', 'I63441', 'I63442', 'I63443', 'I63449', 'I6349', 'I635', 'I635', 'I6351', 'I63511', 'I63512', 'I63513', 'I63519', 'I6352', 'I63521', 'I63522', 'I63523', 'I63529', 'I6353', 'I63531', 'I63532', 'I63533', 'I63539', 'I6354', 'I63541', 'I63542', 'I63543', 'I63549', 'I6359', 'I636', 'I638', 'I6381', 'I6389', 'I639', 'I65', 'I65', 'I6501', 'I6502', 'I6503', 'I6509', 'I651', 'I652', 'I6521', 'I6522', 'I6523', 'I6529', 'I658', 'I659', 'I66', 'I66', 'I6601', 'I6602', 'I6603', 'I6609', 'I661', 'I6611', 'I6612', 'I6613', 'I6619', 'I662', 'I6621', 'I6622', 'I6623', 'I6629', 'I663', 'I668', 'I669', 'I67', 'I67', 'I671', 'I672', 'I673', 'I674', 'I675', 'I676', 'I677', 'I678', 'I6781', 'I6782', 'I6783', 'I6784', 'I67841', 'I67848', 'I6785', 'I6785', 'I67858', 'I6789', 'I679', 'I68', 'I68', 'I682', 'I688', 'I69', 'I69', 'I69', 'I6901', 'I6901', 'I69011', 'I69012', 'I69013', 'I69014', 'I69015', 'I69018', 'I69019', 'I6902', 'I6902', 'I69021', 'I69022', 'I69023', 'I69028', 'I6903', 'I69031', 'I69032', 'I69033', 'I69034', 'I69039', 'I6904', 'I69041', 'I69042', 'I69043', 'I69044', 'I69049', 'I6905', 'I69051', 'I69052', 'I69053', 'I69054', 'I69059', 'I6906', 'I69061', 'I69062', 'I69063', 'I69064', 'I69065', 'I69069', 'I6909', 'I6909', 'I69091', 'I69092', 'I69093', 'I69098', 'I691', 'I691', 'I6911', 'I6911', 'I69111', 'I69112', 'I69113', 'I69114', 'I69115', 'I69118', 'I69119', 'I6912', 'I6912', 'I69121', 'I69122', 'I69123', 'I69128', 'I6913', 'I69131', 'I69132', 'I69133', 'I69134', 'I69139', 'I6914', 'I69141', 'I69142', 'I69143', 'I69144', 'I69149', 'I6915', 'I69151', 'I69152', 'I69153', 'I69154', 'I69159', 'I6916', 'I69161', 'I69162', 'I69I63', 'I69164', 'I69I65', 'I69I69', 'I6919', 'I6919', 'I69191', 'I69192', 'I69193', 'I69198', 'I692', 'I692', 'I6921', 'I6921', 'I69211', 'I69212', 'I69213', 'I69214', 'I69215', 'I69218', 'I69219', 'I6922', 'I6922', 'I69221', 'I69222', 'I69223', 'I69228', 'I6923', 'I69231', 'I69232', 'I69233', 'I69234', 'I69239', 'I6924', 'I69241', 'I69242', 'I69243', 'I69244', 'I69249', 'I6925', 'I69251', 'I69252', 'I69253', 'I69254', 'I69259', 'I6926', 'I69261', 'I69262', 'I69263', 'I69264', 'I69265', 'I69269', 'I6929', 'I6929', 'I69291', 'I69292', 'I69293', 'I69298', 'I693', 'I693', 'I6931', 'I6931', 'I69311', 'I69312', 'I69313', 'I69314', 'I69315', 'I69318', 'I69319', 'I6932', 'I6932', 'I69321', 'I69322', 'I69323', 'I69328', 'I6933', 'I69331', 'I69332', 'I69333', 'I69334', 'I69339', 'I6934', 'I69341', 'I69342', 'I69343', 'I69344', 'I69349', 'I6935', 'I69351', 'I69352', 'I69353', 'I69354', 'I69359', 'I6936', 'I69361', 'I69362', 'I69363', 'I69364', 'I69365', 'I69369', 'I6939', 'I6939', 'I69391', 'I69392', 'I69393', 'I69398', 'I698', 'I698', 'I6981', 'I6981', 'I69811', 'I69812', 'I69813', 'I69814', 'I69815', 'I69818', 'I69819', 'I6982', 'I6982', 'I69821', 'I69822', 'I69823', 'I69828', 'I6983', 'I69831', 'I69832', 'I69833', 'I69834', 'I69839', 'I6984', 'I69841', 'I69842', 'I69843', 'I69844', 'I69849', 'I6985', 'I69851', 'I69852', 'I69853', 'I69854', 'I69859', 'I6986', 'I69861', 'I69862', 'I69863', 'I69864', 'I69865', 'I69869', 'I6989', 'I6989', 'I69891', 'I69892', 'I69893', 'I69898', 'I699', 'I699', 'I6991', 'I6991', 'I69911', 'I69912', 'I69913', 'I69914', 'I69915', 'I69918', 'I69919', 'I6992', 'I6992', 'I69921', 'I69922', 'I69923', 'I69928', 'I6993', 'I69931', 'I69932', 'I69933', 'I69934', 'I69939', 'I6994', 'I69941', 'I69942', 'I69943', 'I69944', 'I69949', 'I6995', 'I69951', 'I69952', 'I69953', 'I69954', 'I69959', 'I6996', 'I69961', 'I69962', 'I69963', 'I69964', 'I69965', 'I69969', 'I6999', 'I6999', 'I69991', 'I69992', 'I69993', 'I69998']
cancer_cond_list=['C00', 'C000', 'C001', 'C002', 'C003', 'C004', 'C005', 'C006', 'C008', 'C009', 'C01', 'C02', 'C020', 'C021', 'C022', 'C023', 'C024', 'C028', 'C029', 'C03', 'C030', 'C031', 'C039', 'C04', 'C040', 'C041', 'C048', 'C049', 'C05', 'C050', 'C051', 'C052', 'C058', 'C059', 'C06', 'C060', 'C061', 'C062', 'C068', 'C0680', 'C0689', 'C069', 'C07', 'C08', 'C080', 'C081', 'C089', 'C09', 'C090', 'C091', 'C098', 'C099', 'C10', 'C100', 'C101', 'C102', 'C103', 'C104', 'C108', 'C109', 'C11', 'C110', 'C111', 'C112', 'C113', 'C118', 'C119', 'C12', 'C13', 'C130', 'C131', 'C132', 'C14', 'C140', 'C142', 'C148', 'C15', 'C153', 'C154', 'C155', 'C158', 'C159', 'C16', 'C160', 'C161', 'C162', 'C163', 'C164', 'C165', 'C166', 'C168', 'C169', 'C17', 'C170', 'C171', 'C172', 'C173', 'C178', 'C179', 'C18', 'C180', 'C181', 'C182', 'C183', 'C184', 'C185', 'C186', 'C187', 'C188', 'C189', 'C19', 'C20', 'C21', 'C210', 'C211', 'C212', 'C218', 'C22', 'C220', 'C221', 'C222', 'C223', 'C224', 'C227', 'C228', 'C229', 'C23', 'C24', 'C240', 'C241', 'C248', 'C249', 'C25', 'C250', 'C251', 'C252', 'C253', 'C254', 'C257', 'C258', 'C259', 'C26', 'C260', 'C261', 'C269', 'C30', 'C300', 'C301', 'C31', 'C310', 'C311', 'C312', 'C313', 'C318', 'C319', 'C32', 'C320', 'C321', 'C322', 'C323', 'C328', 'C329', 'C33', 'C34', 'C340', 'C3400', 'C3401', 'C3402', 'C341', 'C3410', 'C3411', 'C3412', 'C342', 'C343', 'C3430', 'C3431', 'C3432', 'C348', 'C3480', 'C3481', 'C3482', 'C349', 'C3490', 'C3491', 'C3492', 'C37', 'C38', 'C380', 'C381', 'C382', 'C383', 'C384', 'C388', 'C39', 'C390', 'C399', 'C40', 'C400', 'C4000', 'C4001', 'C4002', 'C401', 'C4010', 'C4011', 'C4012', 'C402', 'C4020', 'C4021', 'C4022', 'C403', 'C4030', 'C4031', 'C4032', 'C408', 'C4080', 'C4081', 'C4082', 'C409', 'C4090', 'C4091', 'C4092', 'C41', 'C410', 'C411', 'C412', 'C413', 'C414', 'C419', 'C43', 'C430', 'C431', 'C4310', 'C4311', 'C43111', 'C43112', 'C4312', 'C43121', 'C43122', 'C432', 'C4320', 'C4321', 'C4322', 'C433', 'C4330', 'C4331', 'C4339', 'C434', 'C435', 'C4351', 'C4352', 'C4359', 'C436', 'C4360', 'C4361', 'C4362', 'C437', 'C4370', 'C4371', 'C4372', 'C438', 'C439', 'C45', 'C450', 'C451', 'C451', 'C452', 'C457', 'C459', 'C46', 'C460', 'C461', 'C462', 'C463', 'C464', 'C465', 'C4650', 'C4651', 'C4652', 'C467', 'C469', 'C47', 'C470', 'C471', 'C4710', 'C4711', 'C4712', 'C472', 'C4720', 'C4721', 'C4722', 'C473', 'C474', 'C475', 'C476', 'C478', 'C479', 'C48', 'C480', 'C481', 'C482', 'C488', 'C49', 'C490', 'C491', 'C4910', 'C4911', 'C4912', 'C492', 'C4920', 'C4921', 'C4922', 'C493', 'C494', 'C495', 'C496', 'C498', 'C499', 'C49A', 'C49A0', 'C49A1', 'C49A2', 'C49A3', 'C49A4', 'C49A5', 'C49A9', 'C50', 'C500', 'C5001', 'C50011', 'C50012', 'C50019', 'C5002', 'C50021', 'C50022', 'C50029', 'C501', 'C5011', 'C50111', 'C50112', 'C50119', 'C5012', 'C50121', 'C50122', 'C50129', 'C502', 'C5021', 'C50211', 'C50212', 'C50219', 'C5022', 'C50221', 'C50222', 'C50229', 'C503', 'C5031', 'C50311', 'C50312', 'C50319', 'C5032', 'C50321', 'C50322', 'C50329', 'C504', 'C5041', 'C50411', 'C50412', 'C50419', 'C5042', 'C50421', 'C50422', 'C50429', 'C505', 'C5051', 'C50511', 'C50512', 'C50519', 'C5052', 'C50521', 'C50522', 'C50529', 'C506', 'C5061', 'C50611', 'C50612', 'C50619', 'C5062', 'C50621', 'C50622', 'C50629', 'C508', 'C5081', 'C50811', 'C50812', 'C50819', 'C5082', 'C50821', 'C50822', 'C50829', 'C509', 'C5091', 'C50911', 'C50912', 'C50919', 'C5092', 'C50921', 'C50922', 'C50929', 'C51', 'C510', 'C511', 'C512', 'C518', 'C519', 'C52', 'C53', 'C530', 'C531', 'C538', 'C539', 'C54', 'C540', 'C541', 'C542', 'C543', 'C548', 'C549', 'C55', 'C56', 'C561', 'C562', 'C569', 'C57', 'C570', 'C5700', 'C5701', 'C5702', 'C571', 'C5710', 'C5711', 'C5712', 'C572', 'C5720', 'C5721', 'C5722', 'C573', 'C574', 'C577', 'C578', 'C579', 'C58', 'C60', 'C600', 'C601', 'C602', 'C608', 'C609', 'C61', 'C62', 'C620', 'C6200', 'C6201', 'C6202', 'C621', 'C6210', 'C6211', 'C6212', 'C629', 'C6290', 'C6291', 'C6292', 'C63', 'C630', 'C6300', 'C6301', 'C6302', 'C631', 'C6310', 'C6311', 'C6312', 'C632', 'C637', 'C638', 'C639', 'C64', 'C641', 'C642', 'C649', 'C65', 'C651', 'C652', 'C659', 'C66', 'C661', 'C662', 'C669', 'C67', 'C670', 'C671', 'C672', 'C673', 'C674', 'C675', 'C676', 'C677', 'C678', 'C679', 'C68', 'C680', 'C681', 'C682', 'C688', 'C689', 'C69', 'C690', 'C6900', 'C6901', 'C6902', 'C691', 'C6910', 'C6911', 'C6912', 'C692', 'C6920', 'C6921', 'C6922', 'C693', 'C6930', 'C6931', 'C6932', 'C694', 'C6940', 'C6941', 'C6942', 'C695', 'C6950', 'C6951', 'C6952', 'C696', 'C6960', 'C6961', 'C6962', 'C698', 'C6980', 'C6981', 'C6982', 'C699', 'C6990', 'C6991', 'C6992', 'C70', 'C700', 'C701', 'C709', 'C71', 'C710', 'C711', 'C712', 'C713', 'C714', 'C715', 'C716', 'C717', 'C718', 'C719', 'C72', 'C720', 'C721', 'C722', 'C7220', 'C7221', 'C7222', 'C723', 'C7230', 'C7231', 'C7232', 'C724', 'C7240', 'C7241', 'C7242', 'C725', 'C7250', 'C7259', 'C729', 'C73', 'C74', 'C740', 'C7400', 'C7401', 'C7402', 'C741', 'C7410', 'C7411', 'C7412', 'C749', 'C7490', 'C7491', 'C7492', 'C75', 'C750', 'C751', 'C752', 'C753', 'C754', 'C755', 'C758', 'C759', 'C76', 'C760', 'C761', 'C762', 'C763', 'C764', 'C7640', 'C7641', 'C7642', 'C765', 'C7650', 'C7651', 'C7652', 'C768', 'C77', 'C770', 'C771', 'C772', 'C773', 'C774', 'C775', 'C778', 'C779', 'C78', 'C780', 'C7800', 'C7801', 'C7802', 'C781', 'C782', 'C783', 'C7830', 'C7839', 'C784', 'C785', 'C786', 'C787', 'C788', 'C7880', 'C7889', 'C79', 'C790', 'C7900', 'C7901', 'C7902', 'C791', 'C7910', 'C7911', 'C7919', 'C792', 'C793', 'C7931', 'C7932', 'C794', 'C7940', 'C7949', 'C795', 'C7951', 'C7952', 'C796', 'C7960', 'C7961', 'C7962', 'C797', 'C7970', 'C7971', 'C7972', 'C798', 'C7981', 'C7982', 'C7989', 'C799', 'C80', 'C800', 'C801', 'C802', 'C7A', 'C7A0', 'C7A00', 'C7A01', 'C7A010', 'C7A011', 'C7A012', 'C7A019', 'C7A02', 'C7A020', 'C7A021', 'C7A022', 'C7A023', 'C7A024', 'C7A025', 'C7A026', 'C7A029', 'C7A09', 'C7A090', 'C7A091', 'C7A092', 'C7A093', 'C7A094', 'C7A095', 'C7A096', 'C7A098', 'C7A1', 'C7A8', 'C7B', 'C7B0', 'C7B00', 'C7B01', 'C7B02', 'C7B03', 'C7B04', 'C7B09', 'C7B1', 'C7B8', 'C81', 'C810', 'C8100', 'C8101', 'C8102', 'C8103', 'C8104', 'C8105', 'C8106', 'C8107', 'C8108', 'C8109', 'C811', 'C8110', 'C8111', 'C8112', 'C8113', 'C8114', 'C8115', 'C8116', 'C8117', 'C8118', 'C8119', 'C812', 'C8120', 'C8121', 'C8122', 'C8123', 'C8124', 'C8125', 'C8126', 'C8127', 'C8128', 'C8129', 'C813', 'C8130', 'C8131', 'C8132', 'C8133', 'C8134', 'C8135', 'C8136', 'C8137', 'C8138', 'C8139', 'C384', 'C8140', 'C8141', 'C8142', 'C8143', 'C8144', 'C8145', 'C8146', 'C8147', 'C8148', 'C8149', 'C817', 'C8170', 'C8172', 'C8173', 'C8174', 'C875', 'C8176', 'C8177', 'C8178', 'C8179', 'C819', 'C8190', 'C8191', 'C8192', 'C8193', 'C8194', 'C8195', 'C8196', 'C8197', 'C8198', 'C8199', 'C82', 'C820 ', 'C8200', 'C8201', 'C8202', 'C8203', 'C8204', 'C8205', 'C8206', 'C8207', 'C8208', 'C8209', 'C821', 'C8210', 'C8211', 'C8212', 'C8213', 'C8214', 'C8215', 'C8216', 'C8217', 'C8218', 'C8219', 'C822', 'C8220', 'C8221', 'C8222', 'C8223', 'C8224', 'C8225', 'C8226', 'C8227', 'C8228', 'C8229', 'C823', 'C8230', 'C8231', 'C8232', 'C8233', 'C8234', 'C8235', 'C8236', 'C8237', 'C8238', 'C8239', 'C824', 'C8240', 'C8241', 'C8242', 'C8243', 'C8244', 'C8245', 'C8246', 'C8247', 'C8248', 'C8249', 'C825', 'C8250', 'C8251', 'C8252', 'C8253', 'C85254', 'C8255', 'C8256', 'C8257', 'C8258', 'C8259', 'C826', 'C8260', 'C8261', 'C8262', 'C8263', 'C8264', 'C8265', 'C8266', 'C8267', 'C8268', 'C8269', 'C828', 'C8280', 'C8281', 'C8282', 'C8283', 'C8284', 'C8285', 'C8286', 'C8287', 'C8288', 'C8289', 'C829', 'C8290', 'C8291', 'C8292', 'C8293', 'C8294', 'C8295', 'C8296', 'C8297', 'C8298', 'C8299', 'C83', 'C830', 'C8300', 'C8301', 'C8302', 'C8303', 'C8304', 'C8305', 'C8306', 'C8307', 'C8308', 'C8308', 'C8309', 'C831', 'C8310', 'C8311', 'C8312', 'C8313', 'C8314', 'C8315', 'C8316', 'C8317', 'C8318', 'C8319', 'C833', 'C8330', 'C8331', 'C8332', 'C8333', 'C8334', 'C8335', 'C8336', 'C8337', 'C8338', 'C8339', 'C835', 'C8350', 'C8351', 'C8352', 'C8353', 'C8354', 'C8355', 'C8356', 'C8357', 'C8358', 'C8359', 'C837', 'C8370', 'C8371', 'C8372', 'C8373', 'C8374', 'C8375', 'C8376', 'C8377', 'C8378', 'C8379', 'C838', 'C8380', 'C8381', 'C3882', 'C8383', 'C8384', 'C8385', 'C8386', 'C8387', 'C8388', 'C8389', 'C839', 'C8390', 'C8391', 'C8392', 'C8393', 'C8394', 'C8395', 'C8396', 'C8397', 'C8398', 'C8399', 'C84', 'C840', 'C8400', 'C8401', 'C8402', 'C8403', 'C8404', 'C8405', 'C8406', 'C8407', 'C8408', 'C8409', 'C841', 'C8410', 'C8411', 'C8412', 'C8413', 'C8414', 'C8415', 'C8416', 'C8417', 'C8418', 'C8419', 'C844', 'C8440', 'C8441', 'C8442', 'C8443', 'C8444', 'C8445', 'C8446', 'C8447', 'C8448', 'C8449', 'C846', 'C8460', 'C8461', 'C8462', 'C8463', 'C8464', 'C8465', 'C8466', 'C8467', 'C8468', 'C8469', 'C847', 'C8470', 'C8471', 'C8472', 'C8473', 'C8474', 'C8475', 'C8476', 'C8477', 'C8478', 'C8479', 'C84A', 'C84A0', 'C84A1', 'C84A2', 'C84A3', 'C84A4', 'C84A5', 'C84A6', 'C84A7', 'C84A8', 'C84A9', 'C84Z', 'C84Z0', 'C84Z1', 'C84Z2',
'C84Z3', 'C84Z4', 'C84Z5', 'C84Z6', 'C84Z7', 'C84Z8', 'C84Z9', 'C849', 'C8490', 'C8491', 'C8492', 'C8493', 'C8494', 'C8495', 'C8496', 'C8497', 'C8498', 'C8499', 'C85', 'C851', 'C8510', 'C8511', 'C8512', 'C8513', 'C8514', 'C8515', 'C8516', 'C8517', 'C8518', 'C8519', 'C852', 'C8520', 'C8521', 'C8522', 'C8523', 'C8524', 'C8525', 'C8526', 'C8527', 'C8528', 'C8529', 'C858', 'C8580', 'C8581', 'C8582', 'C8583', 'C8584', 'C8585', 'C8586', 'C8587', 'C8588', 'C8589', 'C859', 'C8590', 'C8591', 'C8592', 'C8593', 'C8594', 'C8595', 'C8596', 'C8597', 'C8598', 'C8599', 'C86', 'C860', 'C861', 'C862', 'C863', 'C864', 'C865', 'C866', 'C88', 'C880', 'C882', 'C883', 'C884', 'C888', 'C889', 'C90', 'C900', 'C9000', 'C9001', 'C9002', 'C901', 'C9010', 'C9011', 'C9012', 'C902', 'C9020', 'C9021', 'C9022', 'C903', 'C9030', 'C9031', 'C9032', 'C91', 'C910', 'C9100', 'C9101', 'C9102', 'C911', 'C9110', 'C9111', 'C9112', 'C913', 'C9130', 'C9131', 'C9132', 'C914', 'C9140', 'C9141', 'C9142', 'C915', 'C9150', 'C9151', 'C9152', 'C916', 'C9160', 'C9161', 'C9162', 'C91A', 'C91A0', 'C91A1', 'C91A2', 'C91Z', 'C91Z0', 'C91Z1', 'C91Z2', 'C919', 'C9190', 'C9191', 'C9192', 'C92', 'C920', 'C9200', 'C9201', 'C9202', 'C921', 'C9210', 'C9211', 'C9212', 'C922', 'C9220', 'C9221', 'C9222', 'C923', 'C9230', 'C9231', 'C9232', 'C924', 'C9240', 'C9241', 'C9242', 'C925', 'C9250', 'C9251', 'C9252', 'C926', 'C9260', 'C9261', 'C9262', 'C92A', 'C92A0', 'C92A1', 'C92A2', 'C92Z', 'C92Z0', 'C92Z1', 'C92Z2', 'C929', 'C9290', 'C9291', 'C9292', 'C93', 'C930', 'C9300', 'C9301', 'C9302', 'C931', 'C9310', 'C9311', 'C9312', 'C933', 'C9330', 'C9331', 'C9332', 'C93Z', 'C93Z0', 'C93Z1', 'C93Z2', 'C939', 'C9390', 'C9391', 'C9392', 'C94', 'C940', 'C9400', 'C9401', 'C9402', 'C942', 'C9420', 'C9421', 'C9422', 'C943', 'C9430', 'C9431', 'C9432', 'C944', 'C9440', 'C9441', 'C9442', 'C946', 'C948', 'C9480', 'C9481', 'C9482', 'C95', 'C950', 'C9500', 'C9501', 'C9502', 'C951', 'C9510', 'C9511', 'C9512', 'C959', 'C9590', 'C9591', 'C9592', 'C96', 'C960', 'C962', 'C9620', 'C9621', 'C9622', 'C9629', 'C964', 'C965', 'C966', 'C96A', 'C96Z', 'C969', 'D00', 'D000', 'D0000', 'D0001', 'D0002', 'D0003', 'D0004', 'D0005', 'D0006', 'D0007', 'D0008', 'D001', 'D002', 'D01', 'D010', 'D011', 'D012', 'D013', 'D014', 'D0140', 'D0149', 'D015', 'D017', 'D019', 'D02', 'D020', 'D021', 'D022', 'D0220', 'D0221', 'D0222', 'D023', 'D024', 'D03', 'D030', 'D031', 'D0310', 'D0311', 'D03111', 'D03112', 'D0312', 'D03121', 'D03122', 'D032', 'D0320', 'D0321', 'D0322', 'D033', 'D0330', 'D0339', 'D034', 'D035', 'D0351', 'D0352', 'D0359', 'D036', 'D0360', 'D0361', 'D0362', 'D037', 'D0370', 'D0371', 'D0372', 'D038', 'D039', 'D04', 'D040', 'D041', 'D0410', 'D0411', 'D04111', 'D04112', 'D0412', 'D04121', 'D04122', 'D042', 'D0420', 'D0421', 'D0422', 'D043', 'D0430', 'D0439', 'D044', 'D045', 'D046', 'D0460', 'D0461', 'D0462', 'D047', 'D0470', 'D0471', 'D0472', 'D048', 'D049', 'D05', 'D050', 'D0500', 'D0501', 'D0502', 'D051', 'D0510', 'D0511', 'D0512', 'D058', 'D0580', 'D0581', 'D0582', 'D059', 'D0590', 'D0591', 'D0592', 'D06', 'D060', 'D061', 'D067', 'D069', 'D07', 'D070', 'D071', 'D072', 'D073', 'D0730', 'D0739', 'D074', 'D075', 'D076', 'D0760', 'D0761', 'D0769', 'D09', 'D090', 'D091', 'D0910', 'D0919', 'D092', 'D0920', 'D0921', 'D0922', 'D093', 'D098', 'D099']
chronic_kidney_disease_list=['A1811', 'A5275', 'B520', 'C641', 'C642', 'C649', 'C689', 'D3000', 'D3001', 'D3002', 'D4100', 'D4101', 'D4102', 'D4110', 'D4111', 'D4112', 'D4120', 'D4121', 'D4122', 'D593', 'E0821', 'E0822', 'E0829', 'E0865', 'E0921', 'E0922', 'E0929', 'E1021', 'E1022', 'E1029', 'E1065', 'E1121', 'E1122', 'E1129', 'E1165', 'E1321', 'E1322', 'E1329', 'E748', 'I120', 'I129', 'I130', 'I1310', 'I1311', 'I132', 'I701', 'I722', 'K767', 'M1030', 'M10311', 'M10312', 'M10319', 'M10321', 'M10322', 'M10329', 'M10331', 'M10332', 'M10339', 'M10341', 'M10342', 'M10349', 'M10351', 'M10352', 'M10359', 'M10361', 'M10362', 'M10369', 'M10371', 'M10372', 'M10379', 'M1038', 'M1039', 'M3214', 'M3215', 'M3504', 'N000', 'N001', 'N002', 'N003', 'N004', 'N005', 'N006', 'N007', 'N008', 'N009', 'N00A', 'N010', 'N011', 'N012', 'N013', 'N014', 'N015', 'N016', 'N017', 'N018', 'N019', 'N01A', 'N020', 'N021', 'N022', 'N023', 'N024', 'N025', 'N026', 'N027', 'N028', 'N029', 'N02A', 'N030', 'N031', 'N032', 'N033', 'N034', 'N035', 'N036', 'N037', 'N038', 'N039', 'N03A', 'N040', 'N041', 'N042', 'N043', 'N044', 'N045', 'N046', 'N047', 'N048', 'N049', 'N04A', 'N050', 'N051', 'N052', 'N053', 'N054', 'N055', 'N056', 'N057', 'N058', 'N059', 'N05A', 'N060', 'N061', 'N062', 'N063', 'N064', 'N065', 'N066', 'N067', 'N068', 'N069', 'N06A', 'N070', 'N071', 'N072', 'N073', 'N074', 'N075', 'N076', 'N077', 'N078', 'N079', 'N07A', 'N08', 'N131', 'N132', 'N1330', 'N1339', 'N140', 'N141', 'N142', 'N143', 'N144', 'N150', 'N158', 'N159', 'N16', 'N170', 'N171', 'N172', 'N178', 'N179', 'N181', 'N182', 'N183', 'N1830', 'N1831', 'N1832', 'N184', 'N185', 'N186', 'N189', 'N19', 'N250', 'N251', 'N2581', 'N2589', 'N259', 'N261', 'N269', 'Q6102', 'Q6111', 'Q6119', 'Q612', 'Q613', 'Q614', 'Q615', 'Q618', 'Q620', 'Q622', 'Q6210', 'Q6211', 'Q6212', 'Q6231', 'Q6232', 'Q6239', 'R944']

chr_lung_dis_list=['J8410', 'J84112', 'J40', 'J410', 'J411', 'J418', 'J42', 'J430', 'J431', 'J432', 'J438', 'J439', 'J44', 'J440', 'J441', 'J449', /* COPD end*/ 'J470', 'J471', 'J479']

Liver_Dis_Hep_list=['B18', 'B180', 'B181', 'B182', 'B188', 'B189', 'K70', 'K700', 'K701', 
                        'K703', 'K704', 'K709', 'K7010', 'K7011', 'K702', 'K703', 'K7030', 
                        'K7031', 'K7040', 'K7041', 'K709', 'K71', 'K710', 'K711', 'K712', 'K713', 
                        'K714', 'K715', 'K717', 'K718', 'K719', 'K7110', 'K7111', 'K7150', 
                        'K7151', 'K716', 'K7200', 'K72', 'K720', 'K721', 'K7201', 'K7210', 'K7211', 
                        'K7290', 'K729', 'K7290', 'K7291', 'K73', 'K730', 'K731', 'K732', 'K738', 
                        'K739', 'K740', 'K7400', 'K74', 'K7401', 'K7402', 'K741', 'K742', 'K743', 
                        'K744', 'K745', 'K746', 'K7460', 'K7469', 'K750', 'K751', 'K75', 'K750', 
                        'K752', 'K753', 'K754', 'K758', 'K7581', 'K7589', 'K759', 'K7581', 'K7589', 
                        'K759', 'K760', 'K761', 'K76', 'K760', 'K761', 'K762', 'K763','K764', 'K765', 
                        'K766', 'K767', 'K768', 'K7681', 'K7689', 'K769', 'K77', 'K8030', 'K8031', 
                        'K8032', 'K8033', 'K8034', 'K8035', 'K8036', 'K8037', 'K830', 'R160', 
                        'R162', 'Z4823', 'Z944', 'Z2251', 'Z2252']
                    
Cystic_Fibrosis_list=['D81810', 'D841', 'E000', 'E001', 'E002', 'E009', 'E030', 'E031', 'E250', 'E258', 'E259', 'E569', 'E700', 'E701', 'E7020', 'E7021', 'E7029', 'E7030', 'E70310', 'E70311', 'E70318', 'E70319', 'E70320', 'E70321', 'E70328', 'E70329', 'E70330', 'E70331', 'E70338', 'E70339', 'E7039', 'E705', 'E708', 'E7081', 'E7089', 'E709', 'E710', 'E71110', 'E71111', 'E71118', 'E7119', 'E712', 'E71310', 'E71311', 'E71312', 'E71313', 'E71314', 'E71318', 'E7132', 'E7141', 'E7210', 'E7211', 'E7212', 'E7219', 'E7220', 'E7221', 'E7222', 'E7223', 'E7229', 'E723', 'E724', 'E7250', 'E7251', 'E7259', 'E728', 'E7420', 'E7421', 'E7429', 'E74810', 'E74818', 'E74819', 'E7489', 'E840', 'E8411', 'E8419', 'E848', 'E849']


diabetes_list=['E0800', 'E0801', 'E0810', 'E0811', 'E0821', 'E0822', 'E0829', 'E08311', 'E08319', 'E08321', 'E083211', 'E083212', 'E083213', 'E083219', 'E08329', 'E083291', 'E083292', 'E083293', 'E083299', 'E08331', 'E083311', 'E083312', 'E083313', 'E083319', 'E08339', 'E083391', 'E083392', 'E083393', 'E083399', 'E08341', 'E083411', 'E083412', 'E083413', 'E083419', 'E08349', 'E083491', 'E083492', 'E083493', 'E083499', 'E08351', 'E083511', 'E083512', 'E083513', 'E083519', 'E083521', 'E083522', 'E083523', 'E083529', 'E083531', 'E083532', 'E083533', 'E083539', 'E083541', 'E083542', 'E083543', 'E083549', 'E083551', 'E083552', 'E083553', 'E083559', 'E08359', 'E083591', 'E083592', 'E083593', 'E083599', 'E0836', 'E0837X1', 'E0837X2', 'E0837X3', 'E0837X9', 'E0839', 'E0840', 'E0841', 'E0842', 'E0843', 'E0844', 'E0849', 'E0851', 'E0852', 'E0859', 'E08610', 'E08618', 'E08620', 'E08621', 'E08622', 'E08628', 'E08630', 'E08638', 'E08641', 'E08649', 'E0865', 'E0869', 'E088', 'E089', 'E0900', 'E0901', 'E0910', 'E0911', 'E0921', 'E0922', 'E0929', 'E09311', 'E09319', 'E09321', 'E093211', 'E093212', 'E093213', 'E093219', 'E09329', 'E093291', 'E093292', 'E093293', 'E093299', 'E09331', 'E093311', 'E093312', 'E093313', 'E093319', 'E09339', 'E093391', 'E093392', 'E093393', 'E093399', 'E09341', 'E093411', 'E093412', 'E093413', 'E093419', 'E09349', 'E093491', 'E093492', 'E093493', 'E093499', 'E09351', 'E093511', 'E093512', 'E093513', 'E093519', 'E093521', 'E093522', 'E093523', 'E093529', 'E093531', 'E093532', 'E093533', 'E093539', 'E093541', 'E093542', 'E093543', 'E093549', 'E093551', 'E093552', 'E093553', 'E093559', 'E09359', 'E093591', 'E093592', 'E093593', 'E093599', 'E0936', 'E0937X1', 'E0937X2', 'E0937X3', 'E0937X9', 'E0939', 'E0940', 'E0941', 'E0942', 'E0943', 'E0944', 'E0949', 'E0951', 'E0952', 'E0959', 'E09610', 'E09618', 'E09620', 'E09621', 'E09622', 'E09628', 'E09630', 'E09638', 'E09641', 'E09649', 'E0965', 'E0969', 'E098', 'E099', 'E1010', 'E1011', 'E1021', 'E1022', 'E1029', 'E10311', 'E10319', 'E10321', 'E103211', 'E103212', 'E103213', 'E103219', 'E10329', 'E103291', 'E103292', 'E103293', 'E103299', 'E10331', 'E103311', 'E103312', 'E103313', 'E103319', 'E10339', 'E103391', 'E103392', 'E103393', 'E103399', 'E10341', 'E103411', 'E103412', 'E103413', 'E103419', 'E10349', 'E103491', 'E103492', 'E103493', 'E103499', 'E10351', 'E103511', 'E103512', 'E103513', 'E103519', 'E103521', 'E103522', 'E103523', 'E103529', 'E103531', 'E103532', 'E103533', 'E103539', 'E103541', 'E103542', 'E103543', 'E103549', 'E103551', 'E103552', 'E103553', 'E103559', 'E10359', 'E103591', 'E103592', 'E103593', 'E103599', 'E1036', 'E1037X1', 'E1037X2', 'E1037X3', 'E1037X9', 'E1039', 'E1040', 'E1041', 'E1042', 'E1043', 'E1044', 'E1049', 'E1051', 'E1052', 'E1059', 'E10610', 'E10618', 'E10620', 'E10621', 'E10622', 'E10628', 'E10630', 'E10638', 'E10641', 'E10649', 'E1065', 'E1069', 'E108', 'E109', 'E1100', 'E1101', 'E1110', 'E1111', 'E1121', 'E1122', 'E1129', 'E11311', 'E11319', 'E11321', 'E113211', 'E113212', 'E113213', 'E113219', 'E11329', 'E113291', 'E113292', 'E113293', 'E113299', 'E11331', 'E113311', 'E113312', 'E113313', 'E113319', 'E11339', 'E113391', 'E113392', 'E113393', 'E113399', 'E11341', 'E113411', 'E113412', 'E113413', 'E113419', 'E11349', 'E113491', 'E113492', 'E113493', 'E113499', 'E11351', 'E113511', 'E113512', 'E113513', 'E113519', 'E113521', 'E113522', 'E113523', 'E113529', 'E113531', 'E113532', 'E113533', 'E113539', 'E113541', 'E113542', 'E113543', 'E113549', 'E113551', 'E113552', 'E113553', 'E113559', 'E11359', 'E113591', 'E113592', 'E113593', 'E113599', 'E1136', 'E1137X1', 'E1137X2', 'E1137X3', 'E1137X9', 'E1139', 'E1140', 'E1141', 'E1142', 'E1143', 'E1144', 'E1149', 'E1151', 'E1152', 'E1159', 'E11610', 'E11618', 'E11620', 'E11621', 'E11622', 'E11628', 'E11630', 'E11638', 'E11641', 'E11649', 'E1165', 'E1169', 'E118', 'E119', 'E1300', 'E1301', 'E1310', 'E1311', 'E1321', 'E1322', 'E1329', 'E13311', 'E13319', 'E13321', 'E133211', 'E133212', 'E133213', 'E133219', 'E13329', 'E133291', 'E133292', 'E133293', 'E133299', 'E13331', 'E133311', 'E133312', 'E133313', 'E133319', 'E13339', 'E133391', 'E133392', 'E133393', 'E133399', 'E13341', 'E133411', 'E133412', 'E133413', 'E133419', 'E13349', 'E133491', 'E133492', 'E133493', 'E133499', 'E13351', 'E133511', 'E133512', 'E133513', 'E133519', 'E133521', 'E133522', 'E133523', 'E133529', 'E133531', 'E133532', 'E133533', 'E133539', 'E133541', 'E133542', 'E133543', 'E133549', 'E133551', 'E133552', 'E133553', 'E133559', 'E13359', 'E133591', 'E133592', 'E133593', 'E133599', 'E1336', 'E1339', 'E1340', 'E1341', 'E1342', 'E1343', 'E1344', 'E1349', 'E1351', 'E1352', 'E1359', 'E13610', 'E13618', 'E13620', 'E13621', 'E13622', 'E13628', 'E13630', 'E13638', 'E13641', 'E13649', 'E1365', 'E1369', 'E138', 'E139']

disabilities_list= ['F819', 'F82', 'F88', 'F89', --Other dev dis 
                        'F800', 'F801', 'F802', 'F804', 'F8081', 
                        'F8082', 'F8089', 'F809', 'F810', 'F812', 
                        'F8181', 'F8189', 'F819', 'F82', 'H9325', 'R480' -- LD
                        'E7871', 'E7872', 'F70', 'F71', 'F72', 'F73', 'F78', 'F79', -- Int Dis
                        'P043', 'Q860', 'Q871', 'Q8711', 'Q8719', 'Q872', 'Q873', 
                        'Q875', 'Q8781', 'Q8789', 'Q897', 'Q898', 'Q900', 'Q901', 
                        'Q902', 'Q909', 'Q910', 'Q911', 'Q912', 'Q913', 'Q914', 
                        'Q915', 'Q916', 'Q917', 'Q920', 'Q921', 'Q922', 'Q925', 
                        'Q9261', 'Q9262', 'Q927', 'Q928', 'Q929', 'Q930', 'Q931', 
                        'Q932', 'Q933', 'Q934', 'Q935', 'Q9351', 'Q9359', 'Q937', 
                        'Q9381', 'Q9388', 'Q9389', 'Q939', 'Q952', 'Q953', 'Q992'
                        'G800', 'G801', 'G802', 'G803', 'G804', 'G808', 'G809' -- CerPalsy
                        'F630', 'F631', 'F632', 'F633', 'F6381', 'F6389', 'F639', --ADHD
                        'F900', 'F901', 'F902', 'F908', 'F909', 'F910', 'F911', 
                        'F912', 'F913', 'F918', 'F919'
                        'J40', 'J410', 'J411', 'J418', 'J42', 'J430', 
                        'J431', 'J432', 'J438', 'J439', 'J440', 'J441', 
                        'J449', 'J470', 'J471', 'J479', 
                        'Q90', 'Q900', 'Q901', 'Q902', 'Q909'] --Downs Syndrome
 

(Case When  icd_code in ('I21', 'I210', 'I2101', 'I2102', 'I2109', 'I211', 'I2111', 'I2119', 'I212', 'I2121', 'I2129', 'I213', 'I214', 'I219', 'I21A', 'I21A1', 'I21A9', 'I22', 'I220', 'I221', 'I222', 'I228', 'I229', 'I23', 'I230', 'I231', 'I232', 'I233', 'I234', 'I235', 'I236', 'I237', 'I238', 'I24', 'I240', 'I241', 'I248', 'I249', 'I25', 'I251', 'I2510', 'I2511', 'I25110', 'I25111', 'I251108', 'I25119', 'I252', 'I253', 'I254', 'I2541', 'I2542', 'I255', 'I256', 'I257', 'I2570', 'I25700', 'I25701', 'I25708', 'I25709', 'I2571', 'I25710', 'I25711', 'I25718', 'I25719', 'I2572', 'I25720', 'I25721', 'I25728', 'I25729', 'I25729', 'I2573', 'I25730', 'I25731', 'I25738', 'I25739', 'I2575', 'I25750', 'I25751', 'I25758', 'I25759', 'I2576', 'I25760', 'I25761', 'I25768', 'I25769', 'I2579', 'I25790', 'I25791', 'I25798', 'I25799', 'I258', 'I2581', 'I25810', 'I25811', 'I25812', 'I2582', 'I2583', 'I2584', 'I2589', 'I259', 'I42', 'I420', 'I421', 'I422', 'I423', 'I424', 'I425', 'I426', 'I427', 'I428', 'I429', 'I43', 'I50', 'I501', 'I502', 'I5020', 'I5021', 'I5022', 'I5023', 'I503', 'I5030', 'I5031', 'I5032', 'I5033', 'I504', 'I5040', 'I5041', 'I5042', 'I5043', 'I508', 'I5081', 'I50810', 'I50811', 'I50812', 'I50813', 'I50814', 'I5082', 'I5083', 'I5084', 'I5089', 'I509')
then 1 else 0 end) as Heart_condition,

(Case when  icd_code in ('B20', 'B9735', 'R75', 'Z21') 
 then 1 else 0 end) as HIV_AIDS,

(Case When  icd_code in ('F3130', 'F3131', 'F3132', 'F314', 'F315', 'F3160', 
                         'F3161', 'F3162', 'F3163', 'F3164', 'F3175', 'F3176', 
                         'F3177', 'F3178', 'F3181', 'F320', 'F321', 'F322', 
                         'F323', 'F324', 'F325', 'F329', 'F330', 'F331', 'F332', 
                         'F333', 'F3340', 'F3341', 'F3342', 'F338', 'F339', 
                         'F341', 'F4321', 'F4323', 'F320', 'F321', 'F322', 
                         'F323', 'F324', 'F325', 'F3289', 'F329', 'F330', 'F331', 
                         'F332', 'F333', 'F3340', 'F3341', 'F3342', 'F338', 
                         'F339', 'F341', 'F200', 'F201', 'F202', 'F203', 
                         'F205', 'F2081', 'F2089', 'F209', 'F250', 'F251', 'F258', 
                         'F259', 'F060', 'F062', 'F200', 'F201', 'F202', 
                         'F203', 'F205', 'F2081', 'F2089', 'F209', 'F21', 'F22', 'F23', 
                         'F24', 'F250', 'F251', 'F258', 'F259', 'F28', 'F29', 'F323', 
                         'F333', 'F4489', 'F4310', 'F4311', 'F4312') 
 then 1 else 0 end) as MentalHealth_Dis,

(Case when  icd_code in ('F0150', 'F0151', 'F0280', 'F0281', 'F0390', 'F0391', 'F04', 
                         'G138', 'F05', 'F061', 'F068', 'G300', 'G301', 'G308', 'G309', 
                         'G311', 'G312', 'G3101', 'G3109', 'G94', 'R4181', 'R54') 
 then 1 else 0 end) as Dementia,

(Case when icd_code in ('F01', 'F015', 'F0150', 'F0151', 'F02', 'F028', 'F0280', 'F0281', 'F03', 'F039', 'F0390', 'F0391', 'G30', 'G300', 'G301', 'G308', 'G309')
then 1 else 0 end) as Neuro_Cond,

(Case When  icd_code in ('E663', 'Z6826', 'Z6827', 'Z6828', 'Z6829') then 1 else 0 end) as Overweight,

(Case When icd_code in ('E6601', 'E6609', 'E661', 'E662', 'E668', 'E669', 'Z6830', 
                        'Z6831', 'Z6832', 'Z6833', 'Z6834', 'Z6835', 'Z6836', 'Z6837', 
                        'Z6838', 'Z6839', 'Z6841', 'Z6842', 'Z6843', 'Z6844', 'Z6845') 
 then 1 else 0 end) as Obesity,

(Case when icd_code in ('B20', 'D80', 'D800', 'D801', 'D802', 'D803', 'D804', 'D805', 'D806', 'D807', 'D808', 'D809', 'D81', 'D810', 'D811', 'D812', 'D813', 'D8130', 'D8131', 'D8132', 'D8139', 'D814', 'D815', 'D816', 'D817', 'D818', 'D8181', 'D81810', 'D81818', 'D81819', 'D8189', 'D819', 'D82', 'D820', 'D821', 'D822', 'D823', 'D824', 'D828', 'D829', 'D83', 'D830', 'D831', 'D832', 'D838', 'D839', 'D84', 'D840', 'D841', 'D848', 'D8481', 'D8482', 'D84821', 'D84822', 'D8489', 'D849', 'D86', 'D860', 'D861', 'D862', 'D863', 'D868', 'D8681', 'D8682', 'D8683', 'D8684', 'D8685', 'D8686', 'D8687', 'D8689', 'D869', 'D89', 'D890', 'D891', 'D892', 'D893', 'D894', 'D8940', 'D8941', 'D8942', 'D8943', 'D8949', 'D898', 'D8981', 'D89810', 'D89811', 'D89812', 'D89813', 'D8982', 'D8983', 'D89831', 'D89832', 'D89833', 'D89834', 'D89835', 'D89839', 'D8989', 'D899', 'Z9225', 'Z9481', 'Z9484 ', 'Z7952')
then 1 else 0 end) as  Primary_Immuno,

(Case when icd_code in ('Z94', 'Z940', 'Z941', 'Z942', 'Z943', 'Z944', 'Z945', 'Z946', 'Z947', 'Z948', 'Z9481', 'Z9482', 'Z9483', 'Z9484', 'Z9489', 'Z949')
then 1 else 0 end) as Immun_Comp_SolidOrgan,

(Case when icd_code in ('Z331', 'Z333', 'Z34', 'Z340', 'Z3400', 'Z3401', 'Z3402', 'Z3403', 'Z348', 'Z3480', 'Z3481', 'Z3482', 'Z3483', 'Z349', 'Z3490', 'Z3491', 'Z3492', 'Z3493', 'O09', 'O090', 'O0900', 'O0901', 'O0902', 'O0903', 'O091', 'O0910', 'O0911', 'O0912', 'O0913', 'O09A', 'O09A0', 'O09A1', 'O09A2', 'O09A3', 'O092', 'O0921', 'O09211', 'O09212', 'O09213', 'O09219', 'O0929', 'O09291', 'O09292', 'O09293', 'O09299', 'O093', 'O0930', 'O0931', 'O0932', 'O0933', 'O094', 'O0941', 'O0942', 'O0943', 'O095', 'O0951', 'O09511', 'O09512', 'O09513', 'O09519', 'O0952', 'O09521', 'O09522', 'O09523', 'O09529', 'O096', 'O0961', 'O09611', 'O09612', 'O09613', 'O09619', 'O0962', 'O09621', 'O09622', 'O09623', 'O09629', 'O097', 'O0970', 'O0971', 'O0972', 'O0973', 'O098', 'O0981', 'O09811', 'O09812', 'O09813', 'O09819', 'O0982', 'O09821', 'O09822', 'O09823', 'O09829', 'O0989', 'O09891', 'O09892', 'O09893', 'O09899', 'O099', 'O0990', 'O0991', 'O0992', 'O0993')
then 1 else 0 end) as Pregnancy,

(Case when icd_code in ('Z94', 'Z940', 'Z941', 'Z942', 'Z943', 'Z944', 'Z945', 'Z946', 'Z947', 'Z948', 'Z9481', 'Z9482', 'Z9483', 'Z9484', 'Z9489', 'Z949', 'T86x') 
then 1 else 0 end) as Transplantation,


(Case when icd_code in ('Z111', 'Z227', 'Z8615', 'Z117')
then 1 else 0 end) as Tuberculosis,

(Case when icd_code in ('A021','A021','A227','A227','A267','A267','A327','A327','A400','A400','A401','A401','A403','A403','A408','A408','A409','A409','A4101','A4101','A4102','A4102','A411','A411','A412','A412','A413','A413','A414','A414','A4150','A4150','A4151','A4151','A4152','A4152','A4153','A4153','A4159','A4159','A4181','A4181','A4189','A4189','A419','A419','A427','A427','A5486','A5486','B377','B377','O0337','O0337','O0387','O0387','O0487','O0487','O0737','O0737','O0882','O0882','O85','O85','O8604','O8604','P360','P360','P360','P3610','P3610','P3610','P3619','P3619','P3619','P362','P362','P362','P3630','P3630','P3630','P3639','P3639','P3639','P364','P364','P364','P365','P365','P365','P368','P368','P368','P369','P369','P369','R6520','R6521','R6521','T8144XA','T8144XA','T8144XD','T8144XS') 
then 1 else 0 end) as Sepsis,

(Case when icd_code in ('A0103','A0103','A0222','A0222','A3700','A3701','A3701','A3710','A3711','A3711','A3780','A3781','A3781','A3790','A3791','A3791','A403','A403','A5004','A5004','A5004','A5484','A5484','B012','B012','B052','B052','B0681','B0681','B7781','B7781','B953','B960','B961','J09X1','J09X1','J1000','J1000','J1001','J1001','J1008','J1008','J1100','J1100','J1108','J1108','J120','J120','J121','J121','J122','J122','J123','J123','J1281','J1281','J1282','J1282','J1289','J1289','J129','J129','J13','J13','J14','J14','J150','J150','J151','J151','J1520','J1520','J15211','J15211','J15212','J15212','J1529','J1529','J153','J153','J154','J154','J155','J155','J156','J156','J157','J157','J158','J158','J159','J159','J160','J160','J168','J17','J180','J181','J182','J188','J189','J200','J200','J8281','J8282','J84111','J84116','J84117','J842','J851','J852','J95851','J95851','P230','P230','P230','P231','P231','P231','P232','P232','P232','P233','P233','P233','P234','P234','P234','P235','P235','P235','P236','P236','P236','P238','P238','P238','P239','P239','Z8701')
 then 1 else 0 end) as Pneumonia,

(Case when icd_code in ('J95821','J95821','J95822','J95822','J9600','J9601','J9602','J9620','J9621','J9622')
 then 1 else 0 end) as acRespFail,

(Case when icd_code in ('I0981','I0981','I110','I110','I119','I130','I130','I130','I1310','I1310','I1311','I1311','I132','I132','I132','I5020','I5021','I5022','I5023','I5030','I5031','I5032','I5033','I5040','I5041','I5042','I5043','I50810','I50811','I50812','I50813','I50814','I5082','I5083','I5084','I5089','I509','I97130','I97130','I97131','I97131','T8622','T8632')
 then 1 else 0 end) as HeartFail,

(Case when icd_code in ('N170','N171','N172','N178','N179','N990','N990','O904','O904') 
then 1 else 0 end) as acKidneyFail,

(Case when icd_code='I499' 
 then 1 else 0 end) as Arrhythmia,

(Case when icd_code in ('I2101','I2102','I2109','I2111','I2119','I2121','I2129','I213','I214','I219','I21A1','I21A9','I220','I221','I222','I228','I229','I230','I231','I232','I233','I234','I235','I236','I238','I240','I252') 
then 1 else 0 end) as Myocardial_acCS,

(Case when icd_code in ('I2601','I2609','I2690','I2693','I2694','I2699','I2782','Z86711')
 then 1 else 0 end) as PulmonaryEmb,

(Case when icd_code in ('G43601','G43609','G43611','G43619','I6300','I63011','I63012','I63013','I63019','I6302','I63031','I63032','I63033','I63039','I6309','I6310','I63111','I63112','I63113','I63119','I6312','I63131','I63132','I63133','I63139','I6319','I6320','I63211','I63212','I63213','I63219','I6322','I63231','I63232','I63233','I63239','I6329','I6330','I63311','I63312','I63313','I63319','I63321','I63322','I63323','I63329','I63331','I63332','I63333','I63339','I63341','I63342','I63343','I63349','I6339','I6340','I63411','I63412','I63413','I63419','I63421','I63422','I63423','I63429','I63431','I63432','I63433','I63439','I63441','I63442','I63443','I63449','I6349','I6350','I63511','I63512','I63513','I63519','I63521','I63522','I63523','I63529','I63531','I63532','I63533','I63539','I63541','I63542','I63543','I63549','I6359','I636','I638','I6381','I6389','I639','I6930','I6931','I69310','I69311','I69312','I69313','I69314','I69315','I69318','I69319','I69320','I69321','I69322','I69323','I69328','I69331','I69332','I69333','I69334','I69339','I69341','I69342','I69343','I69344','I69349','I69351','I69352','I69353','I69354','I69359','I69361','I69362','I69363','I69364','I69365','I69369','I69390','I69391','I69392','I69393','I69398','G458','G459','Z8673')
 then 1 else 0 end) as IschemicStroke, 


# COMMAND ----------

med_cpts = spark.sql("""
select distinct pat_key, 
a.cpt_code, 
cpt_desc
from patcpt a
left JOIN cptcode b
on a.cpt_code = a.cpt_code
where upper(cpt_desc) like '%REMDESIVIR%' 
""")  #same as cpt_all_desc?

med_stdchg = spark.sql("""
select distinct 
std_chg_code, 
std_chg_desc
from chgmstr
where upper(std_chg_desc) like '%REMDESIVIR%' 
""")  

med_hospchg = spark.sql("""
select distinct hosp_chg_id, 
hosp_chg_desc
from hospchg
where upper(hosp_chg_desc) like '%REMDESIVIR%' 
""")

med_proc_icd=spark.sql("""
select pat_key, icd_code 
from paticd_proc  --assuming its the same as proc_all table;
where icd_code in ('XW033E5','XW043E5')
""")

med_cpts.createOrReplaceTempView('med_cpts')
med_stdchg.createOrReplaceTempView('med_stdchg')
med_hospchg.createOrReplaceTempView('med_hospchg')

# COMMAND ----------

patmeds = spark.sql("""
with patb as (
    select distinct pat_key, 
    std_chg_code, hosp_chg_id, 
    concat(year, quarter) drug_date
    from patbill left semi join 
    
    (select * from patdemo 
     where (pat_type = 8) and (I_O_IND="I") and 
     (adm_mon > 2020103)
    )
    
    patdemo on patbill.pat_key=patdemo.pat_key 
),
meds as (
    select distinct d1.pat_key, d1.drug_bucket, d1.drug_date
    from
    (
        select patb.pat_key, 
        (case 
            when (upper(cpt_desc) like '%REMDESIVIR%') 
            then 1 else 0 end) as drug_bucket, 
            drug_date
        from patb left join med_cpts on med_cpts.pat_key=patb.pat_key 
        
        union 
    
        select patb.pat_key, 
        (case 
             when (upper(std_chg_desc) like '%REMDESIVIR%') 
             then 1 else 0 end) as drug_bucket, 
             drug_date
        from patb left join med_stdchg on med_stdchg.std_chg_code=patb.std_chg_code
   	
        union

        select patb.pat_key, 
        (case
             when (upper(hosp_chg_desc) like '%REMDESIVIR%')
             then 1 else 0 end) as drug_bucket, 
             drug_date
        from patb left join med_hospchg on med_hospchg.hosp_chg_id=patb.hosp_chg_id	

        union
	
        select patb.pat_key, 
        (case
             when (icd_code in ('XW033E5','XW043E5')) 
             then 1 else 0 end) as drug_bucket, 
             drug_date
             from patb left join paticd_proc on paticd_proc.pat_key=patb.pat_key
    ) d1
)
select distinct pat_key, drug_bucket, drug_date
from meds 
""")


print(patmeds.distinct().count())

# patmeds = spark.sql("""
# with drugs as (
#     select patbill.pat_key, 
#     (case
#         when (
#             upper(std_chg_desc) like '%REMDESIVIR%' 
#             or upper(hosp_chg_desc) like '%REMDESIVIR%' 
#             or upper(cpt_desc) like '%REMDESIVIR%' 
#             ) then 'REMDESIVIR'
#       end) as drug_bucket,

#     concat(year, quarter) drug_date 
#     from patbill
#     left join med_hospchg on med_hospchg.hosp_chg_id = patbill.hosp_chg_id
#     left join med_stdchg on med_stdchg.std_chg_code = patbill.std_chg_code
#     left join med_cpts on med_cpts.pat_key = patbill.pat_key
#     where 
#     (
#         patbill.hosp_chg_id in (select hosp_chg_id from med_hospchg) 
#         or patbill.std_chg_code in (select std_chg_code from med_stdchg)
#     )
# )
# select * from drugs 
# where (drug_bucket is not null)
# """)

# print(patmeds.distinct().count())

# # patmeds.createOrReplaceTempView('patmeds')


# COMMAND ----------

def covid_cohort(diagnosis=True,labs=False, loinc=False):
    """create covid cohort based on diagnosis codes"""
    windowDept=W.Window.partitionBy("MEDREC_KEY","PAT_KEY").orderBy(F.col("ADM_MON"),F.col("DISC_MON"),F.col("DISC_MON_SEQ"))
    
    #cov_codes = ['U07.1', 'U07.2', 'J12.82', 'B972', 'B97.2', 'B9721', 'B97.21', 'B9729', 'B97.29']
    
    diag_cohort=(
        icd_code.select("PAT_KEY","ICD_PRI_SEC","ICD_CODE")
        .join(patdemo, "PAT_KEY", "inner")
        .join(patmeds, "pat_key","left")
        .filter("ICD_CODE=='U07.1'" ) 
        #.filter(F.col('ICD_PRI_SEC') in ('P','S')) 
        .filter("ICD_PRI_SEC in ('P','S')" )
        .withColumnRenamed("COVID_PAT_KEY","PAT_KEY")
        .withColumn("Type",F.lit("DX"))
        .withColumn("took_rem", F.when(col("drug_bucket") == 'REMDESIVIR', 1).otherwise(0))

    )
    """Get one row per encounter"""
    diag_cohort=diag_cohort.withColumn("RN",F.row_number().over(windowDept)).filter(F.col("RN")==1)
    
    """create covid cohort based on lab codes"""
    labs_cohort=(
        patlabres
        .select("PAT_KEY","TEST","OBSERVATION")
        .join(patdemo,"PAT_KEY","inner")
        .join(patmeds, "pat_key","left")
        .filter("TEST in ('SARS coronavirus 2 RNA:PrThr:Pt:Respiratory:Ord:Probe.amp.tar','SARS coronavirus 2 RNA:PrThr:Pt:XXX:Ord:Probe.amp.tar')")
        .filter("observation='positive'")
        .withColumnRenamed("COVID_PAT_KEY","PAT_KEY")
        .withColumn("Type",F.lit("LAB"))
        .withColumn("took_rem", F.when(col("drug_bucket") == 'REMDESIVIR', 1).otherwise(0))

    )
    
    """Get one row per encounter"""
    labs_cohort=labs_cohort.withColumn("RN",F.row_number().over(windowDept)).filter(F.col("RN")==1)
    
    """create covid cohort based on loinc code """
    loinc_cohort=(
        genlab
        .select("PAT_KEY","LAB_TEST_LOINC_CODE","LAB_TEST_RESULT")
        .join(patdemo,"PAT_KEY","inner")
        .join(patmeds, "pat_key","left")
        .filter("lab_test_loinc_code in ('94500-6','94845-5', '94534-5', '94756-4', '94757-2', '94559-2', '94533-7', '94502-2', '92142-9', '92141-1', '94309-2', '94307-6', '94308-4', '68993-5', '95406-5', '95409-9', '96091-4', '95425-5', '94758-0', '95423-0', '96448-6')")
        .filter("lab_test_result='Detected'")
        .withColumnRenamed("COVID_PAT_KEY","PAT_KEY")
        .withColumn("Type",F.lit("LOINC"))
        .withColumn("took_rem", F.when(col("drug_bucket") == 'REMDESIVIR', 1).otherwise(0))
    )
    
    """Get one row per encounter"""
    loinc_cohort=loinc_cohort.withColumn("RN",F.row_number().over(windowDept)).filter(F.col("RN")==1)
    cohort_cols = diag_cohort.columns
    
    if (diagnosis==True) and ((labs==False) and (loinc==False)) :
        final= diag_cohort
    elif (labs==True) and ((diagnosis)==False and (loinc==False)):
        final=labs_cohort
#     elif (loinc==True) and ((labs)==True and (diagnosis==False)):
#         final=labs_cohort.union(loinc_cohort)
    else:
        final= diag_cohort.union(labs_cohort).union(loinc_cohort)
        final=final.withColumn("RN",F.row_number().over(windowDept)).filter( (F.col("RN")==1))
    return final

def first_covid_cohort(diagnosis=True,labs=False, loinc=False):
    """read in function that defines covid cohort and reduce to only the 1st encounter per medrec key"""
    all_covid=covid_cohort(diagnosis=True, labs=False, loinc=False)
    
    windowDept=W.Window.partitionBy("MEDREC_KEY").orderBy(F.col("ADM_MON"),F.col("DISC_MON"),F.col("DISC_MON_SEQ"))
    first=(
        all_covid
        .withColumn("RN",F.row_number().over(windowDept))
        .filter((F.col("RN")==1))
    )
    return first 


# COMMAND ----------

# """ 1st, 2nd, 3rd criteria for dying for/of COVID We can set up condition columns then in join condition on or conditions using the below """

# cov_withfor = spark.sql("""

# select 
#      PAT_KEY,
#      ICD_VERSION,
#      ICD_CODE,
#      ICD_PRI_SEC,
#      ICD_POA,
#      year as year_icd,

#   (case
#     when (icd_code in ('U07.1'))
# --     and 
# --     (
# --       adm_mon IN (2020204, 2020205, 2020206, 2020307, 2020308, 2020309, 
# --                   2020410, 2020411, 2020412, 2021101, 2021102, 2021103, 
# --                   2021204, 2021205, 2021206, 2021307, 2021308, 2021309, 
# --                   2021410, 2021411, 2021412, 2022101, 2022102)
# --     ) 
# --     --or (A41.89, A41.9, R65.2%,, J96.00, J96.01, J96.02, J96.20, J96.21, J96.22, J80, R06.03, R06.9, R09.2, J12%, J18%, I27.82, I26%. %)
#     and (icd_pri_sec in ('P', 'S')) then 1
#     else 0
#   end) as covid_of,        -- dying from or of covid
#   (case
#     when (icd_code in ('U07.1'))
# --     and (
# --       adm_mon IN (2020204, 2020205, 2020206, 2020307, 2020308, 2020309, 
# --                   2020410, 2020411, 2020412, 2021101, 2021102, 2021103, 
# --                   2021204, 2021205, 2021206, 2021307, 2021308, 2021309, 
# --                   2021410, 2021411, 2021412, 2022101, 2022102)
# --     )
#     and (icd_pri_sec in ('A')) then 1
#     else 0
#   end) as covid_a,
#   (case
#     when (icd_code not in ('U07.1', ''))
# --     and ( adm_mon > 2020204 )
#     and (icd_pri_sec in ('A')) then 1
#     else 0
#   end) as noncovid_a,
#   (case
#     when (icd_code in ('U07.1'))
# --     and ( adm_mon > 2020204)
#     and (icd_pri_sec in ('P')) then 1
#     else 0
#   end) as covid_p,
#   (case
#     when (icd_code in ('U07.1'))
# --     and ( adm_mon > 2020204)
#     and (icd_pri_sec in ('S')) then 1
#     else 0
#   end) as covid_s, 
#   --Criteria 2 
#   (case
#   when (
#     icd_code in ('A41.89', 'A41.9')
#     or (icd_code like 'R65.2%')
#   )
#   and (icd_pri_sec in ('P')) then 1
#   else 0
#  end) as sept,
#  (case
#    when icd_code in ('J96.00', 'J96.01', 'J96.02', 'J96.20', 'J96.21', 
#                      'J96.22', 'J80', 'R06.03', 'R06.9', 'R09.2')
#    and (icd_pri_sec in ('P')) then 1
#    else 0
#  end) as arf,
#  (case
#    when (
#      (icd_code like 'J12%')
#      or (icd_code like 'J18%')
#    )
#    and (icd_pri_sec in ('P')) then 1
#    else 0
#  end) as pneu,
#  (case
#    when (
#      (icd_code in ('I27.82'))
#      or (icd_code like 'I26%')
#    )
#    and (icd_pri_sec in ('P')) then 1
#    else 0
#  end) as pul_emb,
# -- Criteria 3 will be below - is taking Remdesivir but COV not a primary CoD -- see chat for other notes on this
# (case when (icd_code = 'XW033E5') then 1 else 0 end) as rem_patient


# FROM paticd_diag

# """)


# COVID-19 Mortality

# COMMAND ----------

# MAGIC %md
# MAGIC ## Date
# MAGIC 04-28-2022

# COMMAND ----------

# MAGIC %md 
# MAGIC
# MAGIC ## Contact Information
# MAGIC *Who to contact for questions about this notebook?*
# MAGIC
# MAGIC <br>
# MAGIC
# MAGIC - Author: Heartley Egwuogu, Kira Gurganus, Jon Starnes
# MAGIC - Email:  [tog0@cdc.gov](), [soj3@cdc.gov](), [tmk0@cdc.gov]() <!--- enter your email address in both the square brackets and the parens -->

# COMMAND ----------

# MAGIC %md
# MAGIC ## Notebook Configuration

# COMMAND ----------

#%run /CDH/Analytics/Premier/Projects/cdh-premier-core/tmk0_2022-04-28_premier_COVID-19_Mortality/includes/Create_Covid_Cohort_mort
#%run ./Create_Covid_Cohort_mort

# COMMAND ----------

# MAGIC %md 
# MAGIC ## Purpose
# MAGIC * Gap: Need for improved visibility on mortality
# MAGIC * Request: Evaluate newer healthcare datasets to determine ability to describe characteristics of persons dying of COVID-19 
# MAGIC <br>
# MAGIC Inclusion criteria:
# MAGIC <br>
# MAGIC * All persons who died who have COVID-19 diagnosis at the encounter of death 
# MAGIC
# MAGIC Time frame? 
# MAGIC <br>
# MAGIC * Consider variant waves:  
# MAGIC   - 
# MAGIC   - Delta: July 2021 – November 2021 
# MAGIC   - Omicron: January 2022 – February 2022 

# COMMAND ----------

# MAGIC %md 
# MAGIC ## Collect Data
# MAGIC *What data do I need? From where?*

# COMMAND ----------

spark.conf.set('spark.databricks.adaptive.autoOptimizeShuffle.enabled', True)

# COMMAND ----------

from pyspark.sql import SQLContext 
sqlContext = SQLContext(sc)

# Maximize Pandas output text width.
#import pandas as pd
#pd.set_option('display.max_colwidth', 200)

#ready for advanced plotting
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

#import pyspark sql functions with alias
import pyspark.sql.functions as F
import pyspark.sql.window as W

#import specific functions from pyspark sql types
from pyspark.sql.types import StructType, StructField, StringType, IntegerType, ArrayType
from functools import reduce
from operator import add # added by JS

#import specific functions from pyspark sql types
from pyspark.sql.functions import col, concat, lit, to_date, date_format 
import pyspark.sql.functions as F
from pyspark.sql.functions import when, lag, concat, lit, date_add, date_sub, col
from pyspark.sql.window import Window
import pandas as pd
import numpy as np

# COMMAND ----------

icd_desc=spark.read.table("edav_prd_cdh.cdh_premier_v2.icdcode")
#icd_code=spark.read.table("edav_prd_cdh.cdh_premier_v2.paticd_diag") -- imported above with includes
# Main tables 
patdemo=spark.read.table("edav_prd_cdh.cdh_premier_v2.patdemo")
patlabres=spark.read.table("edav_prd_cdh.cdh_premier_v2.lab_res") # used for create covid cohort - lab results (covid-19)
genlab=spark.read.table("edav_prd_cdh.cdh_premier_v2.genlab") # used for create covid cohort
paticd_proc=spark.read.table("edav_prd_cdh.cdh_premier_v2.paticd_proc") # procedure codes
censusdiv=spark.read.table("edav_prd_cdh.cdh_premier_v2.pattype")
provider_df=spark.read.table("edav_prd_cdh.cdh_premier_v2.providers")
# Secondary tables 
disstat=spark.read.table("edav_prd_cdh.cdh_premier_v2.disstat") # lookup table for discharge status 
pattype=spark.read.table("edav_prd_cdh.cdh_premier_v2.pattype") # patient type settings 
patcpt=spark.read.table("edav_prd_cdh.cdh_premier_v2.patcpt") # HCPCs codes

chargemaster = spark.read.table("edav_prd_cdh.cdh_premier_v2.chgmstr")
hospcharge = spark.read.table("edav_prd_cdh.cdh_premier_v2.hospchg")
patcpt = spark.read.table("edav_prd_cdh.cdh_premier_v2.patcpt")
cpt_lookup = spark.read.table("edav_prd_cdh.cdh_premier_v2.cptcode")
patbill = spark.read.table("edav_prd_cdh.cdh_premier_v2.patbill")

patcpt.createOrReplaceTempView("patcpt")
patbill.createOrReplaceTempView("patbill")
chargemaster.createOrReplaceTempView("chargemaster")
hospcharge.createOrReplaceTempView("hospcharge")
cpt_lookup.createOrReplaceTempView("cpt_lookup")

# COMMAND ----------

# MAGIC %md
# MAGIC ### Load COVID-19 cohort 

# COMMAND ----------

display(patmeds)

# COMMAND ----------

# Use the uncommented options for the mortality analysis - the first cohort is for single person centered counts  
covid_pop=covid_cohort(diagnosis=True, labs=True, loinc=False) # Diagnosis and labs 
#covid_pop_all = covid_cohort(diagnosis=True, labs=True, loinc=True) # all 


# COMMAND ----------

# Add columns for string dates (for LOS later), agecat, inpatient, covid and deaths sums 
windowDept=W.Window.partitionBy(['MEDREC_KEY','PAT_KEY']).orderBy(F.col("ADM_MON"),F.col("DISC_MON"),F.col("DISC_MON_SEQ"))
 
covid_pop = (covid_pop.filter( (col('DISC_MON') > 2020204) )  # & (col('DISC_MON') < 2022204 )
                      .withColumn('Adm_month', 
                                     to_date(
                                         concat(F.substring(col('ADM_MON'),1,4),
                                                lit("-"), F.substring(col('ADM_MON'),6,7)
                                               ), 'yyyy-MM')
                                     )
                      .withColumn('Adm_month', date_format('Adm_month', 'yyyy-MM'))
                      .withColumn('Disc_month', 
                                     to_date(
                                         concat(F.substring(col('DISC_MON'),1,4),
                                                lit("-"), F.substring(col('DISC_MON'),6,7)
                                               ), 'yyyy-MM')
                                     )
                      .withColumn('Disc_month', date_format('Disc_month', 'yyyy-MM'))
                      .withColumn("agecat", 
                                F.when(col('age') < 0, "unknown")
                                    .when(col('age') < 5, "0-04")
                                    .when(col('age') < 12, "05-11")
                                    .when(col('age') < 18, "12-17")
                                    .when(col('age') < 30, "18-29")
                                    .when(col('age') < 40, "30-39")
                                    .when(col('age') < 50, "40-49")
                                    .when(col('age') < 65, "50-64")
                                    .when(col('age') < 75, "65-74")
                                    .when(col('age') >= 75, "75+")
                                .otherwise("unknown"))
                      .withColumn("COV_Wave", 
                            F.when( ( (F.col("ADM_MON") > 2021206) & (F.col("ADM_MON") < 2021412) ) # Delta July 2021 through Nov 2021  
                                      , "Delta") # add dates in legends or footnotes?
                                .when( ( (F.col("ADM_MON") > 2021412) & (F.col("ADM_MON") < 2022103) ) # Omicron > Jan 2022 < March 2022 or less than 4/2022?  
                                     , "Omicron")
                                .otherwise("Period Other"))
                      .withColumn(
                            "COVID_FLAG",
                                F.when( col('Type').isin(['DX', 'LAB'])
                                       , 1).otherwise(0))
                      .withColumn('Deaths_Total', 
                                 F.when( (col('disc_status').isin(20,40,41,42)) 
                                        , 1).otherwise(0))
                      .sort(['MEDREC_KEY', 'Deaths_Total'], ascending=[True, False])
                      .withColumn("RN",F.row_number().over(windowDept))
                                   .filter((col("RN")==1)) # & (col('DISC_MON') > 2020204) & (col('DISC_MON') < 2022204 )
            )
 
# replace with covid_pop.columns later
pop_cols=['PAT_KEY', 'ICD_PRI_SEC', 'ICD_CODE', 'MEDREC_KEY', 'DISC_MON', 'DISC_MON_SEQ', 'ADM_MON', 'PROV_ID', 
          'I_O_IND', 'PAT_TYPE', 'DISC_STATUS', 'MART_STATUS', 'AGE', 'GENDER', 'RACE', 'HISPANIC_IND', 'LOS', 
          'year', 'quarter', 'Type', 'Adm_month', 'Disc_month', 'agecat', 'COV_Wave', 'COVID_FLAG', 'Deaths_Total', 'Type',
          'MS_DRG', 'MS_DRG_MDC', 'ADM_SOURCE', 'POINT_OF_ORIGIN', 'ADM_TYPE',  
          'ADMPHY_SPEC', 'ADM_PHY', 'ATTPHY_SPEC', 'ATT_PHY', 'STD_PAYOR', 'PROJ_WGT', 'PAT_CHARGES', 
          'PAT_COST', 'PAT_FIX_COST', 'PAT_VAR_COST', 'PUBLISH_TYPE', 'Cancer1', 'Cancer2', 'Down_Syndrome', 
          'Heart_condition', 'Immun_Comp_Solid_Organ', 'Overweight', 'Obesity', 'Pregnancy', 
          'Cerebrovascular_Disease', 'Immun_Comp_Other', 'Neuro_Cond', 'C_Kidney_Dis', 'COPD', 'Asthma', 
          'Diabetes', 'Hypertension', 'Cystic_Fibrosis_ODD', 'Drug_Use', 'HIV_AIDS', 'Liver_Dis_Hep', 'Sickle_cell', 'Tobacco_use']
 
underCond_cols = ['PAT_KEY', 'Cancer1', 'Cancer2', 'Down_Syndrome', 'Heart_condition', 'Immun_Comp_Solid_Organ', 'Overweight', 'Obesity', 'Pregnancy', 
                   'Cerebrovascular_Disease', 'Immun_Comp_Other', 'Neuro_Cond', 'C_Kidney_Dis', 'COPD', 'Asthma', 'Diabetes', 'Hypertension', 
                   'Cystic_Fibrosis_ODD', 'Drug_Use', 'HIV_AIDS', 'Liver_Dis_Hep', 'Sickle_cell', 'Tobacco_use']
 
 
covid_pop = (covid_pop.filter(col('disc_status').isin(20,40,41,42) )
                      .join(icd_code.select(underCond_cols), "PAT_KEY", "INNER")
                      .drop_duplicates(['MEDREC_KEY', 'PAT_KEY'])
            )
 
print("Total Population rows after filtering: " + str(covid_pop.count())) # 147397
 
covid_pop.createOrReplaceTempView("covid_pop_tab")
 
# Duplicates df 
covid_pop_dupes = spark.sql("""select distinct MEDREC_KEY, count(MEDREC_KEY) FROM covid_pop_tab GROUP BY MEDREC_KEY HAVING count(MEDREC_KEY) >1 """)
 
covid_pop = covid_pop.join(covid_pop_dupes, "MEDREC_KEY", how='leftanti')
 

# COMMAND ----------

# MAGIC %md 
# MAGIC ### Test cohort counts
# MAGIC Were duplicates removed? 
# MAGIC Did we miss any of the cohort ?

# COMMAND ----------

print("Total Population rows after filtering by death?: " + str(covid_pop.count()))

# COMMAND ----------

# MAGIC %md 
# MAGIC ## Methods 
# MAGIC
# MAGIC *Add methods steps as they are developed*
# MAGIC
# MAGIC ### Overall Ns
# MAGIC * N of Facilities (PROVIDERS or patdemo)
# MAGIC * N of deaths   (patdemo)
# MAGIC
# MAGIC Match the patient type codes in the patdemo table on:
# MAGIC
# MAGIC
# MAGIC #### Subgroup Tables: 
# MAGIC * patdemo 
# MAGIC   - Inpatient (pat_type)
# MAGIC   - ED (pat_type, label:'Emergency')
# MAGIC   - Hospice (pat_type)
# MAGIC   - Gender 
# MAGIC   - Age 
# MAGIC   - Marital Staus 
# MAGIC   - Race 
# MAGIC * Providers
# MAGIC   - Census Division  
# MAGIC * *Vax Status - Where to find?
# MAGIC * *Prior Infection - Where to find? diagnosis paticd_diag (medication) 
# MAGIC * icd_code
# MAGIC   - Underlying Conditions 
# MAGIC * Do not resuscitate (icd_code == Z66)
# MAGIC * Severity at presentation (code to work on)
# MAGIC * Severity scale 
# MAGIC * ICU Admissions (admit_type)
# MAGIC * Treatment Received (procedure code) 
# MAGIC     -- Dexamethasone
# MAGIC     --  Remdesivir
# MAGIC     --  Baricitinib
# MAGIC     --  Tofacitinib
# MAGIC     --  Tocilizumab
# MAGIC     --  Sarilumab
# MAGIC     --  Supplemental oxygen
# MAGIC     --  Non-invasive ventilation (CPAP / BIPAP)
# MAGIC     --  IMV
# MAGIC
# MAGIC * Length of Stay mean/median (DISC_MON - ADM_MON?) 

# COMMAND ----------

## Set table data for Overall Facilities and Deaths
covid_pop.createOrReplaceTempView("covid_pop_tab")
## Set table data for icd_codes 
icd_code.createOrReplaceTempView("icd_code_tab")
# Lookup table
icd_desc.createOrReplaceTempView("icd_lookup_tab")
# Labs
patlabres.createOrReplaceTempView("labresults_tab") # used for create covid cohort - lab results (covid-19)
genlab.createOrReplaceTempView("genlab_tab") # used for create covid cohort
paticd_proc.createOrReplaceTempView("procedure_tab") # procedure codes
# Provider info
censusdiv.createOrReplaceTempView("censusdiv_tab")
provider_df.createOrReplaceTempView("provider_tab")
# Secondary tables 
disstat.createOrReplaceTempView("disstat_tab") # lookup table for discharge status 
pattype.createOrReplaceTempView("pattype_tab") # patient type settings 
patcpt.createOrReplaceTempView("patcodes_tab") # HCPCs codes

# COMMAND ----------

# MAGIC %md 
# MAGIC ## Lookup Columns for covid_pop and icd_table

# COMMAND ----------

# MAGIC %sql
# MAGIC -- # Visually inspect that the data loaded correctly
# MAGIC --print('covid population')
# MAGIC --display(covid_popD.limit(10))
# MAGIC
# MAGIC select * 
# MAGIC FROM covid_pop_tab
# MAGIC LIMIT 10; 

# COMMAND ----------

# MAGIC %sql
# MAGIC --print('ICD_CODES')
# MAGIC --display(icd_code.limit(5))
# MAGIC
# MAGIC select * 
# MAGIC FROM icd_code_tab
# MAGIC LIMIT 5; 

# COMMAND ----------

# MAGIC %md
# MAGIC
# MAGIC ### prior infection

# COMMAND ----------



# COMMAND ----------

# MAGIC %md
# MAGIC
# MAGIC ### vax status

# COMMAND ----------

# MAGIC %md
# MAGIC
# MAGIC ### len of icu adm (imv)

# COMMAND ----------

# MAGIC %md
# MAGIC
# MAGIC ### length IMV

# COMMAND ----------

# MAGIC %md
# MAGIC
# MAGIC ### other diagnoses at time of death

# COMMAND ----------

Sepsis/shock
Pneumonia
Acute Respiratory Failure
Heart Failure
Acute kidney injury/failure
Arrhythmia
Myocardial infarction/acute coronary syndrome
Pulmonary embolism
Ischemic stroke

# COMMAND ----------

# MAGIC %md
# MAGIC
# MAGIC ## Overall Counts

# COMMAND ----------

# MAGIC %md 
# MAGIC ### Facilities N 

# COMMAND ----------

# MAGIC %sql 
# MAGIC SELECT 
# MAGIC   (
# MAGIC     case
# MAGIC       when PAT_TYPE = 8 then "Inpatient" 
# MAGIC       when PAT_TYPE = 28 then "Emergency"
# MAGIC       when PAT_TYPE = 25 then "Hospice"
# MAGIC       when PAT_TYPE = 10 then  "SNF"
# MAGIC       when PAT_TYPE = 22 then  "Long Term Care"
# MAGIC       when PAT_TYPE = 33 then "Home Health"
# MAGIC       else "Other"
# MAGIC     end
# MAGIC   ) as Patient_Setting,
# MAGIC   count(distinct PROV_ID)
# MAGIC FROM covid_pop_tab
# MAGIC WHERE (PAT_TYPE in (8,28,25, 10, 22, 33))
# MAGIC       and (DISC_MON > 2020204)
# MAGIC GROUP BY
# MAGIC     (
# MAGIC     case
# MAGIC       when PAT_TYPE = 8 then "Inpatient" 
# MAGIC       when PAT_TYPE = 28 then "Emergency"
# MAGIC       when PAT_TYPE = 25 then "Hospice"
# MAGIC       when PAT_TYPE = 10 then  "SNF"
# MAGIC       when PAT_TYPE = 22 then  "Long Term Care"
# MAGIC       when PAT_TYPE = 33 then "Home Health"
# MAGIC       else "Other" end)
# MAGIC ORDER BY
# MAGIC   Patient_Setting;

# COMMAND ----------

# MAGIC %md 
# MAGIC ### Death N 

# COMMAND ----------

# MAGIC %sql 
# MAGIC SELECT 
# MAGIC   (
# MAGIC     case
# MAGIC       when PAT_TYPE = 8 then "Inpatient" 
# MAGIC       when PAT_TYPE = 28 then "Emergency"
# MAGIC       when PAT_TYPE = 25 then "Hospice"
# MAGIC       when PAT_TYPE = 10 then  "SNF"
# MAGIC       when PAT_TYPE = 22 then  "Long Term Care"
# MAGIC       when PAT_TYPE = 33 then "Home Health"
# MAGIC       else "Other"
# MAGIC     end
# MAGIC   ) as Patient_Setting,
# MAGIC   sum(Deaths_Total) as Death_flags, 
# MAGIC   count(distinct MEDREC_KEY) as Pat_Count
# MAGIC FROM covid_pop_tab
# MAGIC WHERE (PAT_TYPE in (8,28,25, 10, 22, 33))
# MAGIC GROUP BY
# MAGIC     (
# MAGIC     case
# MAGIC       when PAT_TYPE = 8 then "Inpatient" 
# MAGIC       when PAT_TYPE = 28 then "Emergency"
# MAGIC       when PAT_TYPE = 25 then "Hospice"
# MAGIC       when PAT_TYPE = 10 then  "SNF"
# MAGIC       when PAT_TYPE = 22 then  "Long Term Care"
# MAGIC       when PAT_TYPE = 33 then "Home Health"
# MAGIC       else "Other" end);

# COMMAND ----------

# MAGIC %md
# MAGIC
# MAGIC #### Gender

# COMMAND ----------

# Gender 

# Total Inpatient cohort count by Gender 
patientSetting_N_Gen=(covid_pop.filter( #(F.col('DISC_MON') < 2022204 ) & 
                              (F.col('PAT_TYPE').isin([8,28,25,10, 22, 33])) )
                         .withColumn('Patient_Setting', 
                                    F.when( col('PAT_TYPE')==8, "Inpatient")
                                    .when( col('PAT_TYPE')==28, "Emergency")
                                    .when( col('PAT_TYPE')==25, "Hospice")
                                    .when( F.col('PAT_TYPE') == 10, "SNF")
                                    .when( F.col('PAT_TYPE') == 22, "Long Term Care")
                                    .when( F.col('PAT_TYPE') == 33, "Home Health")
                                .otherwise("Other"))
                        .groupBy("GENDER", "Patient_Setting")
                        .agg(F.countDistinct("MEDREC_KEY").alias("unique_patients"),
                             F.sum("Deaths_Total").alias("n_DeathFlags"))
                        .orderBy(F.col("Patient_Setting")))

display(patientSetting_N_Gen)


# COMMAND ----------

# MAGIC %md
# MAGIC
# MAGIC #### Age Group

# COMMAND ----------

# MAGIC %sql 
# MAGIC SELECT 
# MAGIC   agecat as Age_Group, 
# MAGIC   (
# MAGIC     case
# MAGIC       when PAT_TYPE = 8 then "Inpatient" 
# MAGIC       when PAT_TYPE = 28 then "Emergency"
# MAGIC       when PAT_TYPE = 25 then "Hospice"
# MAGIC       when PAT_TYPE = 10 then  "SNF"
# MAGIC       when PAT_TYPE = 22 then  "Long Term Care"
# MAGIC       when PAT_TYPE = 33 then "Home Health"
# MAGIC       else "Other"
# MAGIC     end
# MAGIC   ) as Patient_Setting,
# MAGIC   count(distinct MEDREC_KEY)
# MAGIC FROM covid_pop_tab
# MAGIC WHERE (PAT_TYPE in (8,28,25,10,22,33)) and 
# MAGIC       (DISC_MON > 2020204)
# MAGIC GROUP BY
# MAGIC   agecat, 
# MAGIC     (
# MAGIC     case
# MAGIC       when PAT_TYPE = 8 then "Inpatient" 
# MAGIC       when PAT_TYPE = 28 then "Emergency"
# MAGIC       when PAT_TYPE = 25 then "Hospice"
# MAGIC       when PAT_TYPE = 10 then  "SNF"
# MAGIC       when PAT_TYPE = 22 then  "Long Term Care"
# MAGIC       when PAT_TYPE = 33 then "Home Health"
# MAGIC       else "Other" end)
# MAGIC ORDER BY
# MAGIC   Patient_Setting, Age_Group; 

# COMMAND ----------

# MAGIC %md
# MAGIC
# MAGIC #### Marital Status

# COMMAND ----------

# MAGIC %sql 
# MAGIC SELECT 
# MAGIC   MART_STATUS as Marital_Status, 
# MAGIC   (
# MAGIC     case
# MAGIC       when PAT_TYPE = 8 then "Inpatient" 
# MAGIC       when PAT_TYPE = 28 then "Emergency"
# MAGIC       when PAT_TYPE = 25 then "Hospice"
# MAGIC       when PAT_TYPE = 10 then  "SNF"
# MAGIC       when PAT_TYPE = 22 then  "Long Term Care"
# MAGIC       when PAT_TYPE = 33 then "Home Health"
# MAGIC       else "Other"
# MAGIC     end
# MAGIC   ) as Patient_Setting,
# MAGIC   count(distinct MEDREC_KEY)
# MAGIC FROM covid_pop_tab
# MAGIC WHERE (PAT_TYPE in (8,28,25,10,22,33)) and 
# MAGIC       (DISC_MON > 2020204)
# MAGIC GROUP BY
# MAGIC   Marital_Status, 
# MAGIC     (
# MAGIC     case
# MAGIC       when PAT_TYPE = 8 then "Inpatient" 
# MAGIC       when PAT_TYPE = 28 then "Emergency"
# MAGIC       when PAT_TYPE = 25 then "Hospice"
# MAGIC       when PAT_TYPE = 10 then  "SNF"
# MAGIC       when PAT_TYPE = 22 then  "Long Term Care"
# MAGIC       when PAT_TYPE = 33 then "Home Health"
# MAGIC       else "Other" end)
# MAGIC ORDER BY
# MAGIC   Patient_Setting;

# COMMAND ----------

# MAGIC %md
# MAGIC
# MAGIC #### Race/Ethnicity

# COMMAND ----------

# Count combined Race+Ethnicity by Facility Type
covid_pop_Race = (covid_pop.filter("PAT_TYPE in (8,28,25,10,22,33)")
                              .withColumn('Race_Eth',
                                     F.when(F.col('HISPANIC_IND')=="Y", "Hispanic")
                                      .when((F.col('HISPANIC_IND')!="Y") & (F.col('RACE')=="W"), "NH_White")
                                      .when((F.col('HISPANIC_IND')!="Y") & (F.col('RACE')=="B"), "NH_Black")
                                      .when((F.col('HISPANIC_IND')!="Y") & (F.col('RACE')=="A"), "NH_Asian")
                                      .when((F.col('HISPANIC_IND')!="Y") & (F.col('RACE')=="O"), "Other")
                                      .when((F.col('HISPANIC_IND')!="Y") & (F.col('RACE')=="U"), "Unknown")
                                      .otherwise("NA"))
                              .withColumn('Facility',
                                     F.when(F.col('PAT_TYPE')==8, "Inpatient")
                                      .when(F.col('PAT_TYPE')==28, "Emergency")
                                      .when(F.col('PAT_TYPE')==25, "Hospice")
                                      .when(F.col('PAT_TYPE') == 10, "SNF")
                                      .when(F.col('PAT_TYPE') == 22, "Long Term Care")
                                      .when(F.col('PAT_TYPE') == 33, "Home Health")
                                      .otherwise("NA"))
                                    .groupBy("Facility","Race_Eth")
                                      .agg(F.countDistinct("MEDREC_KEY").alias("n_patients"))
                                    .orderBy(F.col("Facility"))
                 )

display(covid_pop_Race)


# COMMAND ----------

# MAGIC %sql -- Change below to NOT 'Y' for Non-hispanic  
# MAGIC SELECT 
# MAGIC   (
# MAGIC     case
# MAGIC       when HISPANIC_IND = 'Y' THEN "Hispanic" 
# MAGIC       when RACE = 'W' and HISPANIC_IND != 'Y' THEN "NH_White"
# MAGIC       when RACE = 'B' and HISPANIC_IND != 'Y' THEN "NH_Black"
# MAGIC       when RACE = 'A' and HISPANIC_IND != 'Y' THEN "NH_Asian"
# MAGIC       when RACE = 'O' and HISPANIC_IND != 'Y' then "Other"
# MAGIC       when RACE = 'U' and HISPANIC_IND != 'Y' then "Unknown"
# MAGIC       else "NA" 
# MAGIC       end
# MAGIC     ) as Race_Eth,
# MAGIC   (
# MAGIC     case
# MAGIC       when PAT_TYPE = 8 then "Inpatient" 
# MAGIC       when PAT_TYPE = 28 then "Emergency"
# MAGIC       when PAT_TYPE = 25 then "Hospice"
# MAGIC       when PAT_TYPE = 10 then  "SNF"
# MAGIC       when PAT_TYPE = 22 then  "Long Term Care"
# MAGIC       when PAT_TYPE = 33 then "Home Health"
# MAGIC       else "Other"
# MAGIC     end
# MAGIC   ) as Patient_Setting, 
# MAGIC   count(distinct MEDREC_KEY)
# MAGIC FROM covid_pop_tab
# MAGIC WHERE (
# MAGIC         (PAT_TYPE in (8,28,25,10,22,33)) and 
# MAGIC         (RACE in ('W', 'B', 'A', 'O', 'U'))
# MAGIC       )
# MAGIC GROUP BY
# MAGIC   (
# MAGIC     case
# MAGIC       when HISPANIC_IND = 'Y' THEN "Hispanic" 
# MAGIC       when RACE = 'W' and HISPANIC_IND != 'Y' THEN "NH_White"
# MAGIC       when RACE = 'B' and HISPANIC_IND != 'Y' THEN "NH_Black"
# MAGIC       when RACE = 'A' and HISPANIC_IND != 'Y' THEN "NH_Asian"
# MAGIC       when RACE = 'O' and HISPANIC_IND != 'Y' then "Other"
# MAGIC       when RACE = 'U' and HISPANIC_IND != 'Y' then "Unknown"
# MAGIC       else "NA" 
# MAGIC       end
# MAGIC     ),
# MAGIC     (
# MAGIC     case
# MAGIC       when PAT_TYPE = 8 then "Inpatient" 
# MAGIC       when PAT_TYPE = 28 then "Emergency"
# MAGIC       when PAT_TYPE = 25 then "Hospice"
# MAGIC       when PAT_TYPE = 10 then  "SNF"
# MAGIC       when PAT_TYPE = 22 then  "Long Term Care"
# MAGIC       when PAT_TYPE = 33 then "Home Health"
# MAGIC       else "Other" end)
# MAGIC ORDER BY
# MAGIC   Patient_Setting, Race_Eth;

# COMMAND ----------

# MAGIC %md
# MAGIC
# MAGIC #### Census Division

# COMMAND ----------

# MAGIC %sql 
# MAGIC SELECT 
# MAGIC   prov.PROV_DIVISION as Census_Division, 
# MAGIC   (
# MAGIC     case
# MAGIC       when cov.PAT_TYPE = 8 then "Inpatient" 
# MAGIC       when cov.PAT_TYPE = 28 then "Emergency"
# MAGIC       when cov.PAT_TYPE = 25 then "Hospice"
# MAGIC       when cov.PAT_TYPE = 10 then  "SNF"
# MAGIC       when cov.PAT_TYPE = 22 then  "Long Term Care"
# MAGIC       when cov.PAT_TYPE = 33 then "Home Health"
# MAGIC       else "Other"
# MAGIC     end
# MAGIC   ) as Patient_Setting,
# MAGIC   count(distinct MEDREC_KEY)
# MAGIC FROM covid_pop_tab cov 
# MAGIC     left join provider_tab prov 
# MAGIC     on cov.PROV_ID=prov.PROV_ID
# MAGIC WHERE (cov.PAT_TYPE in (8,25,28,10,22,33) and Deaths_Total=1) 
# MAGIC GROUP BY
# MAGIC   Census_Division, 
# MAGIC     (
# MAGIC     case
# MAGIC       when cov.PAT_TYPE = 8 then "Inpatient" 
# MAGIC       when cov.PAT_TYPE = 28 then "Emergency"
# MAGIC       when cov.PAT_TYPE = 25 then "Hospice"
# MAGIC       when cov.PAT_TYPE = 10 then  "SNF"
# MAGIC       when cov.PAT_TYPE = 22 then  "Long Term Care"
# MAGIC       when cov.PAT_TYPE = 33 then "Home Health"
# MAGIC       else "Other" end)
# MAGIC ORDER BY
# MAGIC   Patient_Setting, Census_Division;

# COMMAND ----------

# MAGIC %md
# MAGIC
# MAGIC ### Medications

# COMMAND ----------

# MAGIC %sql
# MAGIC select distinct
# MAGIC   (
# MAGIC     case
# MAGIC       when PAT_TYPE = 8 then "Inpatient" 
# MAGIC       when PAT_TYPE = 28 then "Emergency"
# MAGIC       when PAT_TYPE = 25 then "Hospice"
# MAGIC       when PAT_TYPE = 10 then  "SNF"
# MAGIC       when PAT_TYPE = 22 then  "Long Term Care"
# MAGIC       when PAT_TYPE = 33 then "Home Health"
# MAGIC       else "Other"
# MAGIC     end
# MAGIC   ) as Patient_Setting,
# MAGIC   
# MAGIC   treatment,
# MAGIC   
# MAGIC   count(distinct medrec_key)
# MAGIC
# MAGIC from
# MAGIC   (
# MAGIC     select
# MAGIC       distinct pat_type, medrec_key,
# MAGIC       (
# MAGIC         case
# MAGIC           when upper(std_chg_desc) like '%DEXAMETHASONE%' then 'DEXAMETHASONE'
# MAGIC           when upper(std_chg_desc) like '%TOFACITINIB%' then 'TOFACITINIB'
# MAGIC           when upper(std_chg_desc) like '%TOCILIZUMAB%' then 'TOCILIZUMAB'
# MAGIC           when upper(std_chg_desc) like '%SARILUMAB%' then 'SARILUMAB'
# MAGIC           when upper(std_chg_desc) like '%BARICITINIB%' then 'BARICITINIB'
# MAGIC           when (
# MAGIC             upper(std_chg_desc) like '%CPAP%'
# MAGIC             or upper(std_chg_desc) like '%BIPAP%'
# MAGIC             or upper(std_chg_desc) like '%NON-INVASIVE VENT%'
# MAGIC           ) then 'CPAP'
# MAGIC           when upper(std_chg_desc) like '%REMDESIVIR%' then 'REMDESIVIR'
# MAGIC           when clin_sum_code = 1101 then 'ICU'
# MAGIC           when clin_dtl_code = 410412946570007 then 'IMV'
# MAGIC         end
# MAGIC       ) as treatment
# MAGIC     from
# MAGIC       covid_pop_tab
# MAGIC       left join patbill on patbill.pat_key = covid_pop_tab.pat_key
# MAGIC       left join chargemaster on chargemaster.std_chg_code = patbill.std_chg_code
# MAGIC       
# MAGIC     union
# MAGIC     
# MAGIC     select
# MAGIC       distinct pat_type, medrec_key,
# MAGIC       (
# MAGIC         case
# MAGIC           when upper(cpt_desc) like '%DEXAMETHASONE%' then 'DEXAMETHASONE'
# MAGIC           when upper(cpt_desc) like '%TOFACITINIB%' then 'TOFACITINIB'
# MAGIC           when upper(cpt_desc) like '%TOCILIZUMAB%' then 'TOCILIZUMAB'
# MAGIC           when upper(cpt_desc) like '%SARILUMAB%' then 'SARILUMAB'
# MAGIC           when upper(cpt_desc) like '%BARICITINIB%' then 'BARICITINIB'
# MAGIC           when (
# MAGIC             upper(cpt_desc) like '%CPAP%'
# MAGIC             or upper(cpt_desc) like '%BIPAP%'
# MAGIC             or upper(cpt_desc) like '%NON-INVASIVE VENT%'
# MAGIC           ) then 'CPAP'
# MAGIC           when upper(cpt_desc) like '%REMDESIVIR%' then 'REMDESIVIR'
# MAGIC           when clin_sum_code = 1101 then 'ICU'
# MAGIC           when clin_dtl_code = 410412946570007 then 'IMV'
# MAGIC         end
# MAGIC       ) as treatment
# MAGIC     from
# MAGIC       covid_pop_tab
# MAGIC       left join patcpt on patcpt.pat_key = covid_pop_tab.pat_key
# MAGIC       left join cpt_lookup on patcpt.cpt_code = cpt_lookup.cpt_code
# MAGIC       left join patbill on patbill.pat_key = covid_pop_tab.pat_key
# MAGIC       left join chargemaster on chargemaster.std_chg_code = patbill.std_chg_code
# MAGIC   
# MAGIC     union
# MAGIC     
# MAGIC     select
# MAGIC       distinct pat_type, medrec_key,
# MAGIC       (
# MAGIC         case
# MAGIC           when upper(hosp_chg_desc) like '%DEXAMETHASONE%' then 'DEXAMETHASONE'
# MAGIC           when upper(hosp_chg_desc) like '%TOFACITINIB%' then 'TOFACITINIB'
# MAGIC           when upper(hosp_chg_desc) like '%TOCILIZUMAB%' then 'TOCILIZUMAB'
# MAGIC           when upper(hosp_chg_desc) like '%SARILUMAB%' then 'SARILUMAB'
# MAGIC           when upper(hosp_chg_desc) like '%BARICITINIB%' then 'BARICITINIB'
# MAGIC           when (
# MAGIC             upper(hosp_chg_desc) like '%CPAP%'
# MAGIC             or upper(hosp_chg_desc) like '%BIPAP%'
# MAGIC             or upper(hosp_chg_desc) like '%NON-INVASIVE VENT%'
# MAGIC           ) then 'CPAP'
# MAGIC           when upper(hosp_chg_desc) like '%REMDESIVIR%' then 'REMDESIVIR'
# MAGIC           when clin_sum_code = 1101 then 'ICU'
# MAGIC           when clin_dtl_code = 410412946570007 then 'IMV'
# MAGIC         end
# MAGIC       ) as treatment
# MAGIC     from
# MAGIC       covid_pop_tab
# MAGIC       left join patbill on patbill.pat_key = covid_pop_tab.pat_key
# MAGIC       left join hospcharge on hospcharge.hosp_chg_id = patbill.hosp_chg_id
# MAGIC       left join chargemaster on chargemaster.std_chg_code = patbill.std_chg_code
# MAGIC   )
# MAGIC   
# MAGIC   group by treatment, 
# MAGIC   (
# MAGIC     case
# MAGIC       when PAT_TYPE = 8 then "Inpatient" 
# MAGIC       when PAT_TYPE = 28 then "Emergency"
# MAGIC       when PAT_TYPE = 25 then "Hospice"
# MAGIC       when PAT_TYPE = 10 then  "SNF"
# MAGIC       when PAT_TYPE = 22 then  "Long Term Care"
# MAGIC       when PAT_TYPE = 33 then "Home Health"
# MAGIC       else "Other"
# MAGIC     end
# MAGIC   ) 

# COMMAND ----------

chgmstr=spark.read.table("edav_prd_cdh.cdh_premier_v2.chgmstr")
patbill=spark.read.table("edav_prd_cdh.cdh_premier_v2.patbill")
 
#ICU=chgmstr.filter("clin_sum_code in ('110108','110102')")  # Prior definition
ICU=chgmstr.filter("clin_sum_code == 110102")
 
ICU = ICU.join(patbill.select("PAT_KEY", "STD_CHG_CODE", "year", "quarter"), "STD_CHG_CODE", "inner")
 
ICU.createOrReplaceTempView("icu_tab")
 

# COMMAND ----------

# MAGIC %sql
# MAGIC SELECT
# MAGIC   --MEDREC_KEY,
# MAGIC   --PAT_TYPE,
# MAGIC   (
# MAGIC     case
# MAGIC       when PAT_TYPE = 8 then "Inpatient" 
# MAGIC       when PAT_TYPE = 28 then "Emergency"
# MAGIC       when PAT_TYPE = 25 then "Hospice"
# MAGIC       when PAT_TYPE = 10 then  "SNF"
# MAGIC       when PAT_TYPE = 22 then  "Long Term Care"
# MAGIC       when PAT_TYPE = 33 then "Home Health"
# MAGIC       else "Other"
# MAGIC     end
# MAGIC   ) as Patient_Setting,
# MAGIC   count(distinct MEDREC_KEY) as Pat_Count,
# MAGIC   sum(Deaths_Total) as Total_DFlags
# MAGIC FROM
# MAGIC   covid_pop_tab
# MAGIC WHERE
# MAGIC   (
# MAGIC     PAT_KEY in (
# MAGIC       SELECT
# MAGIC         PAT_KEY
# MAGIC       from
# MAGIC         icu_tab
# MAGIC     )
# MAGIC   and (PAT_TYPE in (8,28,25,10,22,33))
# MAGIC   and (Deaths_Total = 1)
# MAGIC   )
# MAGIC GROUP BY
# MAGIC   (
# MAGIC     case
# MAGIC       when PAT_TYPE = 8 then "Inpatient" 
# MAGIC       when PAT_TYPE = 28 then "Emergency"
# MAGIC       when PAT_TYPE = 25 then "Hospice"
# MAGIC       when PAT_TYPE = 10 then  "SNF"
# MAGIC       when PAT_TYPE = 22 then  "Long Term Care"
# MAGIC       when PAT_TYPE = 33 then "Home Health"
# MAGIC       else "Other"
# MAGIC     end
# MAGIC   )
# MAGIC ORDER BY
# MAGIC   Patient_Setting;

# COMMAND ----------

# MAGIC %md
# MAGIC
# MAGIC #### Length of Stay

# COMMAND ----------

# LOS df then stats

LOS_df = spark.sql("""

SELECT
   PAT_KEY, 
   MEDREC_KEY,
   PROV_ID, 
   PAT_TYPE, 
   Adm_month, 
   Disc_month,
   DISC_MON, 
   LOS, 
   DATEDIFF(cast(Disc_month as date), cast(Adm_month as date)) as LOS_nonI,
  (
    case
      when PAT_TYPE = 8 then "Inpatient" 
      when PAT_TYPE = 28 then "Emergency"
      when PAT_TYPE = 25 then "Hospice"
      when PAT_TYPE = 10 then "SNF" 
      when PAT_TYPE = 22 then "Long Term Care"
      when PAT_TYPE = 33 then "Home Health"
      else "Other"
    end
  ) as Patient_Setting
FROM
  covid_pop_tab
WHERE (
        (PAT_TYPE in (8,28,25,10,22,33)) and 
        (DISC_MON is not null)
      )
ORDER BY
  MEDREC_KEY
  
""")


display(LOS_df.limit(10))

LOS_stats1 = (LOS_df.filter((F.col('LOS') > 0) & (F.col('PAT_TYPE').isin(8,25)))
                   .sort('LOS', ascending=True)
                   .groupBy("Patient_Setting")
                   .agg(F.min("LOS").alias("Min LOS"), 
                        F.round(F.mean("LOS"), 2).alias("Mean_LOS"),
                        F.percentile_approx("LOS", 0.5, accuracy=100000).alias("Median LOS"), 
                        F.max("LOS").alias("Max LOS")
                        )
            )
LOS_stats2 = (LOS_df.filter((F.col('LOS_nonI') > 0) & (F.col('PAT_TYPE').isin(28,10,33,22)))
                   .sort('LOS_nonI', ascending=True)
                   .groupBy("Patient_Setting")
                   .agg(F.min("LOS_nonI").alias("Min LOS"), 
                        F.round(F.mean("LOS_nonI"), 2).alias("Mean_LOS"),
                        F.percentile_approx("LOS_nonI", 0.50, accuracy=100000).alias("Median LOS"), 
                        F.max("LOS_nonI").alias("Max LOS")
                        )
            )


LOS_stats = LOS_stats1.unionAll(LOS_stats2)

display(LOS_stats2)

# COMMAND ----------

LOS_stats = LOS_stats1.unionAll(LOS_stats2)

display(LOS_stats)

# COMMAND ----------

# MAGIC %md
# MAGIC
# MAGIC #### Do Not Resusitate

# COMMAND ----------

paticd_proc.createOrReplaceTempView("proc_tab")

# COMMAND ----------

# MAGIC %sql
# MAGIC SELECT
# MAGIC   (
# MAGIC     case
# MAGIC       when ICD_CODE like "%Z66%" then "DNR Yes" 
# MAGIC       when ICD_CODE not like "%Z66%" then "DNR No"
# MAGIC       else "Unkown"
# MAGIC     end
# MAGIC   ) as DNR_Order,
# MAGIC   (
# MAGIC     case
# MAGIC       when PAT_TYPE = 8 then "Inpatient" 
# MAGIC       when PAT_TYPE = 28 then "Emergency"
# MAGIC       when PAT_TYPE = 25 then "Hospice"
# MAGIC       when PAT_TYPE = 10 then  "SNF"
# MAGIC       when PAT_TYPE = 22 then  "Long Term Care"
# MAGIC       when PAT_TYPE = 33 then "Home Health"
# MAGIC       else "Other"
# MAGIC     end
# MAGIC   ) as Patient_Setting,
# MAGIC   COUNT(distinct MEDREC_KEY)
# MAGIC FROM
# MAGIC   covid_pop_tab 
# MAGIC   
# MAGIC   WHERE(
# MAGIC     PAT_KEY in (
# MAGIC       SELECT
# MAGIC         PAT_KEY
# MAGIC       from
# MAGIC         proc_tab
# MAGIC     )
# MAGIC   and (PAT_TYPE in (8,28,25,10,22,33))
# MAGIC   )
# MAGIC GROUP BY 
# MAGIC   (
# MAGIC     case
# MAGIC       when ICD_CODE like "%Z66%" then "DNR Yes" 
# MAGIC       when ICD_CODE not like "%Z66%" then "DNR No"
# MAGIC       else "Unkown"
# MAGIC     end
# MAGIC   ),
# MAGIC   (
# MAGIC     case
# MAGIC       when PAT_TYPE = 8 then "Inpatient" 
# MAGIC       when PAT_TYPE = 28 then "Emergency"
# MAGIC       when PAT_TYPE = 25 then "Hospice"
# MAGIC       when PAT_TYPE = 10 then  "SNF"
# MAGIC       when PAT_TYPE = 22 then  "Long Term Care"
# MAGIC       when PAT_TYPE = 33 then "Home Health"
# MAGIC       else "Other"
# MAGIC     end
# MAGIC   ) 
# MAGIC ORDER BY
# MAGIC   Patient_Setting
# MAGIC ;

# COMMAND ----------

# MAGIC %md 
# MAGIC ### Underlying conditions 
# MAGIC * 0
# MAGIC * 1–3
# MAGIC * 4–6
# MAGIC * 7+
# MAGIC * Cerebrovascular disease
# MAGIC * Cancer
# MAGIC * Chronic kidney disease
# MAGIC * Chronic lung disease
# MAGIC * Chronic liver disease
# MAGIC * Cystic fibrosis
# MAGIC * Diabetes mellitus (types 1 and 2)
# MAGIC * Disabilities
# MAGIC * Heart conditions
# MAGIC * HIV
# MAGIC * Mental health disorders
# MAGIC * Dementia
# MAGIC * Obesity
# MAGIC * Primary immunodeficiences
# MAGIC * Pregnancy or recent pregnancy
# MAGIC * Transplantation
# MAGIC * Tuberculosis 

# COMMAND ----------

"""Underlying conditions count - total n """ 

underCond_cols = ['Cancer1', 'Cancer2', 'Down_Syndrome', 'Heart_condition', 'Immun_Comp_Solid_Organ', 'Overweight', 'Obesity', 'Pregnancy', 
                   'Cerebrovascular_Disease', 'Immun_Comp_Other', 'Neuro_Cond', 'C_Kidney_Dis', 'COPD', 'Asthma', 'Diabetes', 'Hypertension', 
                   'Cystic_Fibrosis_ODD', 'Drug_Use', 'HIV_AIDS', 'Liver_Dis_Hep', 'Sickle_cell', 'Tobacco_use']

covid_pop = covid_pop.withColumn("UC_count", reduce(add, [F.col(c) for c in underCond_cols ] ))

print("Patients with no underlying conditions: " +  str(covid_pop.select(['MEDREC_KEY', 'UC_count']).filter("UC_count == 0").count()) )
print("Patients with 1-3: " + str(covid_pop.select(['MEDREC_KEY', 'UC_count']).filter("UC_count < 4 and UC_count > 0").count()) )
print("Patients with 4-6: " + str(covid_pop.select(['MEDREC_KEY', 'UC_count']).filter("UC_count < 7 and UC_count > 3").count()) )
print("Patients with 1-3: " + str(covid_pop.select(['MEDREC_KEY', 'UC_count']).filter("UC_count >= 7").count()) )


# COMMAND ----------

"""Underlying condition Rankings 0-7+ counting all specific underlying conditions by setting """  

underC_N=(covid_pop.filter( col('PAT_TYPE').isin([10,22,33,8,28,25]) )
                        .withColumn('Patient_Setting',
                                    F.when( col('PAT_TYPE')==8, "Inpatient")
                                    .when( col('PAT_TYPE')==28, "Emergency")
                                    .when( col('PAT_TYPE')==25, "Hospice")
                                    .when(col('PAT_TYPE')==10, "SNF")
                                    .when(col('PAT_TYPE')==22, "Long Term Care")
                                    .when(col("PAT_TYPE")==33, "Home Health")
                                .otherwise("Other"))
                        .withColumn('Underlying_Group',
                                    F.when( col('UC_count')==0, "No UC")
                                    .when( (col('UC_count') < 4) & (col('UC_count') > 0), "UC 1-3")
                                    .when( (col('UC_count') < 7) & (col('UC_count') > 3), "UC 4-6")
                                    .when( (col('UC_count') >= 7), "UC 7+")
                                .otherwise("Other"))
                        .groupBy("Patient_Setting", "Underlying_Group")
                        .agg( 
                             F.countDistinct(col('MEDREC_KEY')).alias("n_Underlying_Conditions"), 
                            )
                        .orderBy(col("Patient_Setting")))


# COMMAND ----------

""" all underlying conditions by setting """

UC_counts = (covid_pop.filter((col('PAT_TYPE').isin([10, 22, 33,8,28,25])) )
                         .withColumn('Patient_Setting', 
                                    F.when( col('PAT_TYPE')==8, "Inpatient")
                                    .when( col('PAT_TYPE')==28, "Emergency")
                                    .when( col('PAT_TYPE')==25, "Hospice")
                                    .when(col('PAT_TYPE')==10, "SNF")
                                    .when(col('PAT_TYPE')==22, "Long Term Care")
                                    .when(col("PAT_TYPE")==33, "Home Health")
                                .otherwise("Other"))
                         .groupBy("Patient_Setting")
                         .agg(*[ F.sum(c).alias(c) for c in underCond_cols])
            )

display(UC_counts)

# COMMAND ----------

# MAGIC %md
# MAGIC
# MAGIC ### Other conditions

# COMMAND ----------



# COMMAND ----------

# MAGIC %md
# MAGIC
# MAGIC ### Mean los IMV

# COMMAND ----------

LOS_stats1 = (LOS_df.filter((F.col('LOS') > 0) & (F.col('PAT_TYPE').isin(8,25)))
                   .sort('LOS', ascending=True)
                   .groupBy("Patient_Setting")
                   .agg(F.min("LOS").alias("Min LOS"), 
                        F.round(F.mean("LOS"), 2).alias("Mean_LOS"),
                        F.percentile_approx("LOS", 0.5, accuracy=100000).alias("Median LOS"), 
                        F.max("LOS").alias("Max LOS")
                        )
            )
LOS_stats2 = (LOS_df.filter((F.col('LOS_nonI') > 0) & (F.col('PAT_TYPE').isin(28,10,33,22)))
                   .sort('LOS_nonI', ascending=True)
                   .groupBy("Patient_Setting")
                   .agg(F.min("LOS_nonI").alias("Min LOS"), 
                        F.round(F.mean("LOS_nonI"), 2).alias("Mean_LOS"),
                        F.percentile_approx("LOS_nonI", 0.50, accuracy=100000).alias("Median LOS"), 
                        F.max("LOS_nonI").alias("Max LOS")
                        )
            )


LOS_stats = LOS_stats1.unionAll(LOS_stats2)

display(LOS_stats2)

# COMMAND ----------

# MAGIC %md
# MAGIC
# MAGIC ### Mean los ICU 

# COMMAND ----------

LOS_stats1 = (LOS_df.filter((F.col('LOS') > 0) & (F.col('PAT_TYPE').isin(8,25)))
                   .sort('LOS', ascending=True)
                   .groupBy("Patient_Setting")
                   .agg(F.min("LOS").alias("Min LOS"), 
                        F.round(F.mean("LOS"), 2).alias("Mean_LOS"),
                        F.percentile_approx("LOS", 0.5, accuracy=100000).alias("Median LOS"), 
                        F.max("LOS").alias("Max LOS")
                        )
            )
LOS_stats2 = (LOS_df.filter((F.col('LOS_nonI') > 0) & (F.col('PAT_TYPE').isin(28,10,33,22)))
                   .sort('LOS_nonI', ascending=True)
                   .groupBy("Patient_Setting")
                   .agg(F.min("LOS_nonI").alias("Min LOS"), 
                        F.round(F.mean("LOS_nonI"), 2).alias("Mean_LOS"),
                        F.percentile_approx("LOS_nonI", 0.50, accuracy=100000).alias("Median LOS"), 
                        F.max("LOS_nonI").alias("Max LOS")
                        )
            )


LOS_stats = LOS_stats1.unionAll(LOS_stats2)

display(LOS_stats2)

# COMMAND ----------

# MAGIC %md
# MAGIC
# MAGIC ### Prior Infection

# COMMAND ----------

# MAGIC %sql
# MAGIC
# MAGIC select * from covid_pop_tab

# COMMAND ----------

patlabres=spark.read.table("edav_prd_cdh.cdh_premier_v2.lab_res")
patlabres.createOrReplaceTempView("patlabres")

# COMMAND ----------

# MAGIC %sql
# MAGIC     
# MAGIC     select
# MAGIC       medrec_key,
# MAGIC       (
# MAGIC         case
# MAGIC           when PAT_TYPE = 8 then "Inpatient"
# MAGIC           when PAT_TYPE = 28 then "Emergency"
# MAGIC           when PAT_TYPE = 25 then "Hospice"
# MAGIC           when PAT_TYPE = 10 then "SNF"
# MAGIC           when PAT_TYPE = 22 then "Long Term Care"
# MAGIC           when PAT_TYPE = 33 then "Home Health"
# MAGIC           else "Other"
# MAGIC         end
# MAGIC       ) as Patient_Setting, 
# MAGIC       count(distinct a.adm_mon) adm_count
# MAGIC     from
# MAGIC       covid_pop_tab a
# MAGIC       group by medrec_key, (
# MAGIC         case
# MAGIC           when PAT_TYPE = 8 then "Inpatient"
# MAGIC           when PAT_TYPE = 28 then "Emergency"
# MAGIC           when PAT_TYPE = 25 then "Hospice"
# MAGIC           when PAT_TYPE = 10 then "SNF"
# MAGIC           when PAT_TYPE = 22 then "Long Term Care"
# MAGIC           when PAT_TYPE = 33 then "Home Health"
# MAGIC           else "Other"
# MAGIC         end
# MAGIC       )

# COMMAND ----------

case
    when
        (icd_code in ('U07.1', 'U07.2', 'J12.82')
        and (cpt_date >= icd_date or chg_date >=icd_date)) or 
        (upper(test) in (upper('SARS coronavirus 2 RNA:PrThr:Pt:Respiratory:Ord:Probe.amp.tar'),upper('SARS coronavirus 2 RNA:PrThr:Pt:XXX:Ord:Probe.amp.tar')) 
        and upper(observation) like '%POSITIVE%'
        and (cpt_date >= lab_date or chg_date >= lab_date))
     then 1
    else 0
  end as COVID

# COMMAND ----------

# MAGIC %md
# MAGIC
# MAGIC ### Vaccination Status

# COMMAND ----------

case 
    when (cpt_code in ("91300", "0002A", "91301", "0012A", "91303", "0031A")) 
    or  (std_chg_code in (510771000020000, 510771000120000, 51077100031000))
    then 1 else 0 end as vac_full,
case
    when cpt_code in ("0001A", "0011A") and vac_full != 1 then 1, else 0 end as vac_part
case
    when (cpt_code in ("91300", "0001A", "0002A", "91301", "0011A", "0012A", "91303", "0031A"))
    or (std_chg_code in (510771000010000, 510771000020000, 510771000110000, 510771000120000, 510771000310000))
    then 1, else 0 end as vac_any
case 
    when (vac_any == 0 and vac_full == 0 and vac_part == 0) then 1 else 0 end as vac_unknown
