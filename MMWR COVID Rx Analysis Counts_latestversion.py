# Databricks notebook source
# MAGIC %md
# MAGIC ###COVID Rx Analysis with age consideration
# MAGIC Author: Erica Okene (contractor, GAP solutions) ak21@cdc.gov
# MAGIC
# MAGIC COVID Population, Definitions, and Codesets generated by Heartley Egwuogu (contractor, GAP solutions) tog0@cdc.gov for LAVA Respiratory Virus Dashboard
# MAGIC
# MAGIC FTE Support: Julia Raykin qiz8@cdc.gov
# MAGIC
# MAGIC Started on 12/20/2024

# COMMAND ----------

# DBTITLE 0,Importing  Section
from itertools import chain
from pyspark.sql.types import StructField, StructType, StringType, IntegerType
from pyspark.sql import SparkSession, functions as F, Row
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import seaborn as sns
import pandas as pd
import datetime as dt

# COMMAND ----------

# MAGIC %md
# MAGIC ### Relevant externaly created notebooks and links,imported into this notebook
# MAGIC - cdh_truveta_exploratory.tog0_truveta_encounterv2 -Encounter Table ([Notebook](https://adb-5189663741904016.16.azuredatabricks.net/editor/notebooks/4481497015918153?o=5189663741904016)). This table is the modified Truveta encounter table that includes icu,imv and deaths. You may use the Truveta encounter table if icu,imv and deaths are not abstracted in your project. NOTE:The encounterv2 table must be rerun, to refresh table, at least weekly
# MAGIC - cdh_truveta_exploratory.ak21_truveta_MMWR_umc High-Risk/Undeylying Medical Condition ([Notebook](https://adb-5189663741904016.16.azuredatabricks.net/editor/notebooks/4186368583545589?o=5189663741904016)). This table contains the ICD10 codes for the High Risk Conditions and Underlying Medical Conditions

# COMMAND ----------

# MAGIC %md
# MAGIC ### Applicable Rules
# MAGIC 1. All Covid patients is defined as patients with diagnosis of covid or positive labs over 65 
# MAGIC 2. Only patients with outpatient (ambulatory) encounters occuring within seasons
# MAGIC - a. Summer 2023 (2023-06-01 to 2023-09-30)
# MAGIC - b. Fall/Winter 2023 - 2024 (2023-10-01 to 2024-03-30)
# MAGIC - c. Summer 2024 (2024-06-01 to 2024-09-30)
# MAGIC 3. The following exclusions apply:
# MAGIC - a. all Patients with a COVID-19 inpatient event during the study period
# MAGIC - b. all Patients with a COVID-19 inpatient event 1 month prior or 2 weeks following an outpatient event during study period
# MAGIC - c. all Patients with a COVID-19 diagnosis 6 months prior to index COVID event
# MAGIC 4. Inpatients are defined as having conceptcode in ('1065215','1065220','1065223','1065603'): Outpatients are defined as having conceptcode in ('1065216'); emergency patients are defined as having conceptcode in ('1065217','3058549')
# MAGIC 5. Date of onset is defined as index date i.e. the first time occurence of diagnosis or positive lab
# MAGIC 7. Demographic vars including age, sex, HHS region are identified at index date.
# MAGIC 8. All covid patients are counted once in the year-month and season of the index date
# MAGIC 9. Covid medications are considered as administration or dispensation of covid medications including paxlovid or molnupiravir or remdesivir. 
# MAGIC 10. Covid medications administration or dispensation window is set to  [0,14] of index date

# COMMAND ----------

# MAGIC %md
# MAGIC ### Covid Population Defined
# MAGIC Patients are included in this analysis based on encounters occuring in the study perio with the COVID codes below (covid diagnosis or lab)

# COMMAND ----------

# MAGIC %md
# MAGIC M table derived in LAVA, modified in this notebook table altered to include only medications dispensed  or administered after 2023/06/01
# MAGIC
# MAGIC
# MAGIC Seasons were updated to reflect Project Proposal
# MAGIC - summer 2024 (June 1 – Sept 30, 2024), 
# MAGIC - fall/winter 2023-2024 (Oct 1, 2023 – March 1, 2024), 
# MAGIC - summer 2023 (June 1- Sept 30, 2023). 
# MAGIC We will exclude all cases outside of the above three dates in our analysis.
# MAGIC

# COMMAND ----------

# MAGIC %md
# MAGIC ### Generate Target Population Table with conditions
# MAGIC ####Population characteristics addressed here: 
# MAGIC - Age: include only >=65
# MAGIC - Age groups established
# MAGIC
# MAGIC ####Follow up time:
# MAGIC - Treatment population include med dispense or admin within 14 days
# MAGIC #### Outcomes addressed:
# MAGIC - Time to treatment flag established
# MAGIC
# MAGIC #### Underlying medical conditions:
# MAGIC - [COVID UMC list and associated codes](https://adb-5189663741904016.16.azuredatabricks.net/editor/notebooks/4186368583545589?o=5189663741904016)
# MAGIC - time to treatment flag established
# MAGIC - vaccination flag established (does not include vax within 2 months of index event)

# COMMAND ----------

# MAGIC %sql
# MAGIC select count(distinct personid) as count from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop_enc

# COMMAND ----------

# DBTITLE 1,counts by season (denom)
df_totsbySeason1 = spark.sql("""SELECT
                             season, 
                             count (distinct personid) as count
                             from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop_enc
                             where season is not null
                             group by season
""").toPandas()   
df_totsbySeason1.display()

##Population estimates in studio: Sum23 = 84K, FW2324 = 138K**DNA, Sum24 = 97K,

# COMMAND ----------

# DBTITLE 1,treatment by season
df_trtmentbySeason1 = spark.sql("""SELECT
                             season,
                             count (distinct personid) as count
                             from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop_enc
                             where season is not null
                             and medflag=1
                             group by season

""").toPandas() 
df_trtmentbySeason1.display()
##Population estimates in studio: Sum23 = 9.2K**DNA, FW2324 = 21K, Sum24 = 16K

# COMMAND ----------

df_trtmentrateSeason = pd.merge(df_totsbySeason1, df_trtmentbySeason1, on='season', how='left')
df_trtmentrateSeason['%treated'] = round((df_trtmentbySeason1['count']/df_totsbySeason1['count'])*100)
df_trtmentrateSeason = df_trtmentrateSeason.rename(columns={'count_x':'covid','count_y':'treated'})

season_names = {'Summer 2023' : 'Season 1',
                'Fall/Winter 2023-2024': 'Season 2',
                'Summer 2024': 'Season 3'}
df_trtmentrateSeason = df_trtmentrateSeason.replace({"season": season_names})
df_trtmentrateSeason.display()

# COMMAND ----------

# DBTITLE 1,totals by season and age
df_totsbySeasonAge1 = spark.sql("""SELECT
                             season, agesi,
                             count (distinct personid) as count
                             from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop_enc
                             where season is not null
                             group by season, agesi
                             order by season,agesi
""").toPandas() 
df_totsbySeasonAge1.display()

# COMMAND ----------

# DBTITLE 1,treatment by season, age
df_trtmentbySeasonAge = spark.sql("""SELECT
                             season,
                             agesi,
                             count (distinct personid) as count
                             from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop_enc
                             where season is not null
                             and medflag=1
                             group by season,agesi
                             order by season,agesi

""").toPandas()   
df_trtmentbySeasonAge.display()

#Counts from Prose B with enc and date bound
##S23 3130, 2902, 2312, 1390, 594, 303

##FW2324 5654, 5276, 4209, 2553, 1168, 600

##s24 3918, 3881, 3101, 1874, 836, 372


# COMMAND ----------

# DBTITLE 1,Season1
df_trtmentbySeasonAge = spark.sql("""SELECT
                             season,
                             agesi,
                             count (distinct personid) as count
                             from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop_enc
                             where season = "Summer 2023"
                             and medflag=1
                             group by season,agesi
                             order by season,agesi

""").toPandas()   
df_trtmentbySeasonAge.display()

# COMMAND ----------

# DBTITLE 1,Season2
df_trtmentbySeasonAge = spark.sql("""SELECT
                             season,
                             agesi,
                             count (distinct personid) as count
                             from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop_enc
                             where season = "Fall/Winter 2023-2024"
                             and medflag=1
                             group by season,agesi
                             order by season,agesi

""").toPandas()   
df_trtmentbySeasonAge.display()

# COMMAND ----------

df_trtmentbySeasonAge = spark.sql("""SELECT
                             season,
                             agesi,
                             count (distinct personid) as count
                             from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop_enc
                             where season = "Summer 2024"
                             and medflag=1
                             group by season,agesi
                             order by season,agesi

""").toPandas()   
df_trtmentbySeasonAge.display()

# COMMAND ----------

# DBTITLE 1,totals by season, sex
df_totsbySeasonSex = spark.sql("""SELECT
                             season,gender,
                             count (distinct personid) as count
                             from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop_enc
                             where season is not null
                             group by season,gender
                             order by season,gender
""")   
df_totsbySeasonGender.display()

# COMMAND ----------

# DBTITLE 1,totals by race/eth
df_totsbySeasonRaceEth = spark.sql("""SELECT
                             season,race_ethnicity,
                             count (distinct personid) as count
                             from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop_enc
                             where season is not null
                             group by season,race_ethnicity
                             order by season,race_ethnicity
""")   
df_totsbySeasonRaceEth.display()

# COMMAND ----------

# DBTITLE 1,medical conditions by season
dfumcbySeason = spark.sql("""SELECT season,umc, count (distinct personid) as count
                             from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop_enc
                             where season is not null
                             group by season,umc
                             order by season
""")
dfumcbySeason.display()


# COMMAND ----------

# MAGIC %sql
# MAGIC select season,
# MAGIC count(distinct personid) as count 
# MAGIC from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop_enc
# MAGIC where 12msterrxflag = 1
# MAGIC and season is not null
# MAGIC group by season
# MAGIC

# COMMAND ----------

# MAGIC %sql
# MAGIC select season,
# MAGIC count(distinct personid) as count 
# MAGIC from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop_enc
# MAGIC where vaxflag = 1
# MAGIC and season is not null
# MAGIC group by season
# MAGIC

# COMMAND ----------

# MAGIC %sql
# MAGIC select season,
# MAGIC count(distinct personid) as count 
# MAGIC from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop_enc
# MAGIC where 6mvaxflag = 1
# MAGIC and season is not null
# MAGIC group by season
# MAGIC

# COMMAND ----------

# MAGIC %sql
# MAGIC select season,
# MAGIC ttrxflag,
# MAGIC count(distinct personid) as count 
# MAGIC from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop_enc
# MAGIC where season is not null
# MAGIC group by season,ttrxflag
# MAGIC sort by season, ttrxflag

# COMMAND ----------

# MAGIC %sql
# MAGIC select season,
# MAGIC meds,
# MAGIC count(distinct personid) as count 
# MAGIC from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop_enc
# MAGIC where season is not null
# MAGIC group by season,meds
# MAGIC sort by season, meds

# COMMAND ----------

# MAGIC %sql
# MAGIC select season, personid,
# MAGIC umc
# MAGIC from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop_enc
# MAGIC where season is not null

# COMMAND ----------

# MAGIC %sql
# MAGIC select 
# MAGIC   season, 
# MAGIC   umc_count, 
# MAGIC   count(distinct personid) as personid_count
# MAGIC   from (select 
# MAGIC     season, 
# MAGIC     personid,
# MAGIC     case   
# MAGIC       when count(distinct umc) = 0 then '0 conditions'
# MAGIC       when count(distinct umc) = 1 then '1 condition'
# MAGIC       when count(distinct umc) = 2 then '2 conditions'
# MAGIC       else '>=3 conditions'
# MAGIC     end as umc_count 
# MAGIC   from  cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop_enc
# MAGIC   where season is not null
# MAGIC   group by season, personid)
# MAGIC   group by season, umc_count
# MAGIC   order by season, umc_count

# COMMAND ----------

# MAGIC %md
# MAGIC Plots for treatment rate by season

# COMMAND ----------

df_plot1arx = spark.sql('''SELECT agesi,
                        count(case when medflag = 1 then personid end) as count_rx
                   from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop_enc
        WHERE season="Summer 2023"
        GROUP BY agesi
        ORDER BY agesi
''').toPandas()
display(df_plot1arx)

df_plot2arx = spark.sql('''SELECT agesi,
                        count(distinct personid) as count_rx
                   from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop_enc
        WHERE season="Summer 2023" and medflag = 1
        GROUP BY agesi
        ORDER BY agesi
''').toPandas()
display(df_plot2arx)

# COMMAND ----------

# DBTITLE 1,Plot 1a: select treatment and tots by season
df_plot1atot = spark.sql('''SELECT agesi,
                      count(distinct personid) as count_tot
                   from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop_enc
        WHERE season="Summer 2023"
        GROUP BY agesi
        ORDER BY agesi
''').toPandas()

display(df_plot1atot)

df_plot1arx = spark.sql('''SELECT agesi,
                        count(distinct personid) as count_rx
                   from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop_enc
        WHERE season="Summer 2023" and medflag = 1
        GROUP BY agesi
        ORDER BY agesi
''').toPandas()

display(df_plot1arx)



# COMMAND ----------

labels = ['65-69yr','70-74yr','75-79yr','80-84yr','85-89yr','90+yr']


gwidth = 0.8
gspace = 0.4
positions = np.arange(len(labels))

heights1 = []
heights2 = []
for label in labels:
    heights1.append(df_plot1atot[df_plot1atot['agesi']==label]['count_tot'].values[0])
    heights2.append(round(df_plot1arx[df_plot1arx['agesi']==label]['count_rx'].values[0]/df_plot1atot[df_plot1atot['agesi']==label]['count_tot'].values[0]*100))
    

fig, ax1 = plt.subplots()
ax2 = ax1.twinx()
bar1 = ax1.bar(positions, heights1, gwidth/2, align="center", label="Total Patients*", color="skyblue")
bar2 = ax2.bar(positions+gspace, heights2, gwidth/2, align="center", label="Percent Treated**", color="orange")
ax1.bar_label(bar1, label_type="edge")
ax2.bar_label(bar2, label_type="edge", fmt="%g")
       
ax1.set_xticks(positions + gwidth/4)
ax1.set_xticklabels(labels)
#ax1.set_xlabel("Age Group")
ax1.set_ylabel("Total Patients").set_color("skyblue")
ax2.set_ylabel("Percent Treated").set_color("orange")
ax2.set_ylim(0, 100)

bars = [bar1, bar2]
labs = [b.get_label() for b in bars]
ax1.legend(bars, labs, loc='lower center', bbox_to_anchor=(0.5, -0.175), ncol=len(labels)/2)
#sns.despine(left=True)
#ax1.set_style("whitegrid")

plt.suptitle("SARS-CoV-2 Patients, Percent Treated by Age Group")
plt.title("Summer 2023")
plt.figtext(0.01, -0.20, "Data Source: Truveta electronic health records data from 20 U.S. health systems \n*Total outpatients age 65+ in Truveta Health Records with positive lab and/or COVID-19 diagnosis \n**Percent of patients who received a treatment within 14 days out of total encounters in each age group.", fontsize=10)

# COMMAND ----------

# DBTITLE 1,Plot 1b: select treatment and tots by season
df_plot1btot = spark.sql('''SELECT agesi,
                      count(distinct personid) as count_tot
                   from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop_enc
        WHERE season="Fall/Winter 2023-2024"
        GROUP BY agesi
        ORDER BY agesi
''').toPandas()

display(df_plot1btot)

df_plot1brx = spark.sql('''SELECT agesi,
                        count(distinct personid) as count_rx
                   from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop_enc
        WHERE season="Fall/Winter 2023-2024" and medflag = 1
        GROUP BY agesi
        ORDER BY agesi
''').toPandas()

display(df_plot1brx)



# COMMAND ----------

labels = ['65-69yr','70-74yr','75-79yr','80-84yr','85-89yr','90+yr']


gwidth = 0.8
gspace = 0.4
positions = np.arange(len(labels))

heights1 = []
heights2 = []
for label in labels:
    heights1.append(df_plot1btot[df_plot1btot['agesi']==label]['count_tot'].values[0])
    heights2.append(round(df_plot1brx[df_plot1brx['agesi']==label]['count_rx'].values[0]/df_plot1btot[df_plot1btot['agesi']==label]['count_tot'].values[0]*100))
    

fig, ax1 = plt.subplots()
ax2 = ax1.twinx()
bar1 = ax1.bar(positions, heights1, gwidth/2, align="center", label="Total Patients*", color="skyblue")
bar2 = ax2.bar(positions+gspace, heights2, gwidth/2, align="center", label="Percent Treated**", color="orange")
ax1.bar_label(bar1, label_type="edge")
ax2.bar_label(bar2, label_type="edge", fmt="%g")
       
ax1.set_xticks(positions + gwidth/4)
ax1.set_xticklabels(labels)
#ax1.set_xlabel("Age Group")edav_prd_cdh.cdh_truveta.medicationstatement
ax1.set_ylabel("Total Patients").set_color("skyblue")
ax2.set_ylabel("Percent Treated").set_color("orange")
ax2.set_ylim(0, 100)

bars = [bar1, bar2]
labs = [b.get_label() for b in bars]
ax1.legend(bars, labs, loc='lower center', bbox_to_anchor=(0.5, -0.175), ncol=len(labels)/2)
#sns.despine(left=True)
#ax1.set_style("whitegrid")

plt.suptitle("SARS-CoV-2 Patients, Percent Treated by Age Group")
plt.title("Fall/Winter 2023-2024")
plt.figtext(0.01, -0.20, "Data Source: Truveta electronic health records data from 20 U.S. health systems \n*Total outpatients age 65+ in Truveta Health Records with positive lab and/or COVID-19 diagnosis \n**Percent of patients who received a treatment within 14 days out of total encounters in each age group.", fontsize=10)

# COMMAND ----------

df_plot1ctot = spark.sql('''SELECT agesi,
                      count(distinct personid) as count_tot
                   from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop_enc
        WHERE season="Summer 2024"
        GROUP BY agesi
        ORDER BY agesi
''').toPandas()

display(df_plot1ctot)

df_plot1crx = spark.sql('''SELECT agesi,
                        count(distinct personid) as count_rx
                   from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop_enc
        WHERE season="Summer 2024" and medflag = 1
        GROUP BY agesi
        ORDER BY agesi
''').toPandas()

display(df_plot1crx)



# COMMAND ----------

labels = ['65-69yr','70-74yr','75-79yr','80-84yr','85-89yr','90+yr']


gwidth = 0.8
gspace = 0.4
positions = np.arange(len(labels))

heights1 = []
heights2 = []
for label in labels:
    heights1.append(df_plot1ctot[df_plot1ctot['agesi']==label]['count_tot'].values[0])
    heights2.append(round(df_plot1crx[df_plot1crx['agesi']==label]['count_rx'].values[0]/df_plot1ctot[df_plot1ctot['agesi']==label]['count_tot'].values[0]*100))
    

fig, ax1 = plt.subplots()
ax2 = ax1.twinx()
bar1 = ax1.bar(positions, heights1, gwidth/2, align="center", label="Total Patients*", color="skyblue")
bar2 = ax2.bar(positions+gspace, heights2, gwidth/2, align="center", label="Percent Treated**", color="orange")
ax1.bar_label(bar1, label_type="edge")
ax2.bar_label(bar2, label_type="edge", fmt="%g")
       
ax1.set_xticks(positions + gwidth/4)
ax1.set_xticklabels(labels)
#ax1.set_xlabel("Age Group")
ax1.set_ylabel("Total Patients").set_color("skyblue")
ax2.set_ylabel("Percent Treated").set_color("orange")
ax2.set_ylim(0, 100)

bars = [bar1, bar2]
labs = [b.get_label() for b in bars]
ax1.legend(bars, labs, loc='lower center', bbox_to_anchor=(0.5, -0.175), ncol=len(labels)/2)
#sns.despine(left=True)
#ax1.set_style("whitegrid")

plt.suptitle("SARS-CoV-2 Patients, Percent Treated by Age Group")
plt.title("Summer 2024")
plt.figtext(0.01, -0.20, "Data Source: Truveta electronic health records data from 20 U.S. health systems \n*Total outpatients age 65+ in Truveta Health Records with positive lab and/or COVID-19 diagnosis \n**Percent of patients who received a treatment within 14 days out of total encounters in each age group.", fontsize=10)