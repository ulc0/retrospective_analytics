# Databricks notebook source
dbutils.widgets.text("source_catalog",defaultValue="edav_stg_cdh")
dbutils.widgets.text("source_schema",defaultValue="cdh_premier_v2")
#mandatory parameters and names. The orchestrator will always pass these
dbutils.widgets.text("etl_catalog",defaultValue="edav_stg_cdh")
dbutils.widgets.text("etl_schema",defaultValue="cdh_premier_omop_etl")
dbutils.widgets.text("omop_catalog",defaultValue="edav_stg_cdh")
dbutils.widgets.text("omop_schema",defaultValue="cdh_premier_omop")
dbutils.widgets.text("results_catalog",defaultValue="edav_stg_cdh")
dbutils.widgets.text("results_schema",defaultValue="cdh_premier_atlas_results")

# COMMAND ----------

# MAGIC %sql
# MAGIC -- field fk class
# MAGIC
# MAGIC WITH cte_all  AS (SELECT cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  , CAST('' as STRING) as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'fkClass' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the DRUG_CONCEPT_ID field in the DOSE_ERA table that do not conform to the INGREDIENT class.' as check_description
# MAGIC  ,'DOSE_ERA' as cdm_table_name
# MAGIC  ,'DRUG_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_fk_class.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Computational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_fkclass_dose_era_drug_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DOSE_ERA.DRUG_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DOSE_ERA cdmTable
# MAGIC  LEFT JOIN ${omop_catalog}.${omop_schema}.concept co
# MAGIC  ON cdmTable.DRUG_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.concept_class_id != 'Ingredient') 
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DOSE_ERA cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'fkClass' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the DRUG_CONCEPT_ID field in the DRUG_ERA table that do not conform to the INGREDIENT class.' as check_description
# MAGIC  ,'DRUG_ERA' as cdm_table_name
# MAGIC  ,'DRUG_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_fk_class.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Computational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_fkclass_drug_era_drug_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DRUG_ERA.DRUG_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_ERA cdmTable
# MAGIC  LEFT JOIN ${omop_catalog}.${omop_schema}.concept co
# MAGIC  ON cdmTable.DRUG_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.concept_class_id != 'Ingredient') 
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_ERA cdmTable
# MAGIC ) denominator
# MAGIC ) cte
# MAGIC )
# MAGIC INSERT INTO ${results_catalog}.${results_schema}.dqdashboard_results
# MAGIC SELECT *
# MAGIC FROM cte_all;
# MAGIC

# COMMAND ----------

# MAGIC %sql
# MAGIC -- field is standard valid concept
# MAGIC
# MAGIC WITH cte_all  AS (SELECT cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  , CAST('' as STRING) as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the PLACE_OF_SERVICE_CONCEPT_ID field in the CARE_SITE table.' as check_description
# MAGIC  ,'CARE_SITE' as cdm_table_name
# MAGIC  ,'PLACE_OF_SERVICE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_care_site_place_of_service_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'CARE_SITE.PLACE_OF_SERVICE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CARE_SITE cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.PLACE_OF_SERVICE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CARE_SITE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the CONDITION_CONCEPT_ID field in the CONDITION_ERA table.' as check_description
# MAGIC  ,'CONDITION_ERA' as cdm_table_name
# MAGIC  ,'CONDITION_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_condition_era_condition_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'CONDITION_ERA.CONDITION_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_ERA cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.CONDITION_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_ERA cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the CONDITION_CONCEPT_ID field in the CONDITION_OCCURRENCE table.' as check_description
# MAGIC  ,'CONDITION_OCCURRENCE' as cdm_table_name
# MAGIC  ,'CONDITION_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_condition_occurrence_condition_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'CONDITION_OCCURRENCE.CONDITION_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.CONDITION_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the CONDITION_TYPE_CONCEPT_ID field in the CONDITION_OCCURRENCE table.' as check_description
# MAGIC  ,'CONDITION_OCCURRENCE' as cdm_table_name
# MAGIC  ,'CONDITION_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_condition_occurrence_condition_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'CONDITION_OCCURRENCE.CONDITION_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.CONDITION_TYPE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the CONDITION_STATUS_CONCEPT_ID field in the CONDITION_OCCURRENCE table.' as check_description
# MAGIC  ,'CONDITION_OCCURRENCE' as cdm_table_name
# MAGIC  ,'CONDITION_STATUS_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_condition_occurrence_condition_status_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'CONDITION_OCCURRENCE.CONDITION_STATUS_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.CONDITION_STATUS_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the COST_TYPE_CONCEPT_ID field in the COST table.' as check_description
# MAGIC  ,'COST' as cdm_table_name
# MAGIC  ,'COST_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_cost_cost_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'COST.COST_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.COST_TYPE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the CAUSE_CONCEPT_ID field in the DEATH table.' as check_description
# MAGIC  ,'DEATH' as cdm_table_name
# MAGIC  ,'CAUSE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_death_cause_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DEATH.CAUSE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEATH cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.CAUSE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEATH cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the DEATH_TYPE_CONCEPT_ID field in the DEATH table.' as check_description
# MAGIC  ,'DEATH' as cdm_table_name
# MAGIC  ,'DEATH_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_death_death_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DEATH.DEATH_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEATH cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.DEATH_TYPE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEATH cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the DEVICE_CONCEPT_ID field in the DEVICE_EXPOSURE table.' as check_description
# MAGIC  ,'DEVICE_EXPOSURE' as cdm_table_name
# MAGIC  ,'DEVICE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_device_exposure_device_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DEVICE_EXPOSURE.DEVICE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.DEVICE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the DEVICE_TYPE_CONCEPT_ID field in the DEVICE_EXPOSURE table.' as check_description
# MAGIC  ,'DEVICE_EXPOSURE' as cdm_table_name
# MAGIC  ,'DEVICE_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_device_exposure_device_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DEVICE_EXPOSURE.DEVICE_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.DEVICE_TYPE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the DRUG_CONCEPT_ID field in the DOSE_ERA table.' as check_description
# MAGIC  ,'DOSE_ERA' as cdm_table_name
# MAGIC  ,'DRUG_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_dose_era_drug_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DOSE_ERA.DRUG_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DOSE_ERA cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.DRUG_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DOSE_ERA cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the UNIT_CONCEPT_ID field in the DOSE_ERA table.' as check_description
# MAGIC  ,'DOSE_ERA' as cdm_table_name
# MAGIC  ,'UNIT_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_dose_era_unit_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DOSE_ERA.UNIT_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DOSE_ERA cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.UNIT_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DOSE_ERA cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the DRUG_CONCEPT_ID field in the DRUG_ERA table.' as check_description
# MAGIC  ,'DRUG_ERA' as cdm_table_name
# MAGIC  ,'DRUG_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_drug_era_drug_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DRUG_ERA.DRUG_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_ERA cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.DRUG_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_ERA cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the DRUG_CONCEPT_ID field in the DRUG_EXPOSURE table.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'DRUG_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_drug_exposure_drug_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DRUG_EXPOSURE.DRUG_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.DRUG_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the DRUG_TYPE_CONCEPT_ID field in the DRUG_EXPOSURE table.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'DRUG_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_drug_exposure_drug_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DRUG_EXPOSURE.DRUG_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.DRUG_TYPE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the ROUTE_CONCEPT_ID field in the DRUG_EXPOSURE table.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'ROUTE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_drug_exposure_route_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DRUG_EXPOSURE.ROUTE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.ROUTE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the MEASUREMENT_CONCEPT_ID field in the MEASUREMENT table.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'MEASUREMENT_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_measurement_measurement_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'MEASUREMENT.MEASUREMENT_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.MEASUREMENT_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the MEASUREMENT_TYPE_CONCEPT_ID field in the MEASUREMENT table.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'MEASUREMENT_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_measurement_measurement_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'MEASUREMENT.MEASUREMENT_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.MEASUREMENT_TYPE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the OPERATOR_CONCEPT_ID field in the MEASUREMENT table.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'OPERATOR_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_measurement_operator_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'MEASUREMENT.OPERATOR_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.OPERATOR_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the UNIT_CONCEPT_ID field in the MEASUREMENT table.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'UNIT_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_measurement_unit_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'MEASUREMENT.UNIT_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.UNIT_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the NOTE_TYPE_CONCEPT_ID field in the NOTE table.' as check_description
# MAGIC  ,'NOTE' as cdm_table_name
# MAGIC  ,'NOTE_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_note_note_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'NOTE.NOTE_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.NOTE_TYPE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the NOTE_CLASS_CONCEPT_ID field in the NOTE table.' as check_description
# MAGIC  ,'NOTE' as cdm_table_name
# MAGIC  ,'NOTE_CLASS_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_note_note_class_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'NOTE.NOTE_CLASS_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.NOTE_CLASS_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the ENCODING_CONCEPT_ID field in the NOTE table.' as check_description
# MAGIC  ,'NOTE' as cdm_table_name
# MAGIC  ,'ENCODING_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_note_encoding_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'NOTE.ENCODING_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.ENCODING_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the LANGUAGE_CONCEPT_ID field in the NOTE table.' as check_description
# MAGIC  ,'NOTE' as cdm_table_name
# MAGIC  ,'LANGUAGE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_note_language_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'NOTE.LANGUAGE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.LANGUAGE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the SECTION_CONCEPT_ID field in the NOTE_NLP table.' as check_description
# MAGIC  ,'NOTE_NLP' as cdm_table_name
# MAGIC  ,'SECTION_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_note_nlp_section_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'NOTE_NLP.SECTION_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE_NLP cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.SECTION_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE_NLP cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the NOTE_NLP_CONCEPT_ID field in the NOTE_NLP table.' as check_description
# MAGIC  ,'NOTE_NLP' as cdm_table_name
# MAGIC  ,'NOTE_NLP_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_note_nlp_note_nlp_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'NOTE_NLP.NOTE_NLP_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE_NLP cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.NOTE_NLP_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE_NLP cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the OBSERVATION_CONCEPT_ID field in the OBSERVATION table.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'OBSERVATION_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_observation_observation_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'OBSERVATION.OBSERVATION_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.OBSERVATION_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the OBSERVATION_TYPE_CONCEPT_ID field in the OBSERVATION table.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'OBSERVATION_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_observation_observation_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'OBSERVATION.OBSERVATION_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.OBSERVATION_TYPE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the QUALIFIER_CONCEPT_ID field in the OBSERVATION table.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'QUALIFIER_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_observation_qualifier_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'OBSERVATION.QUALIFIER_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.QUALIFIER_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the UNIT_CONCEPT_ID field in the OBSERVATION table.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'UNIT_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_observation_unit_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'OBSERVATION.UNIT_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.UNIT_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the PERIOD_TYPE_CONCEPT_ID field in the OBSERVATION_PERIOD table.' as check_description
# MAGIC  ,'OBSERVATION_PERIOD' as cdm_table_name
# MAGIC  ,'PERIOD_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_observation_period_period_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'OBSERVATION_PERIOD.PERIOD_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION_PERIOD cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.PERIOD_TYPE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION_PERIOD cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the GENDER_CONCEPT_ID field in the PERSON table.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'GENDER_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_person_gender_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PERSON.GENDER_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.GENDER_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the RACE_CONCEPT_ID field in the PERSON table.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'RACE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_person_race_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PERSON.RACE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.RACE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the ETHNICITY_CONCEPT_ID field in the PERSON table.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'ETHNICITY_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_person_ethnicity_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PERSON.ETHNICITY_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.ETHNICITY_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the PROCEDURE_CONCEPT_ID field in the PROCEDURE_OCCURRENCE table.' as check_description
# MAGIC  ,'PROCEDURE_OCCURRENCE' as cdm_table_name
# MAGIC  ,'PROCEDURE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_procedure_occurrence_procedure_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PROCEDURE_OCCURRENCE.PROCEDURE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.PROCEDURE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the PROCEDURE_TYPE_CONCEPT_ID field in the PROCEDURE_OCCURRENCE table.' as check_description
# MAGIC  ,'PROCEDURE_OCCURRENCE' as cdm_table_name
# MAGIC  ,'PROCEDURE_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_procedure_occurrence_procedure_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PROCEDURE_OCCURRENCE.PROCEDURE_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.PROCEDURE_TYPE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the MODIFIER_CONCEPT_ID field in the PROCEDURE_OCCURRENCE table.' as check_description
# MAGIC  ,'PROCEDURE_OCCURRENCE' as cdm_table_name
# MAGIC  ,'MODIFIER_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_procedure_occurrence_modifier_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PROCEDURE_OCCURRENCE.MODIFIER_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.MODIFIER_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the SPECIALTY_CONCEPT_ID field in the PROVIDER table.' as check_description
# MAGIC  ,'PROVIDER' as cdm_table_name
# MAGIC  ,'SPECIALTY_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_provider_specialty_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PROVIDER.SPECIALTY_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROVIDER cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.SPECIALTY_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROVIDER cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the GENDER_CONCEPT_ID field in the PROVIDER table.' as check_description
# MAGIC  ,'PROVIDER' as cdm_table_name
# MAGIC  ,'GENDER_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_provider_gender_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PROVIDER.GENDER_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROVIDER cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.GENDER_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROVIDER cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the SPECIMEN_CONCEPT_ID field in the SPECIMEN table.' as check_description
# MAGIC  ,'SPECIMEN' as cdm_table_name
# MAGIC  ,'SPECIMEN_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_specimen_specimen_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'SPECIMEN.SPECIMEN_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.SPECIMEN_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the SPECIMEN_TYPE_CONCEPT_ID field in the SPECIMEN table.' as check_description
# MAGIC  ,'SPECIMEN' as cdm_table_name
# MAGIC  ,'SPECIMEN_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_specimen_specimen_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'SPECIMEN.SPECIMEN_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.SPECIMEN_TYPE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the UNIT_CONCEPT_ID field in the SPECIMEN table.' as check_description
# MAGIC  ,'SPECIMEN' as cdm_table_name
# MAGIC  ,'UNIT_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_specimen_unit_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'SPECIMEN.UNIT_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.UNIT_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the ANATOMIC_SITE_CONCEPT_ID field in the SPECIMEN table.' as check_description
# MAGIC  ,'SPECIMEN' as cdm_table_name
# MAGIC  ,'ANATOMIC_SITE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_specimen_anatomic_site_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'SPECIMEN.ANATOMIC_SITE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.ANATOMIC_SITE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the DISEASE_STATUS_CONCEPT_ID field in the SPECIMEN table.' as check_description
# MAGIC  ,'SPECIMEN' as cdm_table_name
# MAGIC  ,'DISEASE_STATUS_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_specimen_disease_status_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'SPECIMEN.DISEASE_STATUS_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.DISEASE_STATUS_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the VISIT_DETAIL_CONCEPT_ID field in the VISIT_DETAIL table.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'VISIT_DETAIL_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_visit_detail_visit_detail_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_DETAIL.VISIT_DETAIL_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.VISIT_DETAIL_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the VISIT_DETAIL_TYPE_CONCEPT_ID field in the VISIT_DETAIL table.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'VISIT_DETAIL_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_visit_detail_visit_detail_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_DETAIL.VISIT_DETAIL_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.VISIT_DETAIL_TYPE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the admitted_from_concept_id field in the VISIT_DETAIL table.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'admitted_from_concept_id' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_visit_detail_admitted_from_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_DETAIL.admitted_from_concept_id' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.admitted_from_concept_id = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the DISCHARGED_TO_CONCEPT_ID field in the VISIT_DETAIL table.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'DISCHARGED_TO_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_visit_detail_DISCHARGED_TO_CONCEPT_ID' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_DETAIL.DISCHARGED_TO_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.DISCHARGED_TO_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the VISIT_CONCEPT_ID field in the VISIT_OCCURRENCE table.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'VISIT_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_visit_occurrence_visit_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_OCCURRENCE.VISIT_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.VISIT_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the VISIT_TYPE_CONCEPT_ID field in the VISIT_OCCURRENCE table.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'VISIT_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_visit_occurrence_visit_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_OCCURRENCE.VISIT_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.VISIT_TYPE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the admitted_from_concept_id field in the VISIT_OCCURRENCE table.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'admitted_from_concept_id' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_visit_occurrence_admitted_from_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_OCCURRENCE.admitted_from_concept_id' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.admitted_from_concept_id = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isStandardValidConcept' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that do not have a standard, valid concept in the DISCHARGED_TO_CONCEPT_ID field in the VISIT_OCCURRENCE table.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'DISCHARGED_TO_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_is_standard_valid_concept.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isstandardvalidconcept_visit_occurrence_DISCHARGED_TO_CONCEPT_ID' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM
# MAGIC  (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_OCCURRENCE.DISCHARGED_TO_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  JOIN ${omop_catalog}.${omop_schema}.concept co 
# MAGIC  ON cdmTable.DISCHARGED_TO_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND (co.standard_concept != 'S' OR co.invalid_reason IS NOT NULL)
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte
# MAGIC )
# MAGIC INSERT INTO ${results_catalog}.${results_schema}.dqdashboard_results
# MAGIC SELECT *
# MAGIC FROM cte_all;
# MAGIC

# COMMAND ----------

# MAGIC %sql
# MAGIC -- field is foreign key
# MAGIC
# MAGIC WITH cte_all  AS (SELECT cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  , CAST('' as STRING) as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PLACE_OF_SERVICE_CONCEPT_ID field in the CARE_SITE table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'CARE_SITE' as cdm_table_name
# MAGIC  ,'PLACE_OF_SERVICE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_care_site_place_of_service_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'CARE_SITE.PLACE_OF_SERVICE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CARE_SITE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.PLACE_OF_SERVICE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.PLACE_OF_SERVICE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CARE_SITE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the LOCATION_ID field in the CARE_SITE table that does not exist in the LOCATION table.' as check_description
# MAGIC  ,'CARE_SITE' as cdm_table_name
# MAGIC  ,'LOCATION_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_care_site_location_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'CARE_SITE.LOCATION_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CARE_SITE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.LOCATION fkTable 
# MAGIC  ON cdmTable.LOCATION_ID = fkTable.LOCATION_ID
# MAGIC  WHERE fkTable.LOCATION_ID IS NULL 
# MAGIC  AND cdmTable.LOCATION_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CARE_SITE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PERSON_ID field in the CONDITION_ERA table that does not exist in the PERSON table.' as check_description
# MAGIC  ,'CONDITION_ERA' as cdm_table_name
# MAGIC  ,'PERSON_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_condition_era_person_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'CONDITION_ERA.PERSON_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_ERA cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.PERSON fkTable 
# MAGIC  ON cdmTable.PERSON_ID = fkTable.PERSON_ID
# MAGIC  WHERE fkTable.PERSON_ID IS NULL 
# MAGIC  AND cdmTable.PERSON_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_ERA cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the CONDITION_CONCEPT_ID field in the CONDITION_ERA table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'CONDITION_ERA' as cdm_table_name
# MAGIC  ,'CONDITION_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_condition_era_condition_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'CONDITION_ERA.CONDITION_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_ERA cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.CONDITION_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.CONDITION_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_ERA cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PERSON_ID field in the CONDITION_OCCURRENCE table that does not exist in the PERSON table.' as check_description
# MAGIC  ,'CONDITION_OCCURRENCE' as cdm_table_name
# MAGIC  ,'PERSON_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_condition_occurrence_person_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'CONDITION_OCCURRENCE.PERSON_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.PERSON fkTable 
# MAGIC  ON cdmTable.PERSON_ID = fkTable.PERSON_ID
# MAGIC  WHERE fkTable.PERSON_ID IS NULL 
# MAGIC  AND cdmTable.PERSON_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the CONDITION_CONCEPT_ID field in the CONDITION_OCCURRENCE table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'CONDITION_OCCURRENCE' as cdm_table_name
# MAGIC  ,'CONDITION_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_condition_occurrence_condition_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'CONDITION_OCCURRENCE.CONDITION_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.CONDITION_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.CONDITION_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the CONDITION_TYPE_CONCEPT_ID field in the CONDITION_OCCURRENCE table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'CONDITION_OCCURRENCE' as cdm_table_name
# MAGIC  ,'CONDITION_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_condition_occurrence_condition_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'CONDITION_OCCURRENCE.CONDITION_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.CONDITION_TYPE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.CONDITION_TYPE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the CONDITION_STATUS_CONCEPT_ID field in the CONDITION_OCCURRENCE table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'CONDITION_OCCURRENCE' as cdm_table_name
# MAGIC  ,'CONDITION_STATUS_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_condition_occurrence_condition_status_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'CONDITION_OCCURRENCE.CONDITION_STATUS_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.CONDITION_STATUS_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.CONDITION_STATUS_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PROVIDER_ID field in the CONDITION_OCCURRENCE table that does not exist in the PROVIDER table.' as check_description
# MAGIC  ,'CONDITION_OCCURRENCE' as cdm_table_name
# MAGIC  ,'PROVIDER_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_condition_occurrence_provider_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'CONDITION_OCCURRENCE.PROVIDER_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.PROVIDER fkTable 
# MAGIC  ON cdmTable.PROVIDER_ID = fkTable.PROVIDER_ID
# MAGIC  WHERE fkTable.PROVIDER_ID IS NULL 
# MAGIC  AND cdmTable.PROVIDER_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the VISIT_OCCURRENCE_ID field in the CONDITION_OCCURRENCE table that does not exist in the VISIT_OCCURRENCE table.' as check_description
# MAGIC  ,'CONDITION_OCCURRENCE' as cdm_table_name
# MAGIC  ,'VISIT_OCCURRENCE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_condition_occurrence_visit_occurrence_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'CONDITION_OCCURRENCE.VISIT_OCCURRENCE_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE fkTable 
# MAGIC  ON cdmTable.VISIT_OCCURRENCE_ID = fkTable.VISIT_OCCURRENCE_ID
# MAGIC  WHERE fkTable.VISIT_OCCURRENCE_ID IS NULL 
# MAGIC  AND cdmTable.VISIT_OCCURRENCE_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the VISIT_DETAIL_ID field in the CONDITION_OCCURRENCE table that does not exist in the VISIT_DETAIL table.' as check_description
# MAGIC  ,'CONDITION_OCCURRENCE' as cdm_table_name
# MAGIC  ,'VISIT_DETAIL_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_condition_occurrence_visit_detail_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'CONDITION_OCCURRENCE.VISIT_DETAIL_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.VISIT_DETAIL fkTable 
# MAGIC  ON cdmTable.VISIT_DETAIL_ID = fkTable.VISIT_DETAIL_ID
# MAGIC  WHERE fkTable.VISIT_DETAIL_ID IS NULL 
# MAGIC  AND cdmTable.VISIT_DETAIL_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the CONDITION_SOURCE_CONCEPT_ID field in the CONDITION_OCCURRENCE table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'CONDITION_OCCURRENCE' as cdm_table_name
# MAGIC  ,'CONDITION_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_condition_occurrence_condition_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'CONDITION_OCCURRENCE.CONDITION_SOURCE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.CONDITION_SOURCE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.CONDITION_SOURCE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the COST_DOMAIN_ID field in the COST table that does not exist in the DOMAIN table.' as check_description
# MAGIC  ,'COST' as cdm_table_name
# MAGIC  ,'COST_DOMAIN_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_cost_cost_domain_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'COST.COST_DOMAIN_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.DOMAIN fkTable
# MAGIC  ON cdmTable.COST_DOMAIN_ID = fkTable.DOMAIN_ID
# MAGIC  WHERE fkTable.DOMAIN_ID IS NULL 
# MAGIC  AND cdmTable.COST_DOMAIN_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the COST_TYPE_CONCEPT_ID field in the COST table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'COST' as cdm_table_name
# MAGIC  ,'COST_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_cost_cost_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'COST.COST_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.COST_TYPE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.COST_TYPE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the CURRENCY_CONCEPT_ID field in the COST table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'COST' as cdm_table_name
# MAGIC  ,'CURRENCY_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_cost_currency_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'COST.CURRENCY_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.CURRENCY_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.CURRENCY_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PAYER_PLAN_PERIOD_ID field in the COST table that does not exist in the PAYER_PLAN_PERIOD table.' as check_description
# MAGIC  ,'COST' as cdm_table_name
# MAGIC  ,'PAYER_PLAN_PERIOD_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_cost_payer_plan_period_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'COST.PAYER_PLAN_PERIOD_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD fkTable 
# MAGIC  ON cdmTable.PAYER_PLAN_PERIOD_ID = fkTable.PAYER_PLAN_PERIOD_ID
# MAGIC  WHERE fkTable.PAYER_PLAN_PERIOD_ID IS NULL 
# MAGIC  AND cdmTable.PAYER_PLAN_PERIOD_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the REVENUE_CODE_CONCEPT_ID field in the COST table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'COST' as cdm_table_name
# MAGIC  ,'REVENUE_CODE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_cost_revenue_code_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'COST.REVENUE_CODE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.REVENUE_CODE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.REVENUE_CODE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the DRG_CONCEPT_ID field in the COST table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'COST' as cdm_table_name
# MAGIC  ,'DRG_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_cost_drg_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'COST.DRG_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.DRG_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.DRG_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the CAUSE_CONCEPT_ID field in the DEATH table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'DEATH' as cdm_table_name
# MAGIC  ,'CAUSE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_death_cause_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DEATH.CAUSE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEATH cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.CAUSE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.CAUSE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEATH cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the CAUSE_SOURCE_CONCEPT_ID field in the DEATH table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'DEATH' as cdm_table_name
# MAGIC  ,'CAUSE_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_death_cause_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DEATH.CAUSE_SOURCE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEATH cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.CAUSE_SOURCE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.CAUSE_SOURCE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEATH cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the DEATH_TYPE_CONCEPT_ID field in the DEATH table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'DEATH' as cdm_table_name
# MAGIC  ,'DEATH_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_death_death_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DEATH.DEATH_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEATH cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.DEATH_TYPE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.DEATH_TYPE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEATH cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PERSON_ID field in the DEATH table that does not exist in the PERSON table.' as check_description
# MAGIC  ,'DEATH' as cdm_table_name
# MAGIC  ,'PERSON_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_death_person_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DEATH.PERSON_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEATH cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.PERSON fkTable 
# MAGIC  ON cdmTable.PERSON_ID = fkTable.PERSON_ID
# MAGIC  WHERE fkTable.PERSON_ID IS NULL 
# MAGIC  AND cdmTable.PERSON_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEATH cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PERSON_ID field in the DEVICE_EXPOSURE table that does not exist in the PERSON table.' as check_description
# MAGIC  ,'DEVICE_EXPOSURE' as cdm_table_name
# MAGIC  ,'PERSON_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_device_exposure_person_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DEVICE_EXPOSURE.PERSON_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.PERSON fkTable 
# MAGIC  ON cdmTable.PERSON_ID = fkTable.PERSON_ID
# MAGIC  WHERE fkTable.PERSON_ID IS NULL 
# MAGIC  AND cdmTable.PERSON_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the DEVICE_CONCEPT_ID field in the DEVICE_EXPOSURE table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'DEVICE_EXPOSURE' as cdm_table_name
# MAGIC  ,'DEVICE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_device_exposure_device_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DEVICE_EXPOSURE.DEVICE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.DEVICE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.DEVICE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the DEVICE_TYPE_CONCEPT_ID field in the DEVICE_EXPOSURE table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'DEVICE_EXPOSURE' as cdm_table_name
# MAGIC  ,'DEVICE_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_device_exposure_device_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DEVICE_EXPOSURE.DEVICE_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.DEVICE_TYPE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.DEVICE_TYPE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PROVIDER_ID field in the DEVICE_EXPOSURE table that does not exist in the PROVIDER table.' as check_description
# MAGIC  ,'DEVICE_EXPOSURE' as cdm_table_name
# MAGIC  ,'PROVIDER_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_device_exposure_provider_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DEVICE_EXPOSURE.PROVIDER_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.PROVIDER fkTable 
# MAGIC  ON cdmTable.PROVIDER_ID = fkTable.PROVIDER_ID
# MAGIC  WHERE fkTable.PROVIDER_ID IS NULL 
# MAGIC  AND cdmTable.PROVIDER_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the VISIT_OCCURRENCE_ID field in the DEVICE_EXPOSURE table that does not exist in the VISIT_OCCURRENCE table.' as check_description
# MAGIC  ,'DEVICE_EXPOSURE' as cdm_table_name
# MAGIC  ,'VISIT_OCCURRENCE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_device_exposure_visit_occurrence_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DEVICE_EXPOSURE.VISIT_OCCURRENCE_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE fkTable 
# MAGIC  ON cdmTable.VISIT_OCCURRENCE_ID = fkTable.VISIT_OCCURRENCE_ID
# MAGIC  WHERE fkTable.VISIT_OCCURRENCE_ID IS NULL 
# MAGIC  AND cdmTable.VISIT_OCCURRENCE_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the VISIT_DETAIL_ID field in the DEVICE_EXPOSURE table that does not exist in the VISIT_DETAIL table.' as check_description
# MAGIC  ,'DEVICE_EXPOSURE' as cdm_table_name
# MAGIC  ,'VISIT_DETAIL_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_device_exposure_visit_detail_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DEVICE_EXPOSURE.VISIT_DETAIL_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.VISIT_DETAIL fkTable 
# MAGIC  ON cdmTable.VISIT_DETAIL_ID = fkTable.VISIT_DETAIL_ID
# MAGIC  WHERE fkTable.VISIT_DETAIL_ID IS NULL 
# MAGIC  AND cdmTable.VISIT_DETAIL_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the DEVICE_SOURCE_CONCEPT_ID field in the DEVICE_EXPOSURE table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'DEVICE_EXPOSURE' as cdm_table_name
# MAGIC  ,'DEVICE_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_device_exposure_device_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DEVICE_EXPOSURE.DEVICE_SOURCE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.DEVICE_SOURCE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.DEVICE_SOURCE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PERSON_ID field in the DOSE_ERA table that does not exist in the PERSON table.' as check_description
# MAGIC  ,'DOSE_ERA' as cdm_table_name
# MAGIC  ,'PERSON_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_dose_era_person_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DOSE_ERA.PERSON_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DOSE_ERA cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.PERSON fkTable 
# MAGIC  ON cdmTable.PERSON_ID = fkTable.PERSON_ID
# MAGIC  WHERE fkTable.PERSON_ID IS NULL 
# MAGIC  AND cdmTable.PERSON_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DOSE_ERA cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the DRUG_CONCEPT_ID field in the DOSE_ERA table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'DOSE_ERA' as cdm_table_name
# MAGIC  ,'DRUG_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_dose_era_drug_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DOSE_ERA.DRUG_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DOSE_ERA cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.DRUG_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.DRUG_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DOSE_ERA cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the UNIT_CONCEPT_ID field in the DOSE_ERA table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'DOSE_ERA' as cdm_table_name
# MAGIC  ,'UNIT_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_dose_era_unit_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DOSE_ERA.UNIT_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DOSE_ERA cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.UNIT_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.UNIT_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DOSE_ERA cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PERSON_ID field in the DRUG_ERA table that does not exist in the PERSON table.' as check_description
# MAGIC  ,'DRUG_ERA' as cdm_table_name
# MAGIC  ,'PERSON_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_drug_era_person_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DRUG_ERA.PERSON_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_ERA cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.PERSON fkTable 
# MAGIC  ON cdmTable.PERSON_ID = fkTable.PERSON_ID
# MAGIC  WHERE fkTable.PERSON_ID IS NULL 
# MAGIC  AND cdmTable.PERSON_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_ERA cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the DRUG_CONCEPT_ID field in the DRUG_ERA table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'DRUG_ERA' as cdm_table_name
# MAGIC  ,'DRUG_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_drug_era_drug_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DRUG_ERA.DRUG_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_ERA cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.DRUG_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.DRUG_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_ERA cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PERSON_ID field in the DRUG_EXPOSURE table that does not exist in the PERSON table.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'PERSON_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_drug_exposure_person_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DRUG_EXPOSURE.PERSON_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.PERSON fkTable 
# MAGIC  ON cdmTable.PERSON_ID = fkTable.PERSON_ID
# MAGIC  WHERE fkTable.PERSON_ID IS NULL 
# MAGIC  AND cdmTable.PERSON_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the DRUG_CONCEPT_ID field in the DRUG_EXPOSURE table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'DRUG_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_drug_exposure_drug_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DRUG_EXPOSURE.DRUG_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.DRUG_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.DRUG_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the DRUG_TYPE_CONCEPT_ID field in the DRUG_EXPOSURE table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'DRUG_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_drug_exposure_drug_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DRUG_EXPOSURE.DRUG_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.DRUG_TYPE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.DRUG_TYPE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the ROUTE_CONCEPT_ID field in the DRUG_EXPOSURE table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'ROUTE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_drug_exposure_route_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DRUG_EXPOSURE.ROUTE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.ROUTE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.ROUTE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PROVIDER_ID field in the DRUG_EXPOSURE table that does not exist in the PROVIDER table.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'PROVIDER_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_drug_exposure_provider_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DRUG_EXPOSURE.PROVIDER_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.PROVIDER fkTable 
# MAGIC  ON cdmTable.PROVIDER_ID = fkTable.PROVIDER_ID
# MAGIC  WHERE fkTable.PROVIDER_ID IS NULL 
# MAGIC  AND cdmTable.PROVIDER_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the VISIT_OCCURRENCE_ID field in the DRUG_EXPOSURE table that does not exist in the VISIT_OCCURRENCE table.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'VISIT_OCCURRENCE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_drug_exposure_visit_occurrence_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DRUG_EXPOSURE.VISIT_OCCURRENCE_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE fkTable 
# MAGIC  ON cdmTable.VISIT_OCCURRENCE_ID = fkTable.VISIT_OCCURRENCE_ID
# MAGIC  WHERE fkTable.VISIT_OCCURRENCE_ID IS NULL 
# MAGIC  AND cdmTable.VISIT_OCCURRENCE_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the VISIT_DETAIL_ID field in the DRUG_EXPOSURE table that does not exist in the VISIT_DETAIL table.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'VISIT_DETAIL_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_drug_exposure_visit_detail_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DRUG_EXPOSURE.VISIT_DETAIL_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.VISIT_DETAIL fkTable 
# MAGIC  ON cdmTable.VISIT_DETAIL_ID = fkTable.VISIT_DETAIL_ID
# MAGIC  WHERE fkTable.VISIT_DETAIL_ID IS NULL 
# MAGIC  AND cdmTable.VISIT_DETAIL_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the DRUG_SOURCE_CONCEPT_ID field in the DRUG_EXPOSURE table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'DRUG_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_drug_exposure_drug_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DRUG_EXPOSURE.DRUG_SOURCE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.DRUG_SOURCE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.DRUG_SOURCE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the DOMAIN_CONCEPT_ID_1 field in the FACT_RELATIONSHIP table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'FACT_RELATIONSHIP' as cdm_table_name
# MAGIC  ,'DOMAIN_CONCEPT_ID_1' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_fact_relationship_domain_concept_id_1' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'FACT_RELATIONSHIP.DOMAIN_CONCEPT_ID_1' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.FACT_RELATIONSHIP cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.DOMAIN_CONCEPT_ID_1 = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.DOMAIN_CONCEPT_ID_1 IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.FACT_RELATIONSHIP cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the DOMAIN_CONCEPT_ID_2 field in the FACT_RELATIONSHIP table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'FACT_RELATIONSHIP' as cdm_table_name
# MAGIC  ,'DOMAIN_CONCEPT_ID_2' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_fact_relationship_domain_concept_id_2' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'FACT_RELATIONSHIP.DOMAIN_CONCEPT_ID_2' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.FACT_RELATIONSHIP cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.DOMAIN_CONCEPT_ID_2 = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.DOMAIN_CONCEPT_ID_2 IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.FACT_RELATIONSHIP cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the RELATIONSHIP_CONCEPT_ID field in the FACT_RELATIONSHIP table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'FACT_RELATIONSHIP' as cdm_table_name
# MAGIC  ,'RELATIONSHIP_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_fact_relationship_relationship_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'FACT_RELATIONSHIP.RELATIONSHIP_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.FACT_RELATIONSHIP cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.RELATIONSHIP_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.RELATIONSHIP_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.FACT_RELATIONSHIP cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PERSON_ID field in the MEASUREMENT table that does not exist in the PERSON table.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'PERSON_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_measurement_person_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'MEASUREMENT.PERSON_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.PERSON fkTable 
# MAGIC  ON cdmTable.PERSON_ID = fkTable.PERSON_ID
# MAGIC  WHERE fkTable.PERSON_ID IS NULL 
# MAGIC  AND cdmTable.PERSON_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the MEASUREMENT_CONCEPT_ID field in the MEASUREMENT table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'MEASUREMENT_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_measurement_measurement_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'MEASUREMENT.MEASUREMENT_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.MEASUREMENT_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.MEASUREMENT_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the MEASUREMENT_TYPE_CONCEPT_ID field in the MEASUREMENT table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'MEASUREMENT_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_measurement_measurement_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'MEASUREMENT.MEASUREMENT_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.MEASUREMENT_TYPE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.MEASUREMENT_TYPE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the OPERATOR_CONCEPT_ID field in the MEASUREMENT table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'OPERATOR_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_measurement_operator_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'MEASUREMENT.OPERATOR_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.OPERATOR_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.OPERATOR_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the VALUE_AS_CONCEPT_ID field in the MEASUREMENT table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'VALUE_AS_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_measurement_value_as_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'MEASUREMENT.VALUE_AS_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.VALUE_AS_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.VALUE_AS_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the UNIT_CONCEPT_ID field in the MEASUREMENT table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'UNIT_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_measurement_unit_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'MEASUREMENT.UNIT_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.UNIT_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.UNIT_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PROVIDER_ID field in the MEASUREMENT table that does not exist in the PROVIDER table.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'PROVIDER_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_measurement_provider_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'MEASUREMENT.PROVIDER_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.PROVIDER fkTable 
# MAGIC  ON cdmTable.PROVIDER_ID = fkTable.PROVIDER_ID
# MAGIC  WHERE fkTable.PROVIDER_ID IS NULL 
# MAGIC  AND cdmTable.PROVIDER_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the VISIT_OCCURRENCE_ID field in the MEASUREMENT table that does not exist in the VISIT_OCCURRENCE table.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'VISIT_OCCURRENCE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_measurement_visit_occurrence_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'MEASUREMENT.VISIT_OCCURRENCE_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE fkTable 
# MAGIC  ON cdmTable.VISIT_OCCURRENCE_ID = fkTable.VISIT_OCCURRENCE_ID
# MAGIC  WHERE fkTable.VISIT_OCCURRENCE_ID IS NULL 
# MAGIC  AND cdmTable.VISIT_OCCURRENCE_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the VISIT_DETAIL_ID field in the MEASUREMENT table that does not exist in the VISIT_DETAIL table.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'VISIT_DETAIL_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_measurement_visit_detail_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'MEASUREMENT.VISIT_DETAIL_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.VISIT_DETAIL fkTable 
# MAGIC  ON cdmTable.VISIT_DETAIL_ID = fkTable.VISIT_DETAIL_ID
# MAGIC  WHERE fkTable.VISIT_DETAIL_ID IS NULL 
# MAGIC  AND cdmTable.VISIT_DETAIL_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the MEASUREMENT_SOURCE_CONCEPT_ID field in the MEASUREMENT table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'MEASUREMENT_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_measurement_measurement_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'MEASUREMENT.MEASUREMENT_SOURCE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.MEASUREMENT_SOURCE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.MEASUREMENT_SOURCE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PERSON_ID field in the NOTE table that does not exist in the PERSON table.' as check_description
# MAGIC  ,'NOTE' as cdm_table_name
# MAGIC  ,'PERSON_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_note_person_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'NOTE.PERSON_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.PERSON fkTable 
# MAGIC  ON cdmTable.PERSON_ID = fkTable.PERSON_ID
# MAGIC  WHERE fkTable.PERSON_ID IS NULL 
# MAGIC  AND cdmTable.PERSON_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the NOTE_TYPE_CONCEPT_ID field in the NOTE table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'NOTE' as cdm_table_name
# MAGIC  ,'NOTE_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_note_note_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'NOTE.NOTE_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.NOTE_TYPE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.NOTE_TYPE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the NOTE_CLASS_CONCEPT_ID field in the NOTE table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'NOTE' as cdm_table_name
# MAGIC  ,'NOTE_CLASS_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_note_note_class_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'NOTE.NOTE_CLASS_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.NOTE_CLASS_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.NOTE_CLASS_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the ENCODING_CONCEPT_ID field in the NOTE table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'NOTE' as cdm_table_name
# MAGIC  ,'ENCODING_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_note_encoding_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'NOTE.ENCODING_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.ENCODING_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.ENCODING_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the LANGUAGE_CONCEPT_ID field in the NOTE table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'NOTE' as cdm_table_name
# MAGIC  ,'LANGUAGE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_note_language_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'NOTE.LANGUAGE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.LANGUAGE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.LANGUAGE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PROVIDER_ID field in the NOTE table that does not exist in the PROVIDER table.' as check_description
# MAGIC  ,'NOTE' as cdm_table_name
# MAGIC  ,'PROVIDER_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_note_provider_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'NOTE.PROVIDER_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.PROVIDER fkTable 
# MAGIC  ON cdmTable.PROVIDER_ID = fkTable.PROVIDER_ID
# MAGIC  WHERE fkTable.PROVIDER_ID IS NULL 
# MAGIC  AND cdmTable.PROVIDER_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the VISIT_OCCURRENCE_ID field in the NOTE table that does not exist in the VISIT_OCCURRENCE table.' as check_description
# MAGIC  ,'NOTE' as cdm_table_name
# MAGIC  ,'VISIT_OCCURRENCE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_note_visit_occurrence_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'NOTE.VISIT_OCCURRENCE_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE fkTable 
# MAGIC  ON cdmTable.VISIT_OCCURRENCE_ID = fkTable.VISIT_OCCURRENCE_ID
# MAGIC  WHERE fkTable.VISIT_OCCURRENCE_ID IS NULL 
# MAGIC  AND cdmTable.VISIT_OCCURRENCE_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the VISIT_DETAIL_ID field in the NOTE table that does not exist in the VISIT_DETAIL table.' as check_description
# MAGIC  ,'NOTE' as cdm_table_name
# MAGIC  ,'VISIT_DETAIL_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_note_visit_detail_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'NOTE.VISIT_DETAIL_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.VISIT_DETAIL fkTable 
# MAGIC  ON cdmTable.VISIT_DETAIL_ID = fkTable.VISIT_DETAIL_ID
# MAGIC  WHERE fkTable.VISIT_DETAIL_ID IS NULL 
# MAGIC  AND cdmTable.VISIT_DETAIL_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the NOTE_ID field in the NOTE_NLP table that does not exist in the NOTE table.' as check_description
# MAGIC  ,'NOTE_NLP' as cdm_table_name
# MAGIC  ,'NOTE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_note_nlp_note_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'NOTE_NLP.NOTE_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE_NLP cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.NOTE fkTable 
# MAGIC  ON cdmTable.NOTE_ID = fkTable.NOTE_ID
# MAGIC  WHERE fkTable.NOTE_ID IS NULL 
# MAGIC  AND cdmTable.NOTE_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE_NLP cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the SECTION_CONCEPT_ID field in the NOTE_NLP table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'NOTE_NLP' as cdm_table_name
# MAGIC  ,'SECTION_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_note_nlp_section_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'NOTE_NLP.SECTION_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE_NLP cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.SECTION_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.SECTION_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE_NLP cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the NOTE_NLP_CONCEPT_ID field in the NOTE_NLP table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'NOTE_NLP' as cdm_table_name
# MAGIC  ,'NOTE_NLP_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_note_nlp_note_nlp_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'NOTE_NLP.NOTE_NLP_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE_NLP cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.NOTE_NLP_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.NOTE_NLP_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE_NLP cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the NOTE_NLP_SOURCE_CONCEPT_ID field in the NOTE_NLP table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'NOTE_NLP' as cdm_table_name
# MAGIC  ,'NOTE_NLP_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_note_nlp_note_nlp_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'NOTE_NLP.NOTE_NLP_SOURCE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE_NLP cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.NOTE_NLP_SOURCE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.NOTE_NLP_SOURCE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE_NLP cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PERSON_ID field in the OBSERVATION table that does not exist in the PERSON table.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'PERSON_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_observation_person_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'OBSERVATION.PERSON_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.PERSON fkTable 
# MAGIC  ON cdmTable.PERSON_ID = fkTable.PERSON_ID
# MAGIC  WHERE fkTable.PERSON_ID IS NULL 
# MAGIC  AND cdmTable.PERSON_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the OBSERVATION_CONCEPT_ID field in the OBSERVATION table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'OBSERVATION_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_observation_observation_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'OBSERVATION.OBSERVATION_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.OBSERVATION_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.OBSERVATION_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the OBSERVATION_TYPE_CONCEPT_ID field in the OBSERVATION table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'OBSERVATION_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_observation_observation_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'OBSERVATION.OBSERVATION_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.OBSERVATION_TYPE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.OBSERVATION_TYPE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the VALUE_AS_CONCEPT_ID field in the OBSERVATION table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'VALUE_AS_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_observation_value_as_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'OBSERVATION.VALUE_AS_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.VALUE_AS_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.VALUE_AS_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the QUALIFIER_CONCEPT_ID field in the OBSERVATION table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'QUALIFIER_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_observation_qualifier_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'OBSERVATION.QUALIFIER_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.QUALIFIER_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.QUALIFIER_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the UNIT_CONCEPT_ID field in the OBSERVATION table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'UNIT_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_observation_unit_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'OBSERVATION.UNIT_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.UNIT_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.UNIT_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PROVIDER_ID field in the OBSERVATION table that does not exist in the PROVIDER table.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'PROVIDER_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_observation_provider_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'OBSERVATION.PROVIDER_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.PROVIDER fkTable 
# MAGIC  ON cdmTable.PROVIDER_ID = fkTable.PROVIDER_ID
# MAGIC  WHERE fkTable.PROVIDER_ID IS NULL 
# MAGIC  AND cdmTable.PROVIDER_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the VISIT_OCCURRENCE_ID field in the OBSERVATION table that does not exist in the VISIT_OCCURRENCE table.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'VISIT_OCCURRENCE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_observation_visit_occurrence_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'OBSERVATION.VISIT_OCCURRENCE_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE fkTable 
# MAGIC  ON cdmTable.VISIT_OCCURRENCE_ID = fkTable.VISIT_OCCURRENCE_ID
# MAGIC  WHERE fkTable.VISIT_OCCURRENCE_ID IS NULL 
# MAGIC  AND cdmTable.VISIT_OCCURRENCE_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the VISIT_DETAIL_ID field in the OBSERVATION table that does not exist in the VISIT_DETAIL table.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'VISIT_DETAIL_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_observation_visit_detail_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'OBSERVATION.VISIT_DETAIL_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.VISIT_DETAIL fkTable 
# MAGIC  ON cdmTable.VISIT_DETAIL_ID = fkTable.VISIT_DETAIL_ID
# MAGIC  WHERE fkTable.VISIT_DETAIL_ID IS NULL 
# MAGIC  AND cdmTable.VISIT_DETAIL_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the OBSERVATION_SOURCE_CONCEPT_ID field in the OBSERVATION table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'OBSERVATION_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_observation_observation_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'OBSERVATION.OBSERVATION_SOURCE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.OBSERVATION_SOURCE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.OBSERVATION_SOURCE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PERSON_ID field in the OBSERVATION_PERIOD table that does not exist in the PERSON table.' as check_description
# MAGIC  ,'OBSERVATION_PERIOD' as cdm_table_name
# MAGIC  ,'PERSON_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_observation_period_person_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'OBSERVATION_PERIOD.PERSON_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION_PERIOD cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.PERSON fkTable 
# MAGIC  ON cdmTable.PERSON_ID = fkTable.PERSON_ID
# MAGIC  WHERE fkTable.PERSON_ID IS NULL 
# MAGIC  AND cdmTable.PERSON_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION_PERIOD cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PERIOD_TYPE_CONCEPT_ID field in the OBSERVATION_PERIOD table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'OBSERVATION_PERIOD' as cdm_table_name
# MAGIC  ,'PERIOD_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_observation_period_period_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'OBSERVATION_PERIOD.PERIOD_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION_PERIOD cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.PERIOD_TYPE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.PERIOD_TYPE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION_PERIOD cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PERSON_ID field in the PAYER_PLAN_PERIOD table that does not exist in the PERSON table.' as check_description
# MAGIC  ,'PAYER_PLAN_PERIOD' as cdm_table_name
# MAGIC  ,'PERSON_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_payer_plan_period_person_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PAYER_PLAN_PERIOD.PERSON_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.PERSON fkTable 
# MAGIC  ON cdmTable.PERSON_ID = fkTable.PERSON_ID
# MAGIC  WHERE fkTable.PERSON_ID IS NULL 
# MAGIC  AND cdmTable.PERSON_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PAYER_CONCEPT_ID field in the PAYER_PLAN_PERIOD table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'PAYER_PLAN_PERIOD' as cdm_table_name
# MAGIC  ,'PAYER_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_payer_plan_period_payer_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PAYER_PLAN_PERIOD.PAYER_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.PAYER_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.PAYER_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PAYER_SOURCE_CONCEPT_ID field in the PAYER_PLAN_PERIOD table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'PAYER_PLAN_PERIOD' as cdm_table_name
# MAGIC  ,'PAYER_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_payer_plan_period_payer_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PAYER_PLAN_PERIOD.PAYER_SOURCE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.PAYER_SOURCE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.PAYER_SOURCE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PLAN_CONCEPT_ID field in the PAYER_PLAN_PERIOD table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'PAYER_PLAN_PERIOD' as cdm_table_name
# MAGIC  ,'PLAN_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_payer_plan_period_plan_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PAYER_PLAN_PERIOD.PLAN_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.PLAN_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.PLAN_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PLAN_SOURCE_CONCEPT_ID field in the PAYER_PLAN_PERIOD table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'PAYER_PLAN_PERIOD' as cdm_table_name
# MAGIC  ,'PLAN_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_payer_plan_period_plan_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PAYER_PLAN_PERIOD.PLAN_SOURCE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.PLAN_SOURCE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.PLAN_SOURCE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the SPONSOR_CONCEPT_ID field in the PAYER_PLAN_PERIOD table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'PAYER_PLAN_PERIOD' as cdm_table_name
# MAGIC  ,'SPONSOR_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_payer_plan_period_sponsor_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PAYER_PLAN_PERIOD.SPONSOR_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.SPONSOR_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.SPONSOR_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the SPONSOR_SOURCE_CONCEPT_ID field in the PAYER_PLAN_PERIOD table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'PAYER_PLAN_PERIOD' as cdm_table_name
# MAGIC  ,'SPONSOR_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_payer_plan_period_sponsor_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PAYER_PLAN_PERIOD.SPONSOR_SOURCE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.SPONSOR_SOURCE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.SPONSOR_SOURCE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the STOP_REASON_CONCEPT_ID field in the PAYER_PLAN_PERIOD table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'PAYER_PLAN_PERIOD' as cdm_table_name
# MAGIC  ,'STOP_REASON_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_payer_plan_period_stop_reason_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PAYER_PLAN_PERIOD.STOP_REASON_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.STOP_REASON_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.STOP_REASON_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the STOP_REASON_SOURCE_CONCEPT_ID field in the PAYER_PLAN_PERIOD table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'PAYER_PLAN_PERIOD' as cdm_table_name
# MAGIC  ,'STOP_REASON_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_payer_plan_period_stop_reason_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PAYER_PLAN_PERIOD.STOP_REASON_SOURCE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.STOP_REASON_SOURCE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.STOP_REASON_SOURCE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the GENDER_CONCEPT_ID field in the PERSON table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'GENDER_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_person_gender_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PERSON.GENDER_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.GENDER_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.GENDER_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the RACE_CONCEPT_ID field in the PERSON table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'RACE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_person_race_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PERSON.RACE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.RACE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.RACE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the ETHNICITY_CONCEPT_ID field in the PERSON table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'ETHNICITY_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_person_ethnicity_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PERSON.ETHNICITY_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.ETHNICITY_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.ETHNICITY_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the LOCATION_ID field in the PERSON table that does not exist in the LOCATION table.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'LOCATION_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_person_location_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PERSON.LOCATION_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.LOCATION fkTable 
# MAGIC  ON cdmTable.LOCATION_ID = fkTable.LOCATION_ID
# MAGIC  WHERE fkTable.LOCATION_ID IS NULL 
# MAGIC  AND cdmTable.LOCATION_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PROVIDER_ID field in the PERSON table that does not exist in the PROVIDER table.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'PROVIDER_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_person_provider_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PERSON.PROVIDER_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.PROVIDER fkTable 
# MAGIC  ON cdmTable.PROVIDER_ID = fkTable.PROVIDER_ID
# MAGIC  WHERE fkTable.PROVIDER_ID IS NULL 
# MAGIC  AND cdmTable.PROVIDER_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the CARE_SITE_ID field in the PERSON table that does not exist in the CARE_SITE table.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'CARE_SITE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_person_care_site_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PERSON.CARE_SITE_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CARE_SITE fkTable 
# MAGIC  ON cdmTable.CARE_SITE_ID = fkTable.CARE_SITE_ID
# MAGIC  WHERE fkTable.CARE_SITE_ID IS NULL 
# MAGIC  AND cdmTable.CARE_SITE_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the GENDER_SOURCE_CONCEPT_ID field in the PERSON table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'GENDER_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_person_gender_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PERSON.GENDER_SOURCE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.GENDER_SOURCE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.GENDER_SOURCE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the RACE_SOURCE_CONCEPT_ID field in the PERSON table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'RACE_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_person_race_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PERSON.RACE_SOURCE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.RACE_SOURCE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.RACE_SOURCE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the ETHNICITY_SOURCE_CONCEPT_ID field in the PERSON table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'ETHNICITY_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_person_ethnicity_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PERSON.ETHNICITY_SOURCE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.ETHNICITY_SOURCE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.ETHNICITY_SOURCE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PERSON_ID field in the PROCEDURE_OCCURRENCE table that does not exist in the PERSON table.' as check_description
# MAGIC  ,'PROCEDURE_OCCURRENCE' as cdm_table_name
# MAGIC  ,'PERSON_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_procedure_occurrence_person_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PROCEDURE_OCCURRENCE.PERSON_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.PERSON fkTable 
# MAGIC  ON cdmTable.PERSON_ID = fkTable.PERSON_ID
# MAGIC  WHERE fkTable.PERSON_ID IS NULL 
# MAGIC  AND cdmTable.PERSON_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PROCEDURE_CONCEPT_ID field in the PROCEDURE_OCCURRENCE table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'PROCEDURE_OCCURRENCE' as cdm_table_name
# MAGIC  ,'PROCEDURE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_procedure_occurrence_procedure_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PROCEDURE_OCCURRENCE.PROCEDURE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.PROCEDURE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.PROCEDURE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PROCEDURE_TYPE_CONCEPT_ID field in the PROCEDURE_OCCURRENCE table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'PROCEDURE_OCCURRENCE' as cdm_table_name
# MAGIC  ,'PROCEDURE_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_procedure_occurrence_procedure_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PROCEDURE_OCCURRENCE.PROCEDURE_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.PROCEDURE_TYPE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.PROCEDURE_TYPE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte
# MAGIC )
# MAGIC INSERT INTO ${results_catalog}.${results_schema}.dqdashboard_results
# MAGIC SELECT *
# MAGIC FROM cte_all;
# MAGIC WITH cte_all  AS (SELECT cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  , CAST('' as STRING) as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the MODIFIER_CONCEPT_ID field in the PROCEDURE_OCCURRENCE table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'PROCEDURE_OCCURRENCE' as cdm_table_name
# MAGIC  ,'MODIFIER_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_procedure_occurrence_modifier_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PROCEDURE_OCCURRENCE.MODIFIER_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.MODIFIER_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.MODIFIER_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PROVIDER_ID field in the PROCEDURE_OCCURRENCE table that does not exist in the PROVIDER table.' as check_description
# MAGIC  ,'PROCEDURE_OCCURRENCE' as cdm_table_name
# MAGIC  ,'PROVIDER_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_procedure_occurrence_provider_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PROCEDURE_OCCURRENCE.PROVIDER_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.PROVIDER fkTable 
# MAGIC  ON cdmTable.PROVIDER_ID = fkTable.PROVIDER_ID
# MAGIC  WHERE fkTable.PROVIDER_ID IS NULL 
# MAGIC  AND cdmTable.PROVIDER_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the VISIT_OCCURRENCE_ID field in the PROCEDURE_OCCURRENCE table that does not exist in the VISIT_OCCURRENCE table.' as check_description
# MAGIC  ,'PROCEDURE_OCCURRENCE' as cdm_table_name
# MAGIC  ,'VISIT_OCCURRENCE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_procedure_occurrence_visit_occurrence_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PROCEDURE_OCCURRENCE.VISIT_OCCURRENCE_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE fkTable 
# MAGIC  ON cdmTable.VISIT_OCCURRENCE_ID = fkTable.VISIT_OCCURRENCE_ID
# MAGIC  WHERE fkTable.VISIT_OCCURRENCE_ID IS NULL 
# MAGIC  AND cdmTable.VISIT_OCCURRENCE_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the VISIT_DETAIL_ID field in the PROCEDURE_OCCURRENCE table that does not exist in the VISIT_DETAIL table.' as check_description
# MAGIC  ,'PROCEDURE_OCCURRENCE' as cdm_table_name
# MAGIC  ,'VISIT_DETAIL_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_procedure_occurrence_visit_detail_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PROCEDURE_OCCURRENCE.VISIT_DETAIL_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.VISIT_DETAIL fkTable 
# MAGIC  ON cdmTable.VISIT_DETAIL_ID = fkTable.VISIT_DETAIL_ID
# MAGIC  WHERE fkTable.VISIT_DETAIL_ID IS NULL 
# MAGIC  AND cdmTable.VISIT_DETAIL_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PROCEDURE_SOURCE_CONCEPT_ID field in the PROCEDURE_OCCURRENCE table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'PROCEDURE_OCCURRENCE' as cdm_table_name
# MAGIC  ,'PROCEDURE_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_procedure_occurrence_procedure_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PROCEDURE_OCCURRENCE.PROCEDURE_SOURCE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.PROCEDURE_SOURCE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.PROCEDURE_SOURCE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the SPECIALTY_CONCEPT_ID field in the PROVIDER table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'PROVIDER' as cdm_table_name
# MAGIC  ,'SPECIALTY_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_provider_specialty_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PROVIDER.SPECIALTY_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROVIDER cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.SPECIALTY_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.SPECIALTY_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROVIDER cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the CARE_SITE_ID field in the PROVIDER table that does not exist in the CARE_SITE table.' as check_description
# MAGIC  ,'PROVIDER' as cdm_table_name
# MAGIC  ,'CARE_SITE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_provider_care_site_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PROVIDER.CARE_SITE_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROVIDER cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CARE_SITE fkTable 
# MAGIC  ON cdmTable.CARE_SITE_ID = fkTable.CARE_SITE_ID
# MAGIC  WHERE fkTable.CARE_SITE_ID IS NULL 
# MAGIC  AND cdmTable.CARE_SITE_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROVIDER cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the GENDER_CONCEPT_ID field in the PROVIDER table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'PROVIDER' as cdm_table_name
# MAGIC  ,'GENDER_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_provider_gender_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PROVIDER.GENDER_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROVIDER cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.GENDER_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.GENDER_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROVIDER cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the SPECIALTY_SOURCE_CONCEPT_ID field in the PROVIDER table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'PROVIDER' as cdm_table_name
# MAGIC  ,'SPECIALTY_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_provider_specialty_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PROVIDER.SPECIALTY_SOURCE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROVIDER cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.SPECIALTY_SOURCE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.SPECIALTY_SOURCE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROVIDER cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the GENDER_SOURCE_CONCEPT_ID field in the PROVIDER table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'PROVIDER' as cdm_table_name
# MAGIC  ,'GENDER_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_provider_gender_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PROVIDER.GENDER_SOURCE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROVIDER cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.GENDER_SOURCE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.GENDER_SOURCE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROVIDER cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PERSON_ID field in the SPECIMEN table that does not exist in the PERSON table.' as check_description
# MAGIC  ,'SPECIMEN' as cdm_table_name
# MAGIC  ,'PERSON_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_specimen_person_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'SPECIMEN.PERSON_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.PERSON fkTable 
# MAGIC  ON cdmTable.PERSON_ID = fkTable.PERSON_ID
# MAGIC  WHERE fkTable.PERSON_ID IS NULL 
# MAGIC  AND cdmTable.PERSON_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the SPECIMEN_CONCEPT_ID field in the SPECIMEN table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'SPECIMEN' as cdm_table_name
# MAGIC  ,'SPECIMEN_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_specimen_specimen_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'SPECIMEN.SPECIMEN_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.SPECIMEN_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.SPECIMEN_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the SPECIMEN_TYPE_CONCEPT_ID field in the SPECIMEN table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'SPECIMEN' as cdm_table_name
# MAGIC  ,'SPECIMEN_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_specimen_specimen_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'SPECIMEN.SPECIMEN_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.SPECIMEN_TYPE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.SPECIMEN_TYPE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the UNIT_CONCEPT_ID field in the SPECIMEN table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'SPECIMEN' as cdm_table_name
# MAGIC  ,'UNIT_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_specimen_unit_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'SPECIMEN.UNIT_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.UNIT_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.UNIT_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the ANATOMIC_SITE_CONCEPT_ID field in the SPECIMEN table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'SPECIMEN' as cdm_table_name
# MAGIC  ,'ANATOMIC_SITE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_specimen_anatomic_site_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'SPECIMEN.ANATOMIC_SITE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.ANATOMIC_SITE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.ANATOMIC_SITE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the DISEASE_STATUS_CONCEPT_ID field in the SPECIMEN table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'SPECIMEN' as cdm_table_name
# MAGIC  ,'DISEASE_STATUS_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_specimen_disease_status_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'SPECIMEN.DISEASE_STATUS_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.DISEASE_STATUS_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.DISEASE_STATUS_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PERSON_ID field in the VISIT_DETAIL table that does not exist in the PERSON table.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'PERSON_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_visit_detail_person_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_DETAIL.PERSON_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.PERSON fkTable 
# MAGIC  ON cdmTable.PERSON_ID = fkTable.PERSON_ID
# MAGIC  WHERE fkTable.PERSON_ID IS NULL 
# MAGIC  AND cdmTable.PERSON_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the VISIT_DETAIL_CONCEPT_ID field in the VISIT_DETAIL table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'VISIT_DETAIL_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_visit_detail_visit_detail_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_DETAIL.VISIT_DETAIL_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.VISIT_DETAIL_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.VISIT_DETAIL_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the VISIT_DETAIL_TYPE_CONCEPT_ID field in the VISIT_DETAIL table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'VISIT_DETAIL_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_visit_detail_visit_detail_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_DETAIL.VISIT_DETAIL_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.VISIT_DETAIL_TYPE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.VISIT_DETAIL_TYPE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PROVIDER_ID field in the VISIT_DETAIL table that does not exist in the PROVIDER table.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'PROVIDER_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_visit_detail_provider_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_DETAIL.PROVIDER_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.PROVIDER fkTable 
# MAGIC  ON cdmTable.PROVIDER_ID = fkTable.PROVIDER_ID
# MAGIC  WHERE fkTable.PROVIDER_ID IS NULL 
# MAGIC  AND cdmTable.PROVIDER_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the CARE_SITE_ID field in the VISIT_DETAIL table that does not exist in the CARE_SITE table.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'CARE_SITE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_visit_detail_care_site_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_DETAIL.CARE_SITE_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CARE_SITE fkTable 
# MAGIC  ON cdmTable.CARE_SITE_ID = fkTable.CARE_SITE_ID
# MAGIC  WHERE fkTable.CARE_SITE_ID IS NULL 
# MAGIC  AND cdmTable.CARE_SITE_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the VISIT_DETAIL_SOURCE_CONCEPT_ID field in the VISIT_DETAIL table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'VISIT_DETAIL_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_visit_detail_visit_detail_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_DETAIL.VISIT_DETAIL_SOURCE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.VISIT_DETAIL_SOURCE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.VISIT_DETAIL_SOURCE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the admitted_from_concept_id field in the VISIT_DETAIL table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'admitted_from_concept_id' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_visit_detail_admitted_from_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_DETAIL.admitted_from_concept_id' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.admitted_from_concept_id = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.admitted_from_concept_id IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the DISCHARGED_TO_CONCEPT_ID field in the VISIT_DETAIL table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'DISCHARGED_TO_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_visit_detail_DISCHARGED_TO_CONCEPT_ID' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_DETAIL.DISCHARGED_TO_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.DISCHARGED_TO_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.DISCHARGED_TO_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PRECEDING_VISIT_DETAIL_ID field in the VISIT_DETAIL table that does not exist in the VISIT_DETAIL table.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'PRECEDING_VISIT_DETAIL_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_visit_detail_preceding_visit_detail_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_DETAIL.PRECEDING_VISIT_DETAIL_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.VISIT_DETAIL fkTable 
# MAGIC  ON cdmTable.PRECEDING_VISIT_DETAIL_ID = fkTable.VISIT_DETAIL_ID
# MAGIC  WHERE fkTable.VISIT_DETAIL_ID IS NULL 
# MAGIC  AND cdmTable.PRECEDING_VISIT_DETAIL_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the parent_visit_detail_id field in the VISIT_DETAIL table that does not exist in the VISIT_DETAIL table.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'parent_visit_detail_id' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_visit_detail_parent_visit_detail_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_DETAIL.parent_visit_detail_id' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.VISIT_DETAIL fkTable 
# MAGIC  ON cdmTable.parent_visit_detail_id = fkTable.VISIT_DETAIL_ID
# MAGIC  WHERE fkTable.VISIT_DETAIL_ID IS NULL 
# MAGIC  AND cdmTable.parent_visit_detail_id IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the VISIT_OCCURRENCE_ID field in the VISIT_DETAIL table that does not exist in the VISIT_OCCURRENCE table.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'VISIT_OCCURRENCE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_visit_detail_visit_occurrence_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_DETAIL.VISIT_OCCURRENCE_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE fkTable 
# MAGIC  ON cdmTable.VISIT_OCCURRENCE_ID = fkTable.VISIT_OCCURRENCE_ID
# MAGIC  WHERE fkTable.VISIT_OCCURRENCE_ID IS NULL 
# MAGIC  AND cdmTable.VISIT_OCCURRENCE_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PERSON_ID field in the VISIT_OCCURRENCE table that does not exist in the PERSON table.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'PERSON_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_visit_occurrence_person_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_OCCURRENCE.PERSON_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.PERSON fkTable 
# MAGIC  ON cdmTable.PERSON_ID = fkTable.PERSON_ID
# MAGIC  WHERE fkTable.PERSON_ID IS NULL 
# MAGIC  AND cdmTable.PERSON_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the VISIT_CONCEPT_ID field in the VISIT_OCCURRENCE table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'VISIT_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_visit_occurrence_visit_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_OCCURRENCE.VISIT_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.VISIT_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.VISIT_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the VISIT_TYPE_CONCEPT_ID field in the VISIT_OCCURRENCE table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'VISIT_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_visit_occurrence_visit_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_OCCURRENCE.VISIT_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.VISIT_TYPE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.VISIT_TYPE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PROVIDER_ID field in the VISIT_OCCURRENCE table that does not exist in the PROVIDER table.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'PROVIDER_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_visit_occurrence_provider_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_OCCURRENCE.PROVIDER_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.PROVIDER fkTable 
# MAGIC  ON cdmTable.PROVIDER_ID = fkTable.PROVIDER_ID
# MAGIC  WHERE fkTable.PROVIDER_ID IS NULL 
# MAGIC  AND cdmTable.PROVIDER_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the CARE_SITE_ID field in the VISIT_OCCURRENCE table that does not exist in the CARE_SITE table.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'CARE_SITE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_visit_occurrence_care_site_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_OCCURRENCE.CARE_SITE_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CARE_SITE fkTable 
# MAGIC  ON cdmTable.CARE_SITE_ID = fkTable.CARE_SITE_ID
# MAGIC  WHERE fkTable.CARE_SITE_ID IS NULL 
# MAGIC  AND cdmTable.CARE_SITE_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the VISIT_SOURCE_CONCEPT_ID field in the VISIT_OCCURRENCE table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'VISIT_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_visit_occurrence_visit_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_OCCURRENCE.VISIT_SOURCE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.VISIT_SOURCE_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.VISIT_SOURCE_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the admitted_from_concept_id field in the VISIT_OCCURRENCE table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'admitted_from_concept_id' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_visit_occurrence_admitted_from_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_OCCURRENCE.admitted_from_concept_id' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.admitted_from_concept_id = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.admitted_from_concept_id IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the DISCHARGED_TO_CONCEPT_ID field in the VISIT_OCCURRENCE table that does not exist in the CONCEPT table.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'DISCHARGED_TO_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_visit_occurrence_DISCHARGED_TO_CONCEPT_ID' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_OCCURRENCE.DISCHARGED_TO_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.CONCEPT fkTable
# MAGIC  ON cdmTable.DISCHARGED_TO_CONCEPT_ID = fkTable.CONCEPT_ID
# MAGIC  WHERE fkTable.CONCEPT_ID IS NULL 
# MAGIC  AND cdmTable.DISCHARGED_TO_CONCEPT_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'isForeignKey' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PRECEDING_VISIT_OCCURRENCE_ID field in the VISIT_OCCURRENCE table that does not exist in the VISIT_OCCURRENCE table.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'PRECEDING_VISIT_OCCURRENCE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'is_foreign_key.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_isforeignkey_visit_occurrence_preceding_visit_occurrence_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows,
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows
# MAGIC  END AS pct_violated_rows,
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_OCCURRENCE.PRECEDING_VISIT_OCCURRENCE_ID' AS violating_field, 
# MAGIC  cdmTable.*
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  LEFT JOIN 
# MAGIC  ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE fkTable 
# MAGIC  ON cdmTable.PRECEDING_VISIT_OCCURRENCE_ID = fkTable.VISIT_OCCURRENCE_ID
# MAGIC  WHERE fkTable.VISIT_OCCURRENCE_ID IS NULL 
# MAGIC  AND cdmTable.PRECEDING_VISIT_OCCURRENCE_ID IS NOT NULL
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte
# MAGIC )
# MAGIC INSERT INTO ${results_catalog}.${results_schema}.dqdashboard_results
# MAGIC SELECT *
# MAGIC FROM cte_all;
# MAGIC

# COMMAND ----------

# MAGIC %sql
# MAGIC -- field cdm field
# MAGIC
# MAGIC WITH cte_all  AS (SELECT cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  , CAST('' as STRING) as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if CARE_SITE_ID is present in the CARE_SITE table as expected based on the specification.' as check_description
# MAGIC  ,'CARE_SITE' as cdm_table_name
# MAGIC  ,'CARE_SITE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_care_site_care_site_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(CARE_SITE_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CARE_SITE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if CARE_SITE_NAME is present in the CARE_SITE table as expected based on the specification.' as check_description
# MAGIC  ,'CARE_SITE' as cdm_table_name
# MAGIC  ,'CARE_SITE_NAME' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_care_site_care_site_name' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(CARE_SITE_NAME) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CARE_SITE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PLACE_OF_SERVICE_CONCEPT_ID is present in the CARE_SITE table as expected based on the specification.' as check_description
# MAGIC  ,'CARE_SITE' as cdm_table_name
# MAGIC  ,'PLACE_OF_SERVICE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_care_site_place_of_service_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PLACE_OF_SERVICE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CARE_SITE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if LOCATION_ID is present in the CARE_SITE table as expected based on the specification.' as check_description
# MAGIC  ,'CARE_SITE' as cdm_table_name
# MAGIC  ,'LOCATION_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_care_site_location_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(LOCATION_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CARE_SITE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if CARE_SITE_SOURCE_VALUE is present in the CARE_SITE table as expected based on the specification.' as check_description
# MAGIC  ,'CARE_SITE' as cdm_table_name
# MAGIC  ,'CARE_SITE_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_care_site_care_site_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(CARE_SITE_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CARE_SITE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PLACE_OF_SERVICE_SOURCE_VALUE is present in the CARE_SITE table as expected based on the specification.' as check_description
# MAGIC  ,'CARE_SITE' as cdm_table_name
# MAGIC  ,'PLACE_OF_SERVICE_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_care_site_place_of_service_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PLACE_OF_SERVICE_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CARE_SITE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if CONDITION_ERA_ID is present in the CONDITION_ERA table as expected based on the specification.' as check_description
# MAGIC  ,'CONDITION_ERA' as cdm_table_name
# MAGIC  ,'CONDITION_ERA_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_condition_era_condition_era_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(CONDITION_ERA_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_ERA cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PERSON_ID is present in the CONDITION_ERA table as expected based on the specification.' as check_description
# MAGIC  ,'CONDITION_ERA' as cdm_table_name
# MAGIC  ,'PERSON_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_condition_era_person_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PERSON_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_ERA cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if CONDITION_CONCEPT_ID is present in the CONDITION_ERA table as expected based on the specification.' as check_description
# MAGIC  ,'CONDITION_ERA' as cdm_table_name
# MAGIC  ,'CONDITION_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_condition_era_condition_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(CONDITION_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_ERA cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if CONDITION_ERA_START_DATE is present in the CONDITION_ERA table as expected based on the specification.' as check_description
# MAGIC  ,'CONDITION_ERA' as cdm_table_name
# MAGIC  ,'CONDITION_ERA_START_DATE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_condition_era_condition_era_start_date' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(CONDITION_ERA_START_DATE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_ERA cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if CONDITION_ERA_END_DATE is present in the CONDITION_ERA table as expected based on the specification.' as check_description
# MAGIC  ,'CONDITION_ERA' as cdm_table_name
# MAGIC  ,'CONDITION_ERA_END_DATE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_condition_era_condition_era_end_date' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(CONDITION_ERA_END_DATE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_ERA cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if CONDITION_OCCURRENCE_COUNT is present in the CONDITION_ERA table as expected based on the specification.' as check_description
# MAGIC  ,'CONDITION_ERA' as cdm_table_name
# MAGIC  ,'CONDITION_OCCURRENCE_COUNT' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_condition_era_condition_occurrence_count' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(CONDITION_OCCURRENCE_COUNT) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_ERA cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if CONDITION_OCCURRENCE_ID is present in the CONDITION_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'CONDITION_OCCURRENCE' as cdm_table_name
# MAGIC  ,'CONDITION_OCCURRENCE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_condition_occurrence_condition_occurrence_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(CONDITION_OCCURRENCE_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PERSON_ID is present in the CONDITION_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'CONDITION_OCCURRENCE' as cdm_table_name
# MAGIC  ,'PERSON_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_condition_occurrence_person_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PERSON_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if CONDITION_CONCEPT_ID is present in the CONDITION_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'CONDITION_OCCURRENCE' as cdm_table_name
# MAGIC  ,'CONDITION_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_condition_occurrence_condition_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(CONDITION_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if CONDITION_START_DATE is present in the CONDITION_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'CONDITION_OCCURRENCE' as cdm_table_name
# MAGIC  ,'CONDITION_START_DATE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_condition_occurrence_condition_start_date' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(CONDITION_START_DATE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if CONDITION_START_DATETIME is present in the CONDITION_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'CONDITION_OCCURRENCE' as cdm_table_name
# MAGIC  ,'CONDITION_START_DATETIME' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_condition_occurrence_condition_start_datetime' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(CONDITION_START_DATETIME) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if CONDITION_END_DATE is present in the CONDITION_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'CONDITION_OCCURRENCE' as cdm_table_name
# MAGIC  ,'CONDITION_END_DATE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_condition_occurrence_condition_end_date' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(CONDITION_END_DATE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if CONDITION_END_DATETIME is present in the CONDITION_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'CONDITION_OCCURRENCE' as cdm_table_name
# MAGIC  ,'CONDITION_END_DATETIME' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_condition_occurrence_condition_end_datetime' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(CONDITION_END_DATETIME) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if CONDITION_TYPE_CONCEPT_ID is present in the CONDITION_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'CONDITION_OCCURRENCE' as cdm_table_name
# MAGIC  ,'CONDITION_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_condition_occurrence_condition_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(CONDITION_TYPE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if CONDITION_STATUS_CONCEPT_ID is present in the CONDITION_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'CONDITION_OCCURRENCE' as cdm_table_name
# MAGIC  ,'CONDITION_STATUS_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_condition_occurrence_condition_status_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(CONDITION_STATUS_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if STOP_REASON is present in the CONDITION_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'CONDITION_OCCURRENCE' as cdm_table_name
# MAGIC  ,'STOP_REASON' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_condition_occurrence_stop_reason' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(STOP_REASON) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PROVIDER_ID is present in the CONDITION_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'CONDITION_OCCURRENCE' as cdm_table_name
# MAGIC  ,'PROVIDER_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_condition_occurrence_provider_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PROVIDER_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VISIT_OCCURRENCE_ID is present in the CONDITION_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'CONDITION_OCCURRENCE' as cdm_table_name
# MAGIC  ,'VISIT_OCCURRENCE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_condition_occurrence_visit_occurrence_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VISIT_OCCURRENCE_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VISIT_DETAIL_ID is present in the CONDITION_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'CONDITION_OCCURRENCE' as cdm_table_name
# MAGIC  ,'VISIT_DETAIL_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_condition_occurrence_visit_detail_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VISIT_DETAIL_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if CONDITION_SOURCE_VALUE is present in the CONDITION_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'CONDITION_OCCURRENCE' as cdm_table_name
# MAGIC  ,'CONDITION_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_condition_occurrence_condition_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(CONDITION_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if CONDITION_SOURCE_CONCEPT_ID is present in the CONDITION_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'CONDITION_OCCURRENCE' as cdm_table_name
# MAGIC  ,'CONDITION_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_condition_occurrence_condition_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(CONDITION_SOURCE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if CONDITION_STATUS_SOURCE_VALUE is present in the CONDITION_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'CONDITION_OCCURRENCE' as cdm_table_name
# MAGIC  ,'CONDITION_STATUS_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_condition_occurrence_condition_status_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(CONDITION_STATUS_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if COST_ID is present in the COST table as expected based on the specification.' as check_description
# MAGIC  ,'COST' as cdm_table_name
# MAGIC  ,'COST_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_cost_cost_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(COST_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if COST_EVENT_ID is present in the COST table as expected based on the specification.' as check_description
# MAGIC  ,'COST' as cdm_table_name
# MAGIC  ,'COST_EVENT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_cost_cost_event_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(COST_EVENT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if COST_DOMAIN_ID is present in the COST table as expected based on the specification.' as check_description
# MAGIC  ,'COST' as cdm_table_name
# MAGIC  ,'COST_DOMAIN_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_cost_cost_domain_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(COST_DOMAIN_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if COST_TYPE_CONCEPT_ID is present in the COST table as expected based on the specification.' as check_description
# MAGIC  ,'COST' as cdm_table_name
# MAGIC  ,'COST_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_cost_cost_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(COST_TYPE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if CURRENCY_CONCEPT_ID is present in the COST table as expected based on the specification.' as check_description
# MAGIC  ,'COST' as cdm_table_name
# MAGIC  ,'CURRENCY_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_cost_currency_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(CURRENCY_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if TOTAL_CHARGE is present in the COST table as expected based on the specification.' as check_description
# MAGIC  ,'COST' as cdm_table_name
# MAGIC  ,'TOTAL_CHARGE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_cost_total_charge' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(TOTAL_CHARGE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if TOTAL_COST is present in the COST table as expected based on the specification.' as check_description
# MAGIC  ,'COST' as cdm_table_name
# MAGIC  ,'TOTAL_COST' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_cost_total_cost' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(TOTAL_COST) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if TOTAL_PAID is present in the COST table as expected based on the specification.' as check_description
# MAGIC  ,'COST' as cdm_table_name
# MAGIC  ,'TOTAL_PAID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_cost_total_paid' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(TOTAL_PAID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PAID_BY_PAYER is present in the COST table as expected based on the specification.' as check_description
# MAGIC  ,'COST' as cdm_table_name
# MAGIC  ,'PAID_BY_PAYER' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_cost_paid_by_payer' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PAID_BY_PAYER) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PAID_BY_PATIENT is present in the COST table as expected based on the specification.' as check_description
# MAGIC  ,'COST' as cdm_table_name
# MAGIC  ,'PAID_BY_PATIENT' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_cost_paid_by_patient' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PAID_BY_PATIENT) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PAID_PATIENT_COPAY is present in the COST table as expected based on the specification.' as check_description
# MAGIC  ,'COST' as cdm_table_name
# MAGIC  ,'PAID_PATIENT_COPAY' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_cost_paid_patient_copay' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PAID_PATIENT_COPAY) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PAID_PATIENT_COINSURANCE is present in the COST table as expected based on the specification.' as check_description
# MAGIC  ,'COST' as cdm_table_name
# MAGIC  ,'PAID_PATIENT_COINSURANCE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_cost_paid_patient_coinsurance' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PAID_PATIENT_COINSURANCE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PAID_PATIENT_DEDUCTIBLE is present in the COST table as expected based on the specification.' as check_description
# MAGIC  ,'COST' as cdm_table_name
# MAGIC  ,'PAID_PATIENT_DEDUCTIBLE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_cost_paid_patient_deductible' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PAID_PATIENT_DEDUCTIBLE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PAID_BY_PRIMARY is present in the COST table as expected based on the specification.' as check_description
# MAGIC  ,'COST' as cdm_table_name
# MAGIC  ,'PAID_BY_PRIMARY' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_cost_paid_by_primary' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PAID_BY_PRIMARY) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PAID_INGREDIENT_COST is present in the COST table as expected based on the specification.' as check_description
# MAGIC  ,'COST' as cdm_table_name
# MAGIC  ,'PAID_INGREDIENT_COST' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_cost_paid_ingredient_cost' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PAID_INGREDIENT_COST) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PAID_DISPENSING_FEE is present in the COST table as expected based on the specification.' as check_description
# MAGIC  ,'COST' as cdm_table_name
# MAGIC  ,'PAID_DISPENSING_FEE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_cost_paid_dispensing_fee' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PAID_DISPENSING_FEE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PAYER_PLAN_PERIOD_ID is present in the COST table as expected based on the specification.' as check_description
# MAGIC  ,'COST' as cdm_table_name
# MAGIC  ,'PAYER_PLAN_PERIOD_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_cost_payer_plan_period_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PAYER_PLAN_PERIOD_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if AMOUNT_ALLOWED is present in the COST table as expected based on the specification.' as check_description
# MAGIC  ,'COST' as cdm_table_name
# MAGIC  ,'AMOUNT_ALLOWED' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_cost_amount_allowed' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(AMOUNT_ALLOWED) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if REVENUE_CODE_CONCEPT_ID is present in the COST table as expected based on the specification.' as check_description
# MAGIC  ,'COST' as cdm_table_name
# MAGIC  ,'REVENUE_CODE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_cost_revenue_code_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(REVENUE_CODE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if REVENUE_CODE_SOURCE_VALUE is present in the COST table as expected based on the specification.' as check_description
# MAGIC  ,'COST' as cdm_table_name
# MAGIC  ,'REVENUE_CODE_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_cost_revenue_code_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(REVENUE_CODE_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DRG_CONCEPT_ID is present in the COST table as expected based on the specification.' as check_description
# MAGIC  ,'COST' as cdm_table_name
# MAGIC  ,'DRG_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_cost_drg_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DRG_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DRG_SOURCE_VALUE is present in the COST table as expected based on the specification.' as check_description
# MAGIC  ,'COST' as cdm_table_name
# MAGIC  ,'DRG_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_cost_drg_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DRG_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.COST cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if CAUSE_CONCEPT_ID is present in the DEATH table as expected based on the specification.' as check_description
# MAGIC  ,'DEATH' as cdm_table_name
# MAGIC  ,'CAUSE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_death_cause_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(CAUSE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEATH cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if CAUSE_SOURCE_CONCEPT_ID is present in the DEATH table as expected based on the specification.' as check_description
# MAGIC  ,'DEATH' as cdm_table_name
# MAGIC  ,'CAUSE_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_death_cause_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(CAUSE_SOURCE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEATH cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if CAUSE_SOURCE_VALUE is present in the DEATH table as expected based on the specification.' as check_description
# MAGIC  ,'DEATH' as cdm_table_name
# MAGIC  ,'CAUSE_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_death_cause_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(CAUSE_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEATH cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DEATH_DATE is present in the DEATH table as expected based on the specification.' as check_description
# MAGIC  ,'DEATH' as cdm_table_name
# MAGIC  ,'DEATH_DATE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_death_death_date' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DEATH_DATE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEATH cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if death_timestamp is present in the DEATH table as expected based on the specification.' as check_description
# MAGIC  ,'DEATH' as cdm_table_name
# MAGIC  ,'death_timestamp' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_death_death_timestamp' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(death_timestamp) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEATH cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DEATH_TYPE_CONCEPT_ID is present in the DEATH table as expected based on the specification.' as check_description
# MAGIC  ,'DEATH' as cdm_table_name
# MAGIC  ,'DEATH_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_death_death_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DEATH_TYPE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEATH cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PERSON_ID is present in the DEATH table as expected based on the specification.' as check_description
# MAGIC  ,'DEATH' as cdm_table_name
# MAGIC  ,'PERSON_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_death_person_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PERSON_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEATH cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DEVICE_EXPOSURE_ID is present in the DEVICE_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DEVICE_EXPOSURE' as cdm_table_name
# MAGIC  ,'DEVICE_EXPOSURE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_device_exposure_device_exposure_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DEVICE_EXPOSURE_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PERSON_ID is present in the DEVICE_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DEVICE_EXPOSURE' as cdm_table_name
# MAGIC  ,'PERSON_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_device_exposure_person_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PERSON_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DEVICE_CONCEPT_ID is present in the DEVICE_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DEVICE_EXPOSURE' as cdm_table_name
# MAGIC  ,'DEVICE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_device_exposure_device_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DEVICE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DEVICE_EXPOSURE_START_DATE is present in the DEVICE_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DEVICE_EXPOSURE' as cdm_table_name
# MAGIC  ,'DEVICE_EXPOSURE_START_DATE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_device_exposure_device_exposure_start_date' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DEVICE_EXPOSURE_START_DATE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DEVICE_EXPOSURE_START_DATETIME is present in the DEVICE_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DEVICE_EXPOSURE' as cdm_table_name
# MAGIC  ,'DEVICE_EXPOSURE_START_DATETIME' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_device_exposure_device_exposure_start_datetime' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DEVICE_EXPOSURE_START_DATETIME) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DEVICE_EXPOSURE_END_DATE is present in the DEVICE_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DEVICE_EXPOSURE' as cdm_table_name
# MAGIC  ,'DEVICE_EXPOSURE_END_DATE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_device_exposure_device_exposure_end_date' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DEVICE_EXPOSURE_END_DATE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DEVICE_EXPOSURE_END_DATETIME is present in the DEVICE_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DEVICE_EXPOSURE' as cdm_table_name
# MAGIC  ,'DEVICE_EXPOSURE_END_DATETIME' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_device_exposure_device_exposure_end_datetime' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DEVICE_EXPOSURE_END_DATETIME) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DEVICE_TYPE_CONCEPT_ID is present in the DEVICE_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DEVICE_EXPOSURE' as cdm_table_name
# MAGIC  ,'DEVICE_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_device_exposure_device_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DEVICE_TYPE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if UNIQUE_DEVICE_ID is present in the DEVICE_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DEVICE_EXPOSURE' as cdm_table_name
# MAGIC  ,'UNIQUE_DEVICE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_device_exposure_unique_device_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(UNIQUE_DEVICE_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if QUANTITY is present in the DEVICE_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DEVICE_EXPOSURE' as cdm_table_name
# MAGIC  ,'QUANTITY' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_device_exposure_quantity' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(QUANTITY) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PROVIDER_ID is present in the DEVICE_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DEVICE_EXPOSURE' as cdm_table_name
# MAGIC  ,'PROVIDER_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_device_exposure_provider_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PROVIDER_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VISIT_OCCURRENCE_ID is present in the DEVICE_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DEVICE_EXPOSURE' as cdm_table_name
# MAGIC  ,'VISIT_OCCURRENCE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_device_exposure_visit_occurrence_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VISIT_OCCURRENCE_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VISIT_DETAIL_ID is present in the DEVICE_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DEVICE_EXPOSURE' as cdm_table_name
# MAGIC  ,'VISIT_DETAIL_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_device_exposure_visit_detail_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VISIT_DETAIL_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DEVICE_SOURCE_VALUE is present in the DEVICE_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DEVICE_EXPOSURE' as cdm_table_name
# MAGIC  ,'DEVICE_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_device_exposure_device_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DEVICE_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DEVICE_SOURCE_CONCEPT_ID is present in the DEVICE_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DEVICE_EXPOSURE' as cdm_table_name
# MAGIC  ,'DEVICE_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_device_exposure_device_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DEVICE_SOURCE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DOSE_ERA_ID is present in the DOSE_ERA table as expected based on the specification.' as check_description
# MAGIC  ,'DOSE_ERA' as cdm_table_name
# MAGIC  ,'DOSE_ERA_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_dose_era_dose_era_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DOSE_ERA_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DOSE_ERA cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PERSON_ID is present in the DOSE_ERA table as expected based on the specification.' as check_description
# MAGIC  ,'DOSE_ERA' as cdm_table_name
# MAGIC  ,'PERSON_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_dose_era_person_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PERSON_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DOSE_ERA cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DRUG_CONCEPT_ID is present in the DOSE_ERA table as expected based on the specification.' as check_description
# MAGIC  ,'DOSE_ERA' as cdm_table_name
# MAGIC  ,'DRUG_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_dose_era_drug_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DRUG_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DOSE_ERA cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if UNIT_CONCEPT_ID is present in the DOSE_ERA table as expected based on the specification.' as check_description
# MAGIC  ,'DOSE_ERA' as cdm_table_name
# MAGIC  ,'UNIT_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_dose_era_unit_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(UNIT_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DOSE_ERA cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DOSE_VALUE is present in the DOSE_ERA table as expected based on the specification.' as check_description
# MAGIC  ,'DOSE_ERA' as cdm_table_name
# MAGIC  ,'DOSE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_dose_era_dose_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DOSE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DOSE_ERA cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DOSE_ERA_START_DATE is present in the DOSE_ERA table as expected based on the specification.' as check_description
# MAGIC  ,'DOSE_ERA' as cdm_table_name
# MAGIC  ,'DOSE_ERA_START_DATE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_dose_era_dose_era_start_date' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DOSE_ERA_START_DATE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DOSE_ERA cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DOSE_ERA_END_DATE is present in the DOSE_ERA table as expected based on the specification.' as check_description
# MAGIC  ,'DOSE_ERA' as cdm_table_name
# MAGIC  ,'DOSE_ERA_END_DATE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_dose_era_dose_era_end_date' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DOSE_ERA_END_DATE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DOSE_ERA cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DRUG_ERA_ID is present in the DRUG_ERA table as expected based on the specification.' as check_description
# MAGIC  ,'DRUG_ERA' as cdm_table_name
# MAGIC  ,'DRUG_ERA_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_drug_era_drug_era_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DRUG_ERA_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_ERA cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PERSON_ID is present in the DRUG_ERA table as expected based on the specification.' as check_description
# MAGIC  ,'DRUG_ERA' as cdm_table_name
# MAGIC  ,'PERSON_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_drug_era_person_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PERSON_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_ERA cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DRUG_CONCEPT_ID is present in the DRUG_ERA table as expected based on the specification.' as check_description
# MAGIC  ,'DRUG_ERA' as cdm_table_name
# MAGIC  ,'DRUG_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_drug_era_drug_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DRUG_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_ERA cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DRUG_ERA_START_DATE is present in the DRUG_ERA table as expected based on the specification.' as check_description
# MAGIC  ,'DRUG_ERA' as cdm_table_name
# MAGIC  ,'DRUG_ERA_START_DATE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_drug_era_drug_era_start_date' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DRUG_ERA_START_DATE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_ERA cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DRUG_ERA_END_DATE is present in the DRUG_ERA table as expected based on the specification.' as check_description
# MAGIC  ,'DRUG_ERA' as cdm_table_name
# MAGIC  ,'DRUG_ERA_END_DATE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_drug_era_drug_era_end_date' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DRUG_ERA_END_DATE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_ERA cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DRUG_EXPOSURE_COUNT is present in the DRUG_ERA table as expected based on the specification.' as check_description
# MAGIC  ,'DRUG_ERA' as cdm_table_name
# MAGIC  ,'DRUG_EXPOSURE_COUNT' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_drug_era_drug_exposure_count' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DRUG_EXPOSURE_COUNT) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_ERA cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if GAP_DAYS is present in the DRUG_ERA table as expected based on the specification.' as check_description
# MAGIC  ,'DRUG_ERA' as cdm_table_name
# MAGIC  ,'GAP_DAYS' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_drug_era_gap_days' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(GAP_DAYS) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_ERA cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DRUG_EXPOSURE_ID is present in the DRUG_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'DRUG_EXPOSURE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_drug_exposure_drug_exposure_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DRUG_EXPOSURE_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PERSON_ID is present in the DRUG_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'PERSON_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_drug_exposure_person_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PERSON_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DRUG_CONCEPT_ID is present in the DRUG_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'DRUG_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_drug_exposure_drug_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DRUG_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DRUG_EXPOSURE_START_DATE is present in the DRUG_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'DRUG_EXPOSURE_START_DATE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_drug_exposure_drug_exposure_start_date' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DRUG_EXPOSURE_START_DATE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DRUG_EXPOSURE_START_DATETIME is present in the DRUG_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'DRUG_EXPOSURE_START_DATETIME' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_drug_exposure_drug_exposure_start_datetime' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DRUG_EXPOSURE_START_DATETIME) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DRUG_EXPOSURE_END_DATE is present in the DRUG_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'DRUG_EXPOSURE_END_DATE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_drug_exposure_drug_exposure_end_date' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DRUG_EXPOSURE_END_DATE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DRUG_EXPOSURE_END_DATETIME is present in the DRUG_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'DRUG_EXPOSURE_END_DATETIME' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_drug_exposure_drug_exposure_end_datetime' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DRUG_EXPOSURE_END_DATETIME) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VERBATIM_END_DATE is present in the DRUG_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'VERBATIM_END_DATE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_drug_exposure_verbatim_end_date' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VERBATIM_END_DATE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DRUG_TYPE_CONCEPT_ID is present in the DRUG_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'DRUG_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_drug_exposure_drug_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DRUG_TYPE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if STOP_REASON is present in the DRUG_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'STOP_REASON' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_drug_exposure_stop_reason' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(STOP_REASON) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if REFILLS is present in the DRUG_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'REFILLS' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_drug_exposure_refills' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(REFILLS) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if QUANTITY is present in the DRUG_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'QUANTITY' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_drug_exposure_quantity' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(QUANTITY) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DAYS_SUPPLY is present in the DRUG_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'DAYS_SUPPLY' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_drug_exposure_days_supply' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DAYS_SUPPLY) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if SIG is present in the DRUG_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'SIG' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_drug_exposure_sig' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(SIG) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte
# MAGIC )
# MAGIC INSERT INTO ${results_catalog}.${results_schema}.dqdashboard_results
# MAGIC SELECT *
# MAGIC FROM cte_all;
# MAGIC WITH cte_all  AS (SELECT cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  , CAST('' as STRING) as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if ROUTE_CONCEPT_ID is present in the DRUG_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'ROUTE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_drug_exposure_route_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(ROUTE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if LOT_NUMBER is present in the DRUG_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'LOT_NUMBER' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_drug_exposure_lot_number' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(LOT_NUMBER) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PROVIDER_ID is present in the DRUG_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'PROVIDER_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_drug_exposure_provider_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PROVIDER_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VISIT_OCCURRENCE_ID is present in the DRUG_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'VISIT_OCCURRENCE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_drug_exposure_visit_occurrence_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VISIT_OCCURRENCE_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VISIT_DETAIL_ID is present in the DRUG_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'VISIT_DETAIL_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_drug_exposure_visit_detail_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VISIT_DETAIL_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DRUG_SOURCE_VALUE is present in the DRUG_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'DRUG_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_drug_exposure_drug_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DRUG_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DRUG_SOURCE_CONCEPT_ID is present in the DRUG_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'DRUG_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_drug_exposure_drug_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DRUG_SOURCE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if ROUTE_SOURCE_VALUE is present in the DRUG_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'ROUTE_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_drug_exposure_route_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(ROUTE_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DOSE_UNIT_SOURCE_VALUE is present in the DRUG_EXPOSURE table as expected based on the specification.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'DOSE_UNIT_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_drug_exposure_dose_unit_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DOSE_UNIT_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DOMAIN_CONCEPT_ID_1 is present in the FACT_RELATIONSHIP table as expected based on the specification.' as check_description
# MAGIC  ,'FACT_RELATIONSHIP' as cdm_table_name
# MAGIC  ,'DOMAIN_CONCEPT_ID_1' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_fact_relationship_domain_concept_id_1' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DOMAIN_CONCEPT_ID_1) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.FACT_RELATIONSHIP cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if FACT_ID_1 is present in the FACT_RELATIONSHIP table as expected based on the specification.' as check_description
# MAGIC  ,'FACT_RELATIONSHIP' as cdm_table_name
# MAGIC  ,'FACT_ID_1' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_fact_relationship_fact_id_1' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(FACT_ID_1) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.FACT_RELATIONSHIP cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DOMAIN_CONCEPT_ID_2 is present in the FACT_RELATIONSHIP table as expected based on the specification.' as check_description
# MAGIC  ,'FACT_RELATIONSHIP' as cdm_table_name
# MAGIC  ,'DOMAIN_CONCEPT_ID_2' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_fact_relationship_domain_concept_id_2' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DOMAIN_CONCEPT_ID_2) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.FACT_RELATIONSHIP cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if FACT_ID_2 is present in the FACT_RELATIONSHIP table as expected based on the specification.' as check_description
# MAGIC  ,'FACT_RELATIONSHIP' as cdm_table_name
# MAGIC  ,'FACT_ID_2' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_fact_relationship_fact_id_2' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(FACT_ID_2) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.FACT_RELATIONSHIP cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if RELATIONSHIP_CONCEPT_ID is present in the FACT_RELATIONSHIP table as expected based on the specification.' as check_description
# MAGIC  ,'FACT_RELATIONSHIP' as cdm_table_name
# MAGIC  ,'RELATIONSHIP_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_fact_relationship_relationship_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(RELATIONSHIP_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.FACT_RELATIONSHIP cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if LOCATION_ID is present in the LOCATION table as expected based on the specification.' as check_description
# MAGIC  ,'LOCATION' as cdm_table_name
# MAGIC  ,'LOCATION_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_location_location_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(LOCATION_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.LOCATION cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if ADDRESS_1 is present in the LOCATION table as expected based on the specification.' as check_description
# MAGIC  ,'LOCATION' as cdm_table_name
# MAGIC  ,'ADDRESS_1' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_location_address_1' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(ADDRESS_1) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.LOCATION cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if ADDRESS_2 is present in the LOCATION table as expected based on the specification.' as check_description
# MAGIC  ,'LOCATION' as cdm_table_name
# MAGIC  ,'ADDRESS_2' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_location_address_2' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(ADDRESS_2) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.LOCATION cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if CITY is present in the LOCATION table as expected based on the specification.' as check_description
# MAGIC  ,'LOCATION' as cdm_table_name
# MAGIC  ,'CITY' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_location_city' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(CITY) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.LOCATION cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if STATE is present in the LOCATION table as expected based on the specification.' as check_description
# MAGIC  ,'LOCATION' as cdm_table_name
# MAGIC  ,'STATE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_location_state' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(STATE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.LOCATION cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if ZIP is present in the LOCATION table as expected based on the specification.' as check_description
# MAGIC  ,'LOCATION' as cdm_table_name
# MAGIC  ,'ZIP' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_location_zip' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(ZIP) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.LOCATION cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if COUNTY is present in the LOCATION table as expected based on the specification.' as check_description
# MAGIC  ,'LOCATION' as cdm_table_name
# MAGIC  ,'COUNTY' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_location_county' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(COUNTY) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.LOCATION cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if LOCATION_SOURCE_VALUE is present in the LOCATION table as expected based on the specification.' as check_description
# MAGIC  ,'LOCATION' as cdm_table_name
# MAGIC  ,'LOCATION_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_location_location_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(LOCATION_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.LOCATION cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if MEASUREMENT_ID is present in the MEASUREMENT table as expected based on the specification.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'MEASUREMENT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_measurement_measurement_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(MEASUREMENT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PERSON_ID is present in the MEASUREMENT table as expected based on the specification.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'PERSON_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_measurement_person_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PERSON_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if MEASUREMENT_CONCEPT_ID is present in the MEASUREMENT table as expected based on the specification.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'MEASUREMENT_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_measurement_measurement_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(MEASUREMENT_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if MEASUREMENT_DATE is present in the MEASUREMENT table as expected based on the specification.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'MEASUREMENT_DATE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_measurement_measurement_date' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(MEASUREMENT_DATE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if MEASUREMENT_DATETIME is present in the MEASUREMENT table as expected based on the specification.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'MEASUREMENT_DATETIME' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_measurement_measurement_datetime' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(MEASUREMENT_DATETIME) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if MEASUREMENT_TIME is present in the MEASUREMENT table as expected based on the specification.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'MEASUREMENT_TIME' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_measurement_measurement_time' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(MEASUREMENT_TIME) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if MEASUREMENT_TYPE_CONCEPT_ID is present in the MEASUREMENT table as expected based on the specification.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'MEASUREMENT_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_measurement_measurement_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(MEASUREMENT_TYPE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if OPERATOR_CONCEPT_ID is present in the MEASUREMENT table as expected based on the specification.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'OPERATOR_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_measurement_operator_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(OPERATOR_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VALUE_AS_NUMBER is present in the MEASUREMENT table as expected based on the specification.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'VALUE_AS_NUMBER' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_measurement_value_as_number' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VALUE_AS_NUMBER) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VALUE_AS_CONCEPT_ID is present in the MEASUREMENT table as expected based on the specification.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'VALUE_AS_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_measurement_value_as_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VALUE_AS_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if UNIT_CONCEPT_ID is present in the MEASUREMENT table as expected based on the specification.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'UNIT_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_measurement_unit_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(UNIT_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if RANGE_LOW is present in the MEASUREMENT table as expected based on the specification.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'RANGE_LOW' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_measurement_range_low' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(RANGE_LOW) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if RANGE_HIGH is present in the MEASUREMENT table as expected based on the specification.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'RANGE_HIGH' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_measurement_range_high' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(RANGE_HIGH) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PROVIDER_ID is present in the MEASUREMENT table as expected based on the specification.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'PROVIDER_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_measurement_provider_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PROVIDER_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VISIT_OCCURRENCE_ID is present in the MEASUREMENT table as expected based on the specification.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'VISIT_OCCURRENCE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_measurement_visit_occurrence_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VISIT_OCCURRENCE_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VISIT_DETAIL_ID is present in the MEASUREMENT table as expected based on the specification.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'VISIT_DETAIL_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_measurement_visit_detail_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VISIT_DETAIL_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if MEASUREMENT_SOURCE_VALUE is present in the MEASUREMENT table as expected based on the specification.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'MEASUREMENT_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_measurement_measurement_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(MEASUREMENT_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if MEASUREMENT_SOURCE_CONCEPT_ID is present in the MEASUREMENT table as expected based on the specification.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'MEASUREMENT_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_measurement_measurement_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(MEASUREMENT_SOURCE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if UNIT_SOURCE_VALUE is present in the MEASUREMENT table as expected based on the specification.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'UNIT_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_measurement_unit_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(UNIT_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VALUE_SOURCE_VALUE is present in the MEASUREMENT table as expected based on the specification.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'VALUE_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_measurement_value_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VALUE_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if NOTE_ID is present in the NOTE table as expected based on the specification.' as check_description
# MAGIC  ,'NOTE' as cdm_table_name
# MAGIC  ,'NOTE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_note_note_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(NOTE_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PERSON_ID is present in the NOTE table as expected based on the specification.' as check_description
# MAGIC  ,'NOTE' as cdm_table_name
# MAGIC  ,'PERSON_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_note_person_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PERSON_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if NOTE_DATE is present in the NOTE table as expected based on the specification.' as check_description
# MAGIC  ,'NOTE' as cdm_table_name
# MAGIC  ,'NOTE_DATE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_note_note_date' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(NOTE_DATE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if note_timestamp is present in the NOTE table as expected based on the specification.' as check_description
# MAGIC  ,'NOTE' as cdm_table_name
# MAGIC  ,'note_timestamp' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_note_note_timestamp' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(note_timestamp) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if NOTE_TYPE_CONCEPT_ID is present in the NOTE table as expected based on the specification.' as check_description
# MAGIC  ,'NOTE' as cdm_table_name
# MAGIC  ,'NOTE_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_note_note_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(NOTE_TYPE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if NOTE_CLASS_CONCEPT_ID is present in the NOTE table as expected based on the specification.' as check_description
# MAGIC  ,'NOTE' as cdm_table_name
# MAGIC  ,'NOTE_CLASS_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_note_note_class_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(NOTE_CLASS_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if NOTE_TITLE is present in the NOTE table as expected based on the specification.' as check_description
# MAGIC  ,'NOTE' as cdm_table_name
# MAGIC  ,'NOTE_TITLE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_note_note_title' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(NOTE_TITLE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if NOTE_TEXT is present in the NOTE table as expected based on the specification.' as check_description
# MAGIC  ,'NOTE' as cdm_table_name
# MAGIC  ,'NOTE_TEXT' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_note_note_text' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(NOTE_TEXT) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if ENCODING_CONCEPT_ID is present in the NOTE table as expected based on the specification.' as check_description
# MAGIC  ,'NOTE' as cdm_table_name
# MAGIC  ,'ENCODING_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_note_encoding_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(ENCODING_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if LANGUAGE_CONCEPT_ID is present in the NOTE table as expected based on the specification.' as check_description
# MAGIC  ,'NOTE' as cdm_table_name
# MAGIC  ,'LANGUAGE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_note_language_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(LANGUAGE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PROVIDER_ID is present in the NOTE table as expected based on the specification.' as check_description
# MAGIC  ,'NOTE' as cdm_table_name
# MAGIC  ,'PROVIDER_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_note_provider_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PROVIDER_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VISIT_OCCURRENCE_ID is present in the NOTE table as expected based on the specification.' as check_description
# MAGIC  ,'NOTE' as cdm_table_name
# MAGIC  ,'VISIT_OCCURRENCE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_note_visit_occurrence_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VISIT_OCCURRENCE_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VISIT_DETAIL_ID is present in the NOTE table as expected based on the specification.' as check_description
# MAGIC  ,'NOTE' as cdm_table_name
# MAGIC  ,'VISIT_DETAIL_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_note_visit_detail_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VISIT_DETAIL_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if NOTE_SOURCE_VALUE is present in the NOTE table as expected based on the specification.' as check_description
# MAGIC  ,'NOTE' as cdm_table_name
# MAGIC  ,'NOTE_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_note_note_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(NOTE_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if NOTE_NLP_ID is present in the NOTE_NLP table as expected based on the specification.' as check_description
# MAGIC  ,'NOTE_NLP' as cdm_table_name
# MAGIC  ,'NOTE_NLP_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_note_nlp_note_nlp_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(NOTE_NLP_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE_NLP cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if NOTE_ID is present in the NOTE_NLP table as expected based on the specification.' as check_description
# MAGIC  ,'NOTE_NLP' as cdm_table_name
# MAGIC  ,'NOTE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_note_nlp_note_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(NOTE_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE_NLP cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if SECTION_CONCEPT_ID is present in the NOTE_NLP table as expected based on the specification.' as check_description
# MAGIC  ,'NOTE_NLP' as cdm_table_name
# MAGIC  ,'SECTION_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_note_nlp_section_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(SECTION_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE_NLP cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if SNIPPET is present in the NOTE_NLP table as expected based on the specification.' as check_description
# MAGIC  ,'NOTE_NLP' as cdm_table_name
# MAGIC  ,'SNIPPET' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_note_nlp_snippet' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(SNIPPET) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE_NLP cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if LEXICAL_VARIANT is present in the NOTE_NLP table as expected based on the specification.' as check_description
# MAGIC  ,'NOTE_NLP' as cdm_table_name
# MAGIC  ,'LEXICAL_VARIANT' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_note_nlp_lexical_variant' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(LEXICAL_VARIANT) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE_NLP cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if NOTE_NLP_CONCEPT_ID is present in the NOTE_NLP table as expected based on the specification.' as check_description
# MAGIC  ,'NOTE_NLP' as cdm_table_name
# MAGIC  ,'NOTE_NLP_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_note_nlp_note_nlp_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(NOTE_NLP_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE_NLP cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if NOTE_NLP_SOURCE_CONCEPT_ID is present in the NOTE_NLP table as expected based on the specification.' as check_description
# MAGIC  ,'NOTE_NLP' as cdm_table_name
# MAGIC  ,'NOTE_NLP_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_note_nlp_note_nlp_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(NOTE_NLP_SOURCE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE_NLP cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if NLP_SYSTEM is present in the NOTE_NLP table as expected based on the specification.' as check_description
# MAGIC  ,'NOTE_NLP' as cdm_table_name
# MAGIC  ,'NLP_SYSTEM' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_note_nlp_nlp_system' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(NLP_SYSTEM) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE_NLP cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if NLP_DATE is present in the NOTE_NLP table as expected based on the specification.' as check_description
# MAGIC  ,'NOTE_NLP' as cdm_table_name
# MAGIC  ,'NLP_DATE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_note_nlp_nlp_date' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(NLP_DATE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE_NLP cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if nlp_timestamp is present in the NOTE_NLP table as expected based on the specification.' as check_description
# MAGIC  ,'NOTE_NLP' as cdm_table_name
# MAGIC  ,'nlp_timestamp' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_note_nlp_nlp_timestamp' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(nlp_timestamp) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE_NLP cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if TERM_EXISTS is present in the NOTE_NLP table as expected based on the specification.' as check_description
# MAGIC  ,'NOTE_NLP' as cdm_table_name
# MAGIC  ,'TERM_EXISTS' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_note_nlp_term_exists' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(TERM_EXISTS) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE_NLP cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if TERM_TEMPORAL is present in the NOTE_NLP table as expected based on the specification.' as check_description
# MAGIC  ,'NOTE_NLP' as cdm_table_name
# MAGIC  ,'TERM_TEMPORAL' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_note_nlp_term_temporal' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(TERM_TEMPORAL) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE_NLP cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if TERM_MODIFIERS is present in the NOTE_NLP table as expected based on the specification.' as check_description
# MAGIC  ,'NOTE_NLP' as cdm_table_name
# MAGIC  ,'TERM_MODIFIERS' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_note_nlp_term_modifiers' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(TERM_MODIFIERS) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE_NLP cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if OBSERVATION_ID is present in the OBSERVATION table as expected based on the specification.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'OBSERVATION_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_observation_observation_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(OBSERVATION_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PERSON_ID is present in the OBSERVATION table as expected based on the specification.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'PERSON_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_observation_person_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PERSON_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if OBSERVATION_CONCEPT_ID is present in the OBSERVATION table as expected based on the specification.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'OBSERVATION_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_observation_observation_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(OBSERVATION_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if OBSERVATION_DATE is present in the OBSERVATION table as expected based on the specification.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'OBSERVATION_DATE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_observation_observation_date' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(OBSERVATION_DATE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if OBSERVATION_DATETIME is present in the OBSERVATION table as expected based on the specification.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'OBSERVATION_DATETIME' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_observation_observation_datetime' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(OBSERVATION_DATETIME) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if OBSERVATION_TYPE_CONCEPT_ID is present in the OBSERVATION table as expected based on the specification.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'OBSERVATION_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_observation_observation_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(OBSERVATION_TYPE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VALUE_AS_NUMBER is present in the OBSERVATION table as expected based on the specification.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'VALUE_AS_NUMBER' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_observation_value_as_number' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VALUE_AS_NUMBER) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VALUE_AS_STRING is present in the OBSERVATION table as expected based on the specification.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'VALUE_AS_STRING' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_observation_value_as_string' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VALUE_AS_STRING) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VALUE_AS_CONCEPT_ID is present in the OBSERVATION table as expected based on the specification.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'VALUE_AS_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_observation_value_as_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VALUE_AS_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if QUALIFIER_CONCEPT_ID is present in the OBSERVATION table as expected based on the specification.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'QUALIFIER_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_observation_qualifier_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(QUALIFIER_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if UNIT_CONCEPT_ID is present in the OBSERVATION table as expected based on the specification.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'UNIT_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_observation_unit_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(UNIT_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PROVIDER_ID is present in the OBSERVATION table as expected based on the specification.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'PROVIDER_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_observation_provider_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PROVIDER_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VISIT_OCCURRENCE_ID is present in the OBSERVATION table as expected based on the specification.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'VISIT_OCCURRENCE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_observation_visit_occurrence_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VISIT_OCCURRENCE_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VISIT_DETAIL_ID is present in the OBSERVATION table as expected based on the specification.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'VISIT_DETAIL_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_observation_visit_detail_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VISIT_DETAIL_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if OBSERVATION_SOURCE_VALUE is present in the OBSERVATION table as expected based on the specification.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'OBSERVATION_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_observation_observation_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(OBSERVATION_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if OBSERVATION_SOURCE_CONCEPT_ID is present in the OBSERVATION table as expected based on the specification.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'OBSERVATION_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_observation_observation_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(OBSERVATION_SOURCE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if UNIT_SOURCE_VALUE is present in the OBSERVATION table as expected based on the specification.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'UNIT_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_observation_unit_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(UNIT_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if QUALIFIER_SOURCE_VALUE is present in the OBSERVATION table as expected based on the specification.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'QUALIFIER_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_observation_qualifier_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(QUALIFIER_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if OBSERVATION_PERIOD_ID is present in the OBSERVATION_PERIOD table as expected based on the specification.' as check_description
# MAGIC  ,'OBSERVATION_PERIOD' as cdm_table_name
# MAGIC  ,'OBSERVATION_PERIOD_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_observation_period_observation_period_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(OBSERVATION_PERIOD_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION_PERIOD cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PERSON_ID is present in the OBSERVATION_PERIOD table as expected based on the specification.' as check_description
# MAGIC  ,'OBSERVATION_PERIOD' as cdm_table_name
# MAGIC  ,'PERSON_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_observation_period_person_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PERSON_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION_PERIOD cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if OBSERVATION_PERIOD_START_DATE is present in the OBSERVATION_PERIOD table as expected based on the specification.' as check_description
# MAGIC  ,'OBSERVATION_PERIOD' as cdm_table_name
# MAGIC  ,'OBSERVATION_PERIOD_START_DATE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_observation_period_observation_period_start_date' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(OBSERVATION_PERIOD_START_DATE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION_PERIOD cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if OBSERVATION_PERIOD_END_DATE is present in the OBSERVATION_PERIOD table as expected based on the specification.' as check_description
# MAGIC  ,'OBSERVATION_PERIOD' as cdm_table_name
# MAGIC  ,'OBSERVATION_PERIOD_END_DATE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_observation_period_observation_period_end_date' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(OBSERVATION_PERIOD_END_DATE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION_PERIOD cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PERIOD_TYPE_CONCEPT_ID is present in the OBSERVATION_PERIOD table as expected based on the specification.' as check_description
# MAGIC  ,'OBSERVATION_PERIOD' as cdm_table_name
# MAGIC  ,'PERIOD_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_observation_period_period_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PERIOD_TYPE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION_PERIOD cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PAYER_PLAN_PERIOD_ID is present in the PAYER_PLAN_PERIOD table as expected based on the specification.' as check_description
# MAGIC  ,'PAYER_PLAN_PERIOD' as cdm_table_name
# MAGIC  ,'PAYER_PLAN_PERIOD_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_payer_plan_period_payer_plan_period_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PAYER_PLAN_PERIOD_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PERSON_ID is present in the PAYER_PLAN_PERIOD table as expected based on the specification.' as check_description
# MAGIC  ,'PAYER_PLAN_PERIOD' as cdm_table_name
# MAGIC  ,'PERSON_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_payer_plan_period_person_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PERSON_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PAYER_PLAN_PERIOD_START_DATE is present in the PAYER_PLAN_PERIOD table as expected based on the specification.' as check_description
# MAGIC  ,'PAYER_PLAN_PERIOD' as cdm_table_name
# MAGIC  ,'PAYER_PLAN_PERIOD_START_DATE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_payer_plan_period_payer_plan_period_start_date' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PAYER_PLAN_PERIOD_START_DATE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PAYER_PLAN_PERIOD_END_DATE is present in the PAYER_PLAN_PERIOD table as expected based on the specification.' as check_description
# MAGIC  ,'PAYER_PLAN_PERIOD' as cdm_table_name
# MAGIC  ,'PAYER_PLAN_PERIOD_END_DATE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_payer_plan_period_payer_plan_period_end_date' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PAYER_PLAN_PERIOD_END_DATE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PAYER_CONCEPT_ID is present in the PAYER_PLAN_PERIOD table as expected based on the specification.' as check_description
# MAGIC  ,'PAYER_PLAN_PERIOD' as cdm_table_name
# MAGIC  ,'PAYER_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_payer_plan_period_payer_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PAYER_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PAYER_SOURCE_VALUE is present in the PAYER_PLAN_PERIOD table as expected based on the specification.' as check_description
# MAGIC  ,'PAYER_PLAN_PERIOD' as cdm_table_name
# MAGIC  ,'PAYER_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_payer_plan_period_payer_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PAYER_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PAYER_SOURCE_CONCEPT_ID is present in the PAYER_PLAN_PERIOD table as expected based on the specification.' as check_description
# MAGIC  ,'PAYER_PLAN_PERIOD' as cdm_table_name
# MAGIC  ,'PAYER_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_payer_plan_period_payer_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PAYER_SOURCE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PLAN_CONCEPT_ID is present in the PAYER_PLAN_PERIOD table as expected based on the specification.' as check_description
# MAGIC  ,'PAYER_PLAN_PERIOD' as cdm_table_name
# MAGIC  ,'PLAN_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_payer_plan_period_plan_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PLAN_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte
# MAGIC )
# MAGIC INSERT INTO ${results_catalog}.${results_schema}.dqdashboard_results
# MAGIC SELECT *
# MAGIC FROM cte_all;
# MAGIC WITH cte_all  AS (SELECT cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  , CAST('' as STRING) as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PLAN_SOURCE_VALUE is present in the PAYER_PLAN_PERIOD table as expected based on the specification.' as check_description
# MAGIC  ,'PAYER_PLAN_PERIOD' as cdm_table_name
# MAGIC  ,'PLAN_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_payer_plan_period_plan_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PLAN_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PLAN_SOURCE_CONCEPT_ID is present in the PAYER_PLAN_PERIOD table as expected based on the specification.' as check_description
# MAGIC  ,'PAYER_PLAN_PERIOD' as cdm_table_name
# MAGIC  ,'PLAN_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_payer_plan_period_plan_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PLAN_SOURCE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if SPONSOR_CONCEPT_ID is present in the PAYER_PLAN_PERIOD table as expected based on the specification.' as check_description
# MAGIC  ,'PAYER_PLAN_PERIOD' as cdm_table_name
# MAGIC  ,'SPONSOR_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_payer_plan_period_sponsor_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(SPONSOR_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if SPONSOR_SOURCE_VALUE is present in the PAYER_PLAN_PERIOD table as expected based on the specification.' as check_description
# MAGIC  ,'PAYER_PLAN_PERIOD' as cdm_table_name
# MAGIC  ,'SPONSOR_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_payer_plan_period_sponsor_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(SPONSOR_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if SPONSOR_SOURCE_CONCEPT_ID is present in the PAYER_PLAN_PERIOD table as expected based on the specification.' as check_description
# MAGIC  ,'PAYER_PLAN_PERIOD' as cdm_table_name
# MAGIC  ,'SPONSOR_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_payer_plan_period_sponsor_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(SPONSOR_SOURCE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if FAMILY_SOURCE_VALUE is present in the PAYER_PLAN_PERIOD table as expected based on the specification.' as check_description
# MAGIC  ,'PAYER_PLAN_PERIOD' as cdm_table_name
# MAGIC  ,'FAMILY_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_payer_plan_period_family_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(FAMILY_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if STOP_REASON_CONCEPT_ID is present in the PAYER_PLAN_PERIOD table as expected based on the specification.' as check_description
# MAGIC  ,'PAYER_PLAN_PERIOD' as cdm_table_name
# MAGIC  ,'STOP_REASON_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_payer_plan_period_stop_reason_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(STOP_REASON_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if STOP_REASON_SOURCE_VALUE is present in the PAYER_PLAN_PERIOD table as expected based on the specification.' as check_description
# MAGIC  ,'PAYER_PLAN_PERIOD' as cdm_table_name
# MAGIC  ,'STOP_REASON_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_payer_plan_period_stop_reason_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(STOP_REASON_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if STOP_REASON_SOURCE_CONCEPT_ID is present in the PAYER_PLAN_PERIOD table as expected based on the specification.' as check_description
# MAGIC  ,'PAYER_PLAN_PERIOD' as cdm_table_name
# MAGIC  ,'STOP_REASON_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_payer_plan_period_stop_reason_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(STOP_REASON_SOURCE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PAYER_PLAN_PERIOD cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PERSON_ID is present in the PERSON table as expected based on the specification.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'PERSON_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_person_person_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PERSON_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if GENDER_CONCEPT_ID is present in the PERSON table as expected based on the specification.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'GENDER_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_person_gender_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(GENDER_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if YEAR_OF_BIRTH is present in the PERSON table as expected based on the specification.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'YEAR_OF_BIRTH' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_person_year_of_birth' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(YEAR_OF_BIRTH) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if MONTH_OF_BIRTH is present in the PERSON table as expected based on the specification.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'MONTH_OF_BIRTH' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_person_month_of_birth' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(MONTH_OF_BIRTH) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DAY_OF_BIRTH is present in the PERSON table as expected based on the specification.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'DAY_OF_BIRTH' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_person_day_of_birth' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DAY_OF_BIRTH) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if birth_timestamp is present in the PERSON table as expected based on the specification.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'birth_timestamp' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_person_birth_timestamp' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(birth_timestamp) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if RACE_CONCEPT_ID is present in the PERSON table as expected based on the specification.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'RACE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_person_race_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(RACE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if ETHNICITY_CONCEPT_ID is present in the PERSON table as expected based on the specification.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'ETHNICITY_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_person_ethnicity_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(ETHNICITY_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if LOCATION_ID is present in the PERSON table as expected based on the specification.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'LOCATION_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_person_location_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(LOCATION_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PROVIDER_ID is present in the PERSON table as expected based on the specification.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'PROVIDER_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_person_provider_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PROVIDER_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if CARE_SITE_ID is present in the PERSON table as expected based on the specification.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'CARE_SITE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_person_care_site_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(CARE_SITE_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PERSON_SOURCE_VALUE is present in the PERSON table as expected based on the specification.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'PERSON_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_person_person_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PERSON_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if GENDER_SOURCE_VALUE is present in the PERSON table as expected based on the specification.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'GENDER_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_person_gender_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(GENDER_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if GENDER_SOURCE_CONCEPT_ID is present in the PERSON table as expected based on the specification.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'GENDER_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_person_gender_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(GENDER_SOURCE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if RACE_SOURCE_VALUE is present in the PERSON table as expected based on the specification.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'RACE_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_person_race_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(RACE_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if RACE_SOURCE_CONCEPT_ID is present in the PERSON table as expected based on the specification.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'RACE_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_person_race_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(RACE_SOURCE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if ETHNICITY_SOURCE_VALUE is present in the PERSON table as expected based on the specification.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'ETHNICITY_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_person_ethnicity_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(ETHNICITY_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if ETHNICITY_SOURCE_CONCEPT_ID is present in the PERSON table as expected based on the specification.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'ETHNICITY_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_person_ethnicity_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(ETHNICITY_SOURCE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PROCEDURE_OCCURRENCE_ID is present in the PROCEDURE_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'PROCEDURE_OCCURRENCE' as cdm_table_name
# MAGIC  ,'PROCEDURE_OCCURRENCE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_procedure_occurrence_procedure_occurrence_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PROCEDURE_OCCURRENCE_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PERSON_ID is present in the PROCEDURE_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'PROCEDURE_OCCURRENCE' as cdm_table_name
# MAGIC  ,'PERSON_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_procedure_occurrence_person_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PERSON_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PROCEDURE_CONCEPT_ID is present in the PROCEDURE_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'PROCEDURE_OCCURRENCE' as cdm_table_name
# MAGIC  ,'PROCEDURE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_procedure_occurrence_procedure_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PROCEDURE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PROCEDURE_DATE is present in the PROCEDURE_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'PROCEDURE_OCCURRENCE' as cdm_table_name
# MAGIC  ,'PROCEDURE_DATE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_procedure_occurrence_procedure_date' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PROCEDURE_DATE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PROCEDURE_DATETIME is present in the PROCEDURE_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'PROCEDURE_OCCURRENCE' as cdm_table_name
# MAGIC  ,'PROCEDURE_DATETIME' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_procedure_occurrence_procedure_datetime' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PROCEDURE_DATETIME) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PROCEDURE_TYPE_CONCEPT_ID is present in the PROCEDURE_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'PROCEDURE_OCCURRENCE' as cdm_table_name
# MAGIC  ,'PROCEDURE_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_procedure_occurrence_procedure_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PROCEDURE_TYPE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if MODIFIER_CONCEPT_ID is present in the PROCEDURE_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'PROCEDURE_OCCURRENCE' as cdm_table_name
# MAGIC  ,'MODIFIER_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_procedure_occurrence_modifier_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(MODIFIER_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if QUANTITY is present in the PROCEDURE_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'PROCEDURE_OCCURRENCE' as cdm_table_name
# MAGIC  ,'QUANTITY' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_procedure_occurrence_quantity' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(QUANTITY) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PROVIDER_ID is present in the PROCEDURE_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'PROCEDURE_OCCURRENCE' as cdm_table_name
# MAGIC  ,'PROVIDER_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_procedure_occurrence_provider_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PROVIDER_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VISIT_OCCURRENCE_ID is present in the PROCEDURE_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'PROCEDURE_OCCURRENCE' as cdm_table_name
# MAGIC  ,'VISIT_OCCURRENCE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_procedure_occurrence_visit_occurrence_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VISIT_OCCURRENCE_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VISIT_DETAIL_ID is present in the PROCEDURE_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'PROCEDURE_OCCURRENCE' as cdm_table_name
# MAGIC  ,'VISIT_DETAIL_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_procedure_occurrence_visit_detail_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VISIT_DETAIL_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PROCEDURE_SOURCE_VALUE is present in the PROCEDURE_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'PROCEDURE_OCCURRENCE' as cdm_table_name
# MAGIC  ,'PROCEDURE_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_procedure_occurrence_procedure_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PROCEDURE_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PROCEDURE_SOURCE_CONCEPT_ID is present in the PROCEDURE_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'PROCEDURE_OCCURRENCE' as cdm_table_name
# MAGIC  ,'PROCEDURE_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_procedure_occurrence_procedure_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PROCEDURE_SOURCE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if MODIFIER_SOURCE_VALUE is present in the PROCEDURE_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'PROCEDURE_OCCURRENCE' as cdm_table_name
# MAGIC  ,'MODIFIER_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_procedure_occurrence_modifier_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(MODIFIER_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PROVIDER_ID is present in the PROVIDER table as expected based on the specification.' as check_description
# MAGIC  ,'PROVIDER' as cdm_table_name
# MAGIC  ,'PROVIDER_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_provider_provider_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PROVIDER_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROVIDER cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PROVIDER_NAME is present in the PROVIDER table as expected based on the specification.' as check_description
# MAGIC  ,'PROVIDER' as cdm_table_name
# MAGIC  ,'PROVIDER_NAME' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_provider_provider_name' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PROVIDER_NAME) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROVIDER cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if NPI is present in the PROVIDER table as expected based on the specification.' as check_description
# MAGIC  ,'PROVIDER' as cdm_table_name
# MAGIC  ,'NPI' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_provider_npi' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(NPI) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROVIDER cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DEA is present in the PROVIDER table as expected based on the specification.' as check_description
# MAGIC  ,'PROVIDER' as cdm_table_name
# MAGIC  ,'DEA' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_provider_dea' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DEA) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROVIDER cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if SPECIALTY_CONCEPT_ID is present in the PROVIDER table as expected based on the specification.' as check_description
# MAGIC  ,'PROVIDER' as cdm_table_name
# MAGIC  ,'SPECIALTY_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_provider_specialty_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(SPECIALTY_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROVIDER cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if CARE_SITE_ID is present in the PROVIDER table as expected based on the specification.' as check_description
# MAGIC  ,'PROVIDER' as cdm_table_name
# MAGIC  ,'CARE_SITE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_provider_care_site_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(CARE_SITE_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROVIDER cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if YEAR_OF_BIRTH is present in the PROVIDER table as expected based on the specification.' as check_description
# MAGIC  ,'PROVIDER' as cdm_table_name
# MAGIC  ,'YEAR_OF_BIRTH' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_provider_year_of_birth' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(YEAR_OF_BIRTH) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROVIDER cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if GENDER_CONCEPT_ID is present in the PROVIDER table as expected based on the specification.' as check_description
# MAGIC  ,'PROVIDER' as cdm_table_name
# MAGIC  ,'GENDER_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_provider_gender_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(GENDER_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROVIDER cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PROVIDER_SOURCE_VALUE is present in the PROVIDER table as expected based on the specification.' as check_description
# MAGIC  ,'PROVIDER' as cdm_table_name
# MAGIC  ,'PROVIDER_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_provider_provider_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PROVIDER_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROVIDER cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if SPECIALTY_SOURCE_VALUE is present in the PROVIDER table as expected based on the specification.' as check_description
# MAGIC  ,'PROVIDER' as cdm_table_name
# MAGIC  ,'SPECIALTY_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_provider_specialty_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(SPECIALTY_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROVIDER cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if SPECIALTY_SOURCE_CONCEPT_ID is present in the PROVIDER table as expected based on the specification.' as check_description
# MAGIC  ,'PROVIDER' as cdm_table_name
# MAGIC  ,'SPECIALTY_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_provider_specialty_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(SPECIALTY_SOURCE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROVIDER cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if GENDER_SOURCE_VALUE is present in the PROVIDER table as expected based on the specification.' as check_description
# MAGIC  ,'PROVIDER' as cdm_table_name
# MAGIC  ,'GENDER_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_provider_gender_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(GENDER_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROVIDER cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if GENDER_SOURCE_CONCEPT_ID is present in the PROVIDER table as expected based on the specification.' as check_description
# MAGIC  ,'PROVIDER' as cdm_table_name
# MAGIC  ,'GENDER_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_provider_gender_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(GENDER_SOURCE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROVIDER cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if SPECIMEN_ID is present in the SPECIMEN table as expected based on the specification.' as check_description
# MAGIC  ,'SPECIMEN' as cdm_table_name
# MAGIC  ,'SPECIMEN_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_specimen_specimen_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(SPECIMEN_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PERSON_ID is present in the SPECIMEN table as expected based on the specification.' as check_description
# MAGIC  ,'SPECIMEN' as cdm_table_name
# MAGIC  ,'PERSON_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_specimen_person_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PERSON_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if SPECIMEN_CONCEPT_ID is present in the SPECIMEN table as expected based on the specification.' as check_description
# MAGIC  ,'SPECIMEN' as cdm_table_name
# MAGIC  ,'SPECIMEN_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_specimen_specimen_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(SPECIMEN_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if SPECIMEN_TYPE_CONCEPT_ID is present in the SPECIMEN table as expected based on the specification.' as check_description
# MAGIC  ,'SPECIMEN' as cdm_table_name
# MAGIC  ,'SPECIMEN_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_specimen_specimen_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(SPECIMEN_TYPE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if SPECIMEN_DATE is present in the SPECIMEN table as expected based on the specification.' as check_description
# MAGIC  ,'SPECIMEN' as cdm_table_name
# MAGIC  ,'SPECIMEN_DATE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_specimen_specimen_date' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(SPECIMEN_DATE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if specimen_timestamp is present in the SPECIMEN table as expected based on the specification.' as check_description
# MAGIC  ,'SPECIMEN' as cdm_table_name
# MAGIC  ,'specimen_timestamp' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_specimen_specimen_timestamp' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(specimen_timestamp) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if QUANTITY is present in the SPECIMEN table as expected based on the specification.' as check_description
# MAGIC  ,'SPECIMEN' as cdm_table_name
# MAGIC  ,'QUANTITY' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_specimen_quantity' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(QUANTITY) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if UNIT_CONCEPT_ID is present in the SPECIMEN table as expected based on the specification.' as check_description
# MAGIC  ,'SPECIMEN' as cdm_table_name
# MAGIC  ,'UNIT_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_specimen_unit_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(UNIT_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if ANATOMIC_SITE_CONCEPT_ID is present in the SPECIMEN table as expected based on the specification.' as check_description
# MAGIC  ,'SPECIMEN' as cdm_table_name
# MAGIC  ,'ANATOMIC_SITE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_specimen_anatomic_site_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(ANATOMIC_SITE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DISEASE_STATUS_CONCEPT_ID is present in the SPECIMEN table as expected based on the specification.' as check_description
# MAGIC  ,'SPECIMEN' as cdm_table_name
# MAGIC  ,'DISEASE_STATUS_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_specimen_disease_status_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DISEASE_STATUS_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if SPECIMEN_SOURCE_ID is present in the SPECIMEN table as expected based on the specification.' as check_description
# MAGIC  ,'SPECIMEN' as cdm_table_name
# MAGIC  ,'SPECIMEN_SOURCE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_specimen_specimen_source_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(SPECIMEN_SOURCE_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if SPECIMEN_SOURCE_VALUE is present in the SPECIMEN table as expected based on the specification.' as check_description
# MAGIC  ,'SPECIMEN' as cdm_table_name
# MAGIC  ,'SPECIMEN_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_specimen_specimen_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(SPECIMEN_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if UNIT_SOURCE_VALUE is present in the SPECIMEN table as expected based on the specification.' as check_description
# MAGIC  ,'SPECIMEN' as cdm_table_name
# MAGIC  ,'UNIT_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_specimen_unit_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(UNIT_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if ANATOMIC_SITE_SOURCE_VALUE is present in the SPECIMEN table as expected based on the specification.' as check_description
# MAGIC  ,'SPECIMEN' as cdm_table_name
# MAGIC  ,'ANATOMIC_SITE_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_specimen_anatomic_site_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(ANATOMIC_SITE_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DISEASE_STATUS_SOURCE_VALUE is present in the SPECIMEN table as expected based on the specification.' as check_description
# MAGIC  ,'SPECIMEN' as cdm_table_name
# MAGIC  ,'DISEASE_STATUS_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_specimen_disease_status_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DISEASE_STATUS_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VISIT_DETAIL_ID is present in the VISIT_DETAIL table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'VISIT_DETAIL_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_detail_visit_detail_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VISIT_DETAIL_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PERSON_ID is present in the VISIT_DETAIL table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'PERSON_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_detail_person_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PERSON_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VISIT_DETAIL_CONCEPT_ID is present in the VISIT_DETAIL table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'VISIT_DETAIL_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_detail_visit_detail_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VISIT_DETAIL_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VISIT_DETAIL_START_DATE is present in the VISIT_DETAIL table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'VISIT_DETAIL_START_DATE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_detail_visit_detail_start_date' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VISIT_DETAIL_START_DATE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if visit_detail_start_timestamp is present in the VISIT_DETAIL table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'visit_detail_start_timestamp' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_detail_visit_detail_start_timestamp' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(visit_detail_start_timestamp) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VISIT_DETAIL_END_DATE is present in the VISIT_DETAIL table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'VISIT_DETAIL_END_DATE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_detail_visit_detail_end_date' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VISIT_DETAIL_END_DATE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if visit_detail_end_timestamp is present in the VISIT_DETAIL table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'visit_detail_end_timestamp' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_detail_visit_detail_end_timestamp' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(visit_detail_end_timestamp) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VISIT_DETAIL_TYPE_CONCEPT_ID is present in the VISIT_DETAIL table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'VISIT_DETAIL_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_detail_visit_detail_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VISIT_DETAIL_TYPE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PROVIDER_ID is present in the VISIT_DETAIL table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'PROVIDER_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_detail_provider_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PROVIDER_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if CARE_SITE_ID is present in the VISIT_DETAIL table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'CARE_SITE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_detail_care_site_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(CARE_SITE_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VISIT_DETAIL_SOURCE_VALUE is present in the VISIT_DETAIL table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'VISIT_DETAIL_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_detail_visit_detail_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VISIT_DETAIL_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VISIT_DETAIL_SOURCE_CONCEPT_ID is present in the VISIT_DETAIL table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'VISIT_DETAIL_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_detail_visit_detail_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VISIT_DETAIL_SOURCE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if admitted_from_source_VALUE is present in the VISIT_DETAIL table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'admitted_from_source_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_detail_admitted_from_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(admitted_from_source_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if admitted_from_concept_id is present in the VISIT_DETAIL table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'admitted_from_concept_id' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_detail_admitted_from_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(admitted_from_concept_id) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if discharged_TO_SOURCE_VALUE is present in the VISIT_DETAIL table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'discharged_TO_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_detail_discharged_to_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(discharged_TO_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DISCHARGED_TO_CONCEPT_ID is present in the VISIT_DETAIL table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'DISCHARGED_TO_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_detail_DISCHARGED_TO_CONCEPT_ID' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DISCHARGED_TO_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PRECEDING_VISIT_DETAIL_ID is present in the VISIT_DETAIL table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'PRECEDING_VISIT_DETAIL_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_detail_preceding_visit_detail_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PRECEDING_VISIT_DETAIL_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if parent_visit_detail_id is present in the VISIT_DETAIL table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'parent_visit_detail_id' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_detail_parent_visit_detail_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(parent_visit_detail_id) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VISIT_OCCURRENCE_ID is present in the VISIT_DETAIL table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'VISIT_OCCURRENCE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_detail_visit_occurrence_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VISIT_OCCURRENCE_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VISIT_OCCURRENCE_ID is present in the VISIT_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'VISIT_OCCURRENCE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_occurrence_visit_occurrence_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VISIT_OCCURRENCE_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PERSON_ID is present in the VISIT_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'PERSON_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_occurrence_person_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PERSON_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VISIT_CONCEPT_ID is present in the VISIT_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'VISIT_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_occurrence_visit_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VISIT_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VISIT_START_DATE is present in the VISIT_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'VISIT_START_DATE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_occurrence_visit_start_date' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VISIT_START_DATE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if visit_start_timestamp is present in the VISIT_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'visit_start_timestamp' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_occurrence_visit_start_timestamp' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(visit_start_timestamp) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VISIT_END_DATE is present in the VISIT_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'VISIT_END_DATE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_occurrence_visit_end_date' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VISIT_END_DATE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if visit_end_timestamp is present in the VISIT_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'visit_end_timestamp' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_occurrence_visit_end_timestamp' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(visit_end_timestamp) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VISIT_TYPE_CONCEPT_ID is present in the VISIT_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'VISIT_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_occurrence_visit_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VISIT_TYPE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PROVIDER_ID is present in the VISIT_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'PROVIDER_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_occurrence_provider_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PROVIDER_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if CARE_SITE_ID is present in the VISIT_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'CARE_SITE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_occurrence_care_site_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(CARE_SITE_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VISIT_SOURCE_VALUE is present in the VISIT_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'VISIT_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_occurrence_visit_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VISIT_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if VISIT_SOURCE_CONCEPT_ID is present in the VISIT_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'VISIT_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_occurrence_visit_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(VISIT_SOURCE_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte
# MAGIC )
# MAGIC INSERT INTO ${results_catalog}.${results_schema}.dqdashboard_results
# MAGIC SELECT *
# MAGIC FROM cte_all;
# MAGIC WITH cte_all  AS (SELECT cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  , CAST('' as STRING) as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if admitted_from_concept_id is present in the VISIT_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'admitted_from_concept_id' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_occurrence_admitted_from_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(admitted_from_concept_id) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if admitted_from_source_VALUE is present in the VISIT_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'admitted_from_source_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_occurrence_admitted_from_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(admitted_from_source_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if DISCHARGED_TO_CONCEPT_ID is present in the VISIT_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'DISCHARGED_TO_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_occurrence_DISCHARGED_TO_CONCEPT_ID' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(DISCHARGED_TO_CONCEPT_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if discharged_TO_SOURCE_VALUE is present in the VISIT_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'discharged_TO_SOURCE_VALUE' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_occurrence_discharged_to_source_value' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(discharged_TO_SOURCE_VALUE) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'cdmField' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'A yes or no value indicating if PRECEDING_VISIT_OCCURRENCE_ID is present in the VISIT_OCCURRENCE table as expected based on the specification.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'PRECEDING_VISIT_OCCURRENCE_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_cdm_field.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Relational' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_cdmfield_visit_occurrence_preceding_visit_occurrence_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT num_violated_rows FROM (
# MAGIC  SELECT
# MAGIC  CASE 
# MAGIC  WHEN COUNT(PRECEDING_VISIT_OCCURRENCE_ID) = 0 THEN 0
# MAGIC  ELSE 0
# MAGIC  END AS num_violated_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 1 AS num_rows
# MAGIC ) denominator
# MAGIC ) cte
# MAGIC )
# MAGIC INSERT INTO ${results_catalog}.${results_schema}.dqdashboard_results
# MAGIC SELECT *
# MAGIC FROM cte_all;
# MAGIC
# MAGIC

# COMMAND ----------

# MAGIC %sql
# MAGIC -- field source concept record completeness
# MAGIC
# MAGIC WITH cte_all  AS (SELECT cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  , CAST('' as STRING) as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'sourceConceptRecordCompleteness' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records with a value of 0 in the source concept field CONDITION_SOURCE_CONCEPT_ID in the CONDITION_OCCURRENCE table.' as check_description
# MAGIC  ,'CONDITION_OCCURRENCE' as cdm_table_name
# MAGIC  ,'CONDITION_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_concept_record_completeness.sql' as sql_file
# MAGIC  ,'Completeness' as category
# MAGIC  ,'NA' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_sourceconceptrecordcompleteness_condition_occurrence_condition_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 10 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 10 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,10 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'CONDITION_OCCURRENCE.CONDITION_SOURCE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC  WHERE cdmTable.CONDITION_SOURCE_CONCEPT_ID = 0 
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'sourceConceptRecordCompleteness' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records with a value of 0 in the source concept field CAUSE_SOURCE_CONCEPT_ID in the DEATH table.' as check_description
# MAGIC  ,'DEATH' as cdm_table_name
# MAGIC  ,'CAUSE_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_concept_record_completeness.sql' as sql_file
# MAGIC  ,'Completeness' as category
# MAGIC  ,'NA' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_sourceconceptrecordcompleteness_death_cause_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 10 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 10 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,10 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DEATH.CAUSE_SOURCE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEATH cdmTable
# MAGIC  WHERE cdmTable.CAUSE_SOURCE_CONCEPT_ID = 0 
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEATH cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'sourceConceptRecordCompleteness' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records with a value of 0 in the source concept field DEVICE_SOURCE_CONCEPT_ID in the DEVICE_EXPOSURE table.' as check_description
# MAGIC  ,'DEVICE_EXPOSURE' as cdm_table_name
# MAGIC  ,'DEVICE_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_concept_record_completeness.sql' as sql_file
# MAGIC  ,'Completeness' as category
# MAGIC  ,'NA' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_sourceconceptrecordcompleteness_device_exposure_device_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 10 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 10 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,10 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DEVICE_EXPOSURE.DEVICE_SOURCE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC  WHERE cdmTable.DEVICE_SOURCE_CONCEPT_ID = 0 
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'sourceConceptRecordCompleteness' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records with a value of 0 in the source concept field DRUG_SOURCE_CONCEPT_ID in the DRUG_EXPOSURE table.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'DRUG_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_concept_record_completeness.sql' as sql_file
# MAGIC  ,'Completeness' as category
# MAGIC  ,'NA' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_sourceconceptrecordcompleteness_drug_exposure_drug_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 10 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 10 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,10 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DRUG_EXPOSURE.DRUG_SOURCE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  WHERE cdmTable.DRUG_SOURCE_CONCEPT_ID = 0 
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'sourceConceptRecordCompleteness' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records with a value of 0 in the source concept field MEASUREMENT_SOURCE_CONCEPT_ID in the MEASUREMENT table.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'MEASUREMENT_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_concept_record_completeness.sql' as sql_file
# MAGIC  ,'Completeness' as category
# MAGIC  ,'NA' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_sourceconceptrecordcompleteness_measurement_measurement_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 10 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 10 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,10 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'MEASUREMENT.MEASUREMENT_SOURCE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  WHERE cdmTable.MEASUREMENT_SOURCE_CONCEPT_ID = 0 
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'sourceConceptRecordCompleteness' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records with a value of 0 in the source concept field OBSERVATION_SOURCE_CONCEPT_ID in the OBSERVATION table.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'OBSERVATION_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_concept_record_completeness.sql' as sql_file
# MAGIC  ,'Completeness' as category
# MAGIC  ,'NA' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_sourceconceptrecordcompleteness_observation_observation_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 10 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 10 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,10 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'OBSERVATION.OBSERVATION_SOURCE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  WHERE cdmTable.OBSERVATION_SOURCE_CONCEPT_ID = 0 
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'sourceConceptRecordCompleteness' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records with a value of 0 in the source concept field GENDER_SOURCE_CONCEPT_ID in the PERSON table.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'GENDER_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_concept_record_completeness.sql' as sql_file
# MAGIC  ,'Completeness' as category
# MAGIC  ,'NA' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_sourceconceptrecordcompleteness_person_gender_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 100 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 100 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,100 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PERSON.GENDER_SOURCE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  WHERE cdmTable.GENDER_SOURCE_CONCEPT_ID = 0 
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'sourceConceptRecordCompleteness' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records with a value of 0 in the source concept field RACE_SOURCE_CONCEPT_ID in the PERSON table.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'RACE_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_concept_record_completeness.sql' as sql_file
# MAGIC  ,'Completeness' as category
# MAGIC  ,'NA' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_sourceconceptrecordcompleteness_person_race_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 100 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 100 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,100 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PERSON.RACE_SOURCE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  WHERE cdmTable.RACE_SOURCE_CONCEPT_ID = 0 
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'sourceConceptRecordCompleteness' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records with a value of 0 in the source concept field ETHNICITY_SOURCE_CONCEPT_ID in the PERSON table.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'ETHNICITY_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_concept_record_completeness.sql' as sql_file
# MAGIC  ,'Completeness' as category
# MAGIC  ,'NA' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_sourceconceptrecordcompleteness_person_ethnicity_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 100 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 100 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,100 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PERSON.ETHNICITY_SOURCE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  WHERE cdmTable.ETHNICITY_SOURCE_CONCEPT_ID = 0 
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'sourceConceptRecordCompleteness' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records with a value of 0 in the source concept field PROCEDURE_SOURCE_CONCEPT_ID in the PROCEDURE_OCCURRENCE table.' as check_description
# MAGIC  ,'PROCEDURE_OCCURRENCE' as cdm_table_name
# MAGIC  ,'PROCEDURE_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_concept_record_completeness.sql' as sql_file
# MAGIC  ,'Completeness' as category
# MAGIC  ,'NA' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_sourceconceptrecordcompleteness_procedure_occurrence_procedure_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 10 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 10 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,10 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PROCEDURE_OCCURRENCE.PROCEDURE_SOURCE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC  WHERE cdmTable.PROCEDURE_SOURCE_CONCEPT_ID = 0 
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'sourceConceptRecordCompleteness' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records with a value of 0 in the source concept field SPECIALTY_SOURCE_CONCEPT_ID in the PROVIDER table.' as check_description
# MAGIC  ,'PROVIDER' as cdm_table_name
# MAGIC  ,'SPECIALTY_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_concept_record_completeness.sql' as sql_file
# MAGIC  ,'Completeness' as category
# MAGIC  ,'NA' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_sourceconceptrecordcompleteness_provider_specialty_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 100 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 100 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,100 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PROVIDER.SPECIALTY_SOURCE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROVIDER cdmTable
# MAGIC  WHERE cdmTable.SPECIALTY_SOURCE_CONCEPT_ID = 0 
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROVIDER cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'sourceConceptRecordCompleteness' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records with a value of 0 in the source concept field VISIT_DETAIL_SOURCE_CONCEPT_ID in the VISIT_DETAIL table.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'VISIT_DETAIL_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_concept_record_completeness.sql' as sql_file
# MAGIC  ,'Completeness' as category
# MAGIC  ,'NA' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_sourceconceptrecordcompleteness_visit_detail_visit_detail_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 100 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 100 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,100 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_DETAIL.VISIT_DETAIL_SOURCE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  WHERE cdmTable.VISIT_DETAIL_SOURCE_CONCEPT_ID = 0 
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'sourceConceptRecordCompleteness' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records with a value of 0 in the source concept field admitted_from_concept_id in the VISIT_DETAIL table.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'admitted_from_concept_id' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_concept_record_completeness.sql' as sql_file
# MAGIC  ,'Completeness' as category
# MAGIC  ,'NA' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_sourceconceptrecordcompleteness_visit_detail_admitted_from_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 100 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 100 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,100 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_DETAIL.admitted_from_concept_id' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  WHERE cdmTable.admitted_from_concept_id = 0 
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'sourceConceptRecordCompleteness' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records with a value of 0 in the source concept field VISIT_SOURCE_CONCEPT_ID in the VISIT_OCCURRENCE table.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'VISIT_SOURCE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_concept_record_completeness.sql' as sql_file
# MAGIC  ,'Completeness' as category
# MAGIC  ,'NA' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_sourceconceptrecordcompleteness_visit_occurrence_visit_source_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 100 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 100 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,100 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE 
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_OCCURRENCE.VISIT_SOURCE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  WHERE cdmTable.VISIT_SOURCE_CONCEPT_ID = 0 
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte
# MAGIC )
# MAGIC INSERT INTO ${results_catalog}.${results_schema}.dqdashboard_results
# MAGIC SELECT *
# MAGIC FROM cte_all;
# MAGIC

# COMMAND ----------

# MAGIC %sql
# MAGIC -- field fk domain
# MAGIC
# MAGIC WITH cte_all  AS (SELECT cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  , CAST('' as STRING) as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'fkDomain' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the CONDITION_CONCEPT_ID field in the CONDITION_ERA table that do not conform to the CONDITION domain.' as check_description
# MAGIC  ,'CONDITION_ERA' as cdm_table_name
# MAGIC  ,'CONDITION_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_fk_domain.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_fkdomain_condition_era_condition_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'CONDITION_ERA.CONDITION_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_ERA cdmTable
# MAGIC  LEFT JOIN ${omop_catalog}.${omop_schema}.concept co
# MAGIC  ON cdmTable.CONDITION_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND co.domain_id NOT IN ('Condition')
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_ERA cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'fkDomain' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the CONDITION_CONCEPT_ID field in the CONDITION_OCCURRENCE table that do not conform to the CONDITION domain.' as check_description
# MAGIC  ,'CONDITION_OCCURRENCE' as cdm_table_name
# MAGIC  ,'CONDITION_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_fk_domain.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_fkdomain_condition_occurrence_condition_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'CONDITION_OCCURRENCE.CONDITION_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC  LEFT JOIN ${omop_catalog}.${omop_schema}.concept co
# MAGIC  ON cdmTable.CONDITION_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND co.domain_id NOT IN ('Condition')
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'fkDomain' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the CONDITION_TYPE_CONCEPT_ID field in the CONDITION_OCCURRENCE table that do not conform to the TYPE CONCEPT domain.' as check_description
# MAGIC  ,'CONDITION_OCCURRENCE' as cdm_table_name
# MAGIC  ,'CONDITION_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_fk_domain.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_fkdomain_condition_occurrence_condition_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'CONDITION_OCCURRENCE.CONDITION_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC  LEFT JOIN ${omop_catalog}.${omop_schema}.concept co
# MAGIC  ON cdmTable.CONDITION_TYPE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND co.domain_id NOT IN ('Type Concept')
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.CONDITION_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'fkDomain' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the DEATH_TYPE_CONCEPT_ID field in the DEATH table that do not conform to the TYPE CONCEPT domain.' as check_description
# MAGIC  ,'DEATH' as cdm_table_name
# MAGIC  ,'DEATH_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_fk_domain.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_fkdomain_death_death_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DEATH.DEATH_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEATH cdmTable
# MAGIC  LEFT JOIN ${omop_catalog}.${omop_schema}.concept co
# MAGIC  ON cdmTable.DEATH_TYPE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND co.domain_id NOT IN ('Type Concept')
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEATH cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'fkDomain' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the DEVICE_CONCEPT_ID field in the DEVICE_EXPOSURE table that do not conform to the DEVICE domain.' as check_description
# MAGIC  ,'DEVICE_EXPOSURE' as cdm_table_name
# MAGIC  ,'DEVICE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_fk_domain.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_fkdomain_device_exposure_device_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DEVICE_EXPOSURE.DEVICE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC  LEFT JOIN ${omop_catalog}.${omop_schema}.concept co
# MAGIC  ON cdmTable.DEVICE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND co.domain_id NOT IN ('Device')
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'fkDomain' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the DEVICE_TYPE_CONCEPT_ID field in the DEVICE_EXPOSURE table that do not conform to the TYPE CONCEPT domain.' as check_description
# MAGIC  ,'DEVICE_EXPOSURE' as cdm_table_name
# MAGIC  ,'DEVICE_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_fk_domain.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_fkdomain_device_exposure_device_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DEVICE_EXPOSURE.DEVICE_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC  LEFT JOIN ${omop_catalog}.${omop_schema}.concept co
# MAGIC  ON cdmTable.DEVICE_TYPE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND co.domain_id NOT IN ('Type Concept')
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DEVICE_EXPOSURE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'fkDomain' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the DRUG_CONCEPT_ID field in the DOSE_ERA table that do not conform to the DRUG domain.' as check_description
# MAGIC  ,'DOSE_ERA' as cdm_table_name
# MAGIC  ,'DRUG_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_fk_domain.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_fkdomain_dose_era_drug_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DOSE_ERA.DRUG_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DOSE_ERA cdmTable
# MAGIC  LEFT JOIN ${omop_catalog}.${omop_schema}.concept co
# MAGIC  ON cdmTable.DRUG_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND co.domain_id NOT IN ('Drug')
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DOSE_ERA cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'fkDomain' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the UNIT_CONCEPT_ID field in the DOSE_ERA table that do not conform to the UNIT domain.' as check_description
# MAGIC  ,'DOSE_ERA' as cdm_table_name
# MAGIC  ,'UNIT_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_fk_domain.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_fkdomain_dose_era_unit_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DOSE_ERA.UNIT_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DOSE_ERA cdmTable
# MAGIC  LEFT JOIN ${omop_catalog}.${omop_schema}.concept co
# MAGIC  ON cdmTable.UNIT_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND co.domain_id NOT IN ('Unit')
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DOSE_ERA cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'fkDomain' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the DRUG_CONCEPT_ID field in the DRUG_ERA table that do not conform to the DRUG domain.' as check_description
# MAGIC  ,'DRUG_ERA' as cdm_table_name
# MAGIC  ,'DRUG_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_fk_domain.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_fkdomain_drug_era_drug_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DRUG_ERA.DRUG_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_ERA cdmTable
# MAGIC  LEFT JOIN ${omop_catalog}.${omop_schema}.concept co
# MAGIC  ON cdmTable.DRUG_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND co.domain_id NOT IN ('Drug')
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_ERA cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'fkDomain' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the DRUG_CONCEPT_ID field in the DRUG_EXPOSURE table that do not conform to the DRUG domain.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'DRUG_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_fk_domain.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_fkdomain_drug_exposure_drug_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DRUG_EXPOSURE.DRUG_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  LEFT JOIN ${omop_catalog}.${omop_schema}.concept co
# MAGIC  ON cdmTable.DRUG_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND co.domain_id NOT IN ('Drug')
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'fkDomain' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the DRUG_TYPE_CONCEPT_ID field in the DRUG_EXPOSURE table that do not conform to the TYPE CONCEPT domain.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'DRUG_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_fk_domain.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_fkdomain_drug_exposure_drug_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DRUG_EXPOSURE.DRUG_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  LEFT JOIN ${omop_catalog}.${omop_schema}.concept co
# MAGIC  ON cdmTable.DRUG_TYPE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND co.domain_id NOT IN ('Type Concept')
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'fkDomain' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the ROUTE_CONCEPT_ID field in the DRUG_EXPOSURE table that do not conform to the ROUTE domain.' as check_description
# MAGIC  ,'DRUG_EXPOSURE' as cdm_table_name
# MAGIC  ,'ROUTE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_fk_domain.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_fkdomain_drug_exposure_route_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'DRUG_EXPOSURE.ROUTE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC  LEFT JOIN ${omop_catalog}.${omop_schema}.concept co
# MAGIC  ON cdmTable.ROUTE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND co.domain_id NOT IN ('Route')
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.DRUG_EXPOSURE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'fkDomain' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the MEASUREMENT_CONCEPT_ID field in the MEASUREMENT table that do not conform to the MEASUREMENT domain.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'MEASUREMENT_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_fk_domain.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_fkdomain_measurement_measurement_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'MEASUREMENT.MEASUREMENT_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  LEFT JOIN ${omop_catalog}.${omop_schema}.concept co
# MAGIC  ON cdmTable.MEASUREMENT_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND co.domain_id NOT IN ('Measurement')
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'fkDomain' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the MEASUREMENT_TYPE_CONCEPT_ID field in the MEASUREMENT table that do not conform to the TYPE CONCEPT domain.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'MEASUREMENT_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_fk_domain.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_fkdomain_measurement_measurement_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'MEASUREMENT.MEASUREMENT_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  LEFT JOIN ${omop_catalog}.${omop_schema}.concept co
# MAGIC  ON cdmTable.MEASUREMENT_TYPE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND co.domain_id NOT IN ('Type Concept')
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'fkDomain' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the UNIT_CONCEPT_ID field in the MEASUREMENT table that do not conform to the UNIT domain.' as check_description
# MAGIC  ,'MEASUREMENT' as cdm_table_name
# MAGIC  ,'UNIT_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_fk_domain.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_fkdomain_measurement_unit_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'MEASUREMENT.UNIT_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC  LEFT JOIN ${omop_catalog}.${omop_schema}.concept co
# MAGIC  ON cdmTable.UNIT_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND co.domain_id NOT IN ('Unit')
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.MEASUREMENT cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'fkDomain' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the NOTE_TYPE_CONCEPT_ID field in the NOTE table that do not conform to the TYPE CONCEPT domain.' as check_description
# MAGIC  ,'NOTE' as cdm_table_name
# MAGIC  ,'NOTE_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_fk_domain.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_fkdomain_note_note_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'NOTE.NOTE_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC  LEFT JOIN ${omop_catalog}.${omop_schema}.concept co
# MAGIC  ON cdmTable.NOTE_TYPE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND co.domain_id NOT IN ('Type Concept')
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.NOTE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'fkDomain' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the OBSERVATION_TYPE_CONCEPT_ID field in the OBSERVATION table that do not conform to the TYPE CONCEPT domain.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'OBSERVATION_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_fk_domain.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_fkdomain_observation_observation_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'OBSERVATION.OBSERVATION_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  LEFT JOIN ${omop_catalog}.${omop_schema}.concept co
# MAGIC  ON cdmTable.OBSERVATION_TYPE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND co.domain_id NOT IN ('Type Concept')
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'fkDomain' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the UNIT_CONCEPT_ID field in the OBSERVATION table that do not conform to the UNIT domain.' as check_description
# MAGIC  ,'OBSERVATION' as cdm_table_name
# MAGIC  ,'UNIT_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_fk_domain.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_fkdomain_observation_unit_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'OBSERVATION.UNIT_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC  LEFT JOIN ${omop_catalog}.${omop_schema}.concept co
# MAGIC  ON cdmTable.UNIT_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND co.domain_id NOT IN ('Unit')
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'fkDomain' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PERIOD_TYPE_CONCEPT_ID field in the OBSERVATION_PERIOD table that do not conform to the TYPE CONCEPT domain.' as check_description
# MAGIC  ,'OBSERVATION_PERIOD' as cdm_table_name
# MAGIC  ,'PERIOD_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_fk_domain.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_fkdomain_observation_period_period_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'OBSERVATION_PERIOD.PERIOD_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION_PERIOD cdmTable
# MAGIC  LEFT JOIN ${omop_catalog}.${omop_schema}.concept co
# MAGIC  ON cdmTable.PERIOD_TYPE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND co.domain_id NOT IN ('Type Concept')
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.OBSERVATION_PERIOD cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'fkDomain' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the GENDER_CONCEPT_ID field in the PERSON table that do not conform to the GENDER domain.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'GENDER_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_fk_domain.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_fkdomain_person_gender_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PERSON.GENDER_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  LEFT JOIN ${omop_catalog}.${omop_schema}.concept co
# MAGIC  ON cdmTable.GENDER_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND co.domain_id NOT IN ('Gender')
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'fkDomain' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the RACE_CONCEPT_ID field in the PERSON table that do not conform to the RACE domain.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'RACE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_fk_domain.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_fkdomain_person_race_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PERSON.RACE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  LEFT JOIN ${omop_catalog}.${omop_schema}.concept co
# MAGIC  ON cdmTable.RACE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND co.domain_id NOT IN ('Race')
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'fkDomain' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the ETHNICITY_CONCEPT_ID field in the PERSON table that do not conform to the ETHNICITY domain.' as check_description
# MAGIC  ,'PERSON' as cdm_table_name
# MAGIC  ,'ETHNICITY_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_fk_domain.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_fkdomain_person_ethnicity_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PERSON.ETHNICITY_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC  LEFT JOIN ${omop_catalog}.${omop_schema}.concept co
# MAGIC  ON cdmTable.ETHNICITY_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND co.domain_id NOT IN ('Ethnicity')
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PERSON cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'fkDomain' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PROCEDURE_CONCEPT_ID field in the PROCEDURE_OCCURRENCE table that do not conform to the PROCEDURE domain.' as check_description
# MAGIC  ,'PROCEDURE_OCCURRENCE' as cdm_table_name
# MAGIC  ,'PROCEDURE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_fk_domain.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_fkdomain_procedure_occurrence_procedure_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PROCEDURE_OCCURRENCE.PROCEDURE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC  LEFT JOIN ${omop_catalog}.${omop_schema}.concept co
# MAGIC  ON cdmTable.PROCEDURE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND co.domain_id NOT IN ('Procedure')
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'fkDomain' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the PROCEDURE_TYPE_CONCEPT_ID field in the PROCEDURE_OCCURRENCE table that do not conform to the TYPE CONCEPT domain.' as check_description
# MAGIC  ,'PROCEDURE_OCCURRENCE' as cdm_table_name
# MAGIC  ,'PROCEDURE_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_fk_domain.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_fkdomain_procedure_occurrence_procedure_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PROCEDURE_OCCURRENCE.PROCEDURE_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC  LEFT JOIN ${omop_catalog}.${omop_schema}.concept co
# MAGIC  ON cdmTable.PROCEDURE_TYPE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND co.domain_id NOT IN ('Type Concept')
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROCEDURE_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'fkDomain' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the GENDER_CONCEPT_ID field in the PROVIDER table that do not conform to the GENDER domain.' as check_description
# MAGIC  ,'PROVIDER' as cdm_table_name
# MAGIC  ,'GENDER_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_fk_domain.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_fkdomain_provider_gender_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'PROVIDER.GENDER_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROVIDER cdmTable
# MAGIC  LEFT JOIN ${omop_catalog}.${omop_schema}.concept co
# MAGIC  ON cdmTable.GENDER_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND co.domain_id NOT IN ('Gender')
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.PROVIDER cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'fkDomain' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the SPECIMEN_TYPE_CONCEPT_ID field in the SPECIMEN table that do not conform to the TYPE CONCEPT domain.' as check_description
# MAGIC  ,'SPECIMEN' as cdm_table_name
# MAGIC  ,'SPECIMEN_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_fk_domain.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_fkdomain_specimen_specimen_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'SPECIMEN.SPECIMEN_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC  LEFT JOIN ${omop_catalog}.${omop_schema}.concept co
# MAGIC  ON cdmTable.SPECIMEN_TYPE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND co.domain_id NOT IN ('Type Concept')
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.SPECIMEN cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'fkDomain' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the VISIT_DETAIL_CONCEPT_ID field in the VISIT_DETAIL table that do not conform to the VISIT domain.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'VISIT_DETAIL_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_fk_domain.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_fkdomain_visit_detail_visit_detail_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_DETAIL.VISIT_DETAIL_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  LEFT JOIN ${omop_catalog}.${omop_schema}.concept co
# MAGIC  ON cdmTable.VISIT_DETAIL_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND co.domain_id NOT IN ('Visit')
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'fkDomain' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the VISIT_DETAIL_TYPE_CONCEPT_ID field in the VISIT_DETAIL table that do not conform to the TYPE CONCEPT domain.' as check_description
# MAGIC  ,'VISIT_DETAIL' as cdm_table_name
# MAGIC  ,'VISIT_DETAIL_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_fk_domain.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_fkdomain_visit_detail_visit_detail_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_DETAIL.VISIT_DETAIL_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC  LEFT JOIN ${omop_catalog}.${omop_schema}.concept co
# MAGIC  ON cdmTable.VISIT_DETAIL_TYPE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND co.domain_id NOT IN ('Type Concept')
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_DETAIL cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'fkDomain' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the VISIT_CONCEPT_ID field in the VISIT_OCCURRENCE table that do not conform to the VISIT domain.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'VISIT_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_fk_domain.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_fkdomain_visit_occurrence_visit_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_OCCURRENCE.VISIT_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  LEFT JOIN ${omop_catalog}.${omop_schema}.concept co
# MAGIC  ON cdmTable.VISIT_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND co.domain_id NOT IN ('Visit')
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'fkDomain' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the VISIT_TYPE_CONCEPT_ID field in the VISIT_OCCURRENCE table that do not conform to the TYPE CONCEPT domain.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'VISIT_TYPE_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_fk_domain.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_fkdomain_visit_occurrence_visit_type_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_OCCURRENCE.VISIT_TYPE_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  LEFT JOIN ${omop_catalog}.${omop_schema}.concept co
# MAGIC  ON cdmTable.VISIT_TYPE_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND co.domain_id NOT IN ('Type Concept')
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'fkDomain' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the admitted_from_concept_id field in the VISIT_OCCURRENCE table that do not conform to the VISIT domain.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'admitted_from_concept_id' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_fk_domain.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_fkdomain_visit_occurrence_admitted_from_concept_id' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_OCCURRENCE.admitted_from_concept_id' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  LEFT JOIN ${omop_catalog}.${omop_schema}.concept co
# MAGIC  ON cdmTable.admitted_from_concept_id = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND co.domain_id NOT IN ('Visit')
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte UNION ALL SELECT 
# MAGIC  cte.num_violated_rows
# MAGIC  ,cte.pct_violated_rows
# MAGIC  ,cte.num_denominator_rows
# MAGIC  ,'' as execution_time
# MAGIC  ,'' as query_text
# MAGIC  ,'fkDomain' as check_name
# MAGIC  ,'FIELD' as check_level
# MAGIC  ,'The number and percent of records that have a value in the DISCHARGED_TO_CONCEPT_ID field in the VISIT_OCCURRENCE table that do not conform to the VISIT domain.' as check_description
# MAGIC  ,'VISIT_OCCURRENCE' as cdm_table_name
# MAGIC  ,'DISCHARGED_TO_CONCEPT_ID' as cdm_field_name
# MAGIC  ,'NA' as concept_id
# MAGIC  ,'NA' as unit_concept_id
# MAGIC  ,'field_fk_domain.sql' as sql_file
# MAGIC  ,'Conformance' as category
# MAGIC  ,'Value' as subcategory
# MAGIC  ,'Verification' as context
# MAGIC  ,'' as warning
# MAGIC  ,'' as error
# MAGIC  ,'field_fkdomain_visit_occurrence_DISCHARGED_TO_CONCEPT_ID' as checkid
# MAGIC  ,0 as is_error
# MAGIC  ,0 as not_applicable
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) > 0 THEN 1 ELSE 0 END as failed
# MAGIC  ,CASE WHEN (cte.pct_violated_rows * 100) <= 0 THEN 1 ELSE 0 END as passed
# MAGIC  ,NULL as not_applicable_reason
# MAGIC  ,0 as threshold_value
# MAGIC  ,NULL as notes_value
# MAGIC FROM (
# MAGIC  SELECT num_violated_rows, 
# MAGIC  CASE
# MAGIC  WHEN denominator.num_rows = 0 THEN 0 
# MAGIC  ELSE 1.0*num_violated_rows/denominator.num_rows 
# MAGIC  END AS pct_violated_rows, 
# MAGIC  denominator.num_rows AS num_denominator_rows
# MAGIC  FROM (SELECT 
# MAGIC  COUNT(violated_rows.violating_field) AS num_violated_rows
# MAGIC  FROM (
# MAGIC  /*violatedRowsBegin*/
# MAGIC  SELECT 
# MAGIC  'VISIT_OCCURRENCE.DISCHARGED_TO_CONCEPT_ID' AS violating_field, 
# MAGIC  cdmTable.* 
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC  LEFT JOIN ${omop_catalog}.${omop_schema}.concept co
# MAGIC  ON cdmTable.DISCHARGED_TO_CONCEPT_ID = co.concept_id
# MAGIC  WHERE co.concept_id != 0 
# MAGIC  AND co.domain_id NOT IN ('Visit')
# MAGIC  /*violatedRowsEnd*/
# MAGIC  ) violated_rows
# MAGIC ) violated_row_count cross join (SELECT 
# MAGIC  COUNT(*) AS num_rows
# MAGIC  FROM ${omop_catalog}.${omop_schema}.VISIT_OCCURRENCE cdmTable
# MAGIC ) denominator
# MAGIC ) cte
# MAGIC )
# MAGIC INSERT INTO ${results_catalog}.${results_schema}.dqdashboard_results
# MAGIC SELECT *
# MAGIC FROM cte_all;
# MAGIC
