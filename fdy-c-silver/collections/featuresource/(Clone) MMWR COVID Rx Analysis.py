# Databricks notebook source
# MAGIC %md
# MAGIC ###COVID Rx Analysis with age consideration
# MAGIC Author: Erica Okene (contractor, GAP solutions) ak21@cdc.gov
# MAGIC
# MAGIC COVID Population, Definitions, and Codesets generated by Heartley Egwuogu (contractor, GAP solutions) tog0@cdc.gov for LAVA Respiratory Virus Dashboard
# MAGIC
# MAGIC FTE Support: Julia Raykin qiz8@cdc.gov
# MAGIC
# MAGIC Started on 12/20/2024

# COMMAND ----------

# DBTITLE 0,Importing  Section
from itertools import chain
from pyspark.sql.types import StructType,StructField, StringType, IntegerType
from pyspark.sql import SparkSession, functions as F, Row
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import seaborn as sns
import pandas as pd

# COMMAND ----------

# MAGIC %md
# MAGIC ### Relevant externaly created notebooks and links,imported into this notebook
# MAGIC - cdh_truveta_exploratory.tog0_truveta_encounterv2 -Encounter Table ([Notebook](https://adb-5189663741904016.16.azuredatabricks.net/editor/notebooks/4481497015918153?o=5189663741904016)). This table is the modified Truveta encounter table that includes icu,imv and deaths. You may use the Truveta encounter table if icu,imv and deaths are not abstracted in your project. NOTE:The encounterv2 table must be rerun, to refresh table, at least weekly
# MAGIC - cdh_truveta_exploratory.tog0_truveta_lavaumc- High-Risk/Undeylying Medical Condition ([Notebook](https://adb-5189663741904016.16.azuredatabricks.net/editor/notebooks/2607196613840252?o=5189663741904016)). This table contains the ICD10 codes for the High Risk Conditions and Underlying Medical Conditions

# COMMAND ----------

# MAGIC %md
# MAGIC ### Applicable Rules
# MAGIC - 1. All Covid patients is defined as patients with diagnosis of covid or positive labs of all ages excluding invalid labs
# MAGIC - 2. Date of onset is defined as index date i.e. the first time occurence of diagnosis or positive lab
# MAGIC - 3. Allcovid patients with diagnosis or postive labs are included in population
# MAGIC - 4. Demographic variables including age, region, zip, state are identified at index date.
# MAGIC - 5. Only patients with inpatient,outpatient and emergency encounters occuring within [-1, 16]days of indexdate
# MAGIC - 6. All covid patients are counted onces in the year-month and season of the index date of occurence and in each setting 
# MAGIC - 7. Inpateints are defined as having conceptcode in ('1065215','1065220','1065223','1065603'): Outpatient sare defined as having conceptcode in ('1065216'); emergency patients are defined as having conceptcode in ('1065217','3058549')
# MAGIC - 8 Covid medications are considered as administration or dispensation of covid medications including paxlovid or molnupiravir or remdesivir. 
# MAGIC - 9. Covid medications administration or dispensation window is set to  [-2,2] of index date

# COMMAND ----------

# MAGIC %md
# MAGIC ### Covid Population Defined

# COMMAND ----------

# DBTITLE 1,Covid Codes
# covid is defined as having positive labs or covid diagnosis

coviddg=["U07.1"]

covidlab=["95521-1", "94510-5", "94311-8", "94312-6", "95522-9", "94644-2", "94511-3", "94646-7", "94645-9", "94745-7",  "94746-5", "94819-0", "94642-6","94643-4", "94313-4", "94509-7", "95423-0", "94760-6", "95409-9", "94533-7", "94756-4", "94757-2", "95425-5",  "94766-3", "94316-7", "94307-6","94308-4", "94559-2", "95824-9", "94639-2", "94534-5", "94314-2", "94565-9", "94759-8", "95406-5", "95608-6",  "94500-6", "95424-8", "94845-5","94822-4", "94660-8", "94309-2", "94640-0", "95609-4", "94767-1", "94641-8", "94764-8", "94310-0", "94758-0",  "95823-1", "94765-5","94315-9", "94502-2", "94647-5", "94532-9", "95970-0", "96091-4", "94306-8", "96120-1", "96121-9", "96122-7",  "96123-5", "96448-6", "96741-4","96751-3", "96752-1", "96763-8", "96764-6", "96765-3", "96766-1", "96797-6", "96829-7", "96894-1", "96895-8",   "96896-6", "96897-4","96898-2", "96899-0", "96900-6", "96957-6", "96958-4", "96986-5", "95826-4", "96094-8", "97098-8",  "98132-4",  "98494-8", "97104-4", "98131-6","98493-0", "98062-3", "96756-2", "96757-0",	"98080-5", "94531-1", "99314-7", "100156-9", "95209-3", "94558-4",	"96119-3", "97097-0", "94661-6", "95825-6", "94762-2", "94769-7", "94562-6", "94768-9", "95427-1", "94720-0",  "95125-1",	"94761-4",	"94563-4", "94507-1",	"95429-7", "94505-5", "94547-7", "95542-7",	"95416-4", "94564-2", "94508-9", "95428-9",	 "94506-3",	"95411-5",	"95410-7",	"96603-6",	"96742-2", "96118-5", "98733-9", "98069-8",	"98732-1", "98734-7", "94504-8", "94503-0",	 "99596-9", "99597-7",	"95971-8",	"95972-6", "95973-4", "96755-4", "98846-9", "98847-7",	"95974-2", "94763-0", "99771-8", "99774-2",  "99773-4", "99772-6"]

colc=StructType([StructField("conceptcode",StringType(),True)])
covid=list(chain(coviddg,covidlab))
coviddf = spark.createDataFrame(covid,colc).createOrReplaceTempView("conceptcodecovid_T")

# COMMAND ----------

# DBTITLE 1,Covid Medications
#define medications of interest by Conceptcodes: Paxlovid,Molnupiravir and Remdesivir

pax=["2587899", "2587898", "2587892", "2587897", "2587893", "2587896", "2587894", "2587895", "2599543", "00069108530", "00069108506", "00069034506", "00069034530", "00069110104", "00069110120", "00069208501", "00069208502"]

mol=["2587901", "2587906", "2587902", "2587905", "2587903", "2587904", "2603735", "2603736", "2603739", "2603740", "2603737", "2603738", "00006505507", "00006505506"]

rem=['2284718','2284957','2284958','2284959','2284960','2367757','2367758','2367759', '2395498','2395499','2395500','2395501','2395502','2395503','2395504','2395505','61958290101','61958290102','870600003','61958290101','61958290102','61958290201','61958290202','J0248','61958999899','61958999999','XW033E5','XW043E5']

# meddis=list(chain(pax,mol,rem))
col=StructType([StructField("conceptcode",StringType(),True)])
spark.createDataFrame(pax, col).createOrReplaceTempView("conceptcodemedpax_T")
spark.createDataFrame(mol, col).createOrReplaceTempView("conceptcodemedmol_T")
spark.createDataFrame(rem, col).createOrReplaceTempView("conceptcodemedrem_T")

#pax=paxlovid
#mol=molnupiravir
#rem=remdesivir

# COMMAND ----------

# DBTITLE 1,Inclusion and Exclusion
#Positive and invalid labs
#By concepcodes identify and include patientts with positive labs while excluding erroneous invalid labs
i=spark.sql("""select conceptid from cdh_truveta.concept where conceptcode in ("1065667","1065692","260373001","720735008","10828004","52101004")""").createOrReplaceTempView("positivelab")

inv=spark.sql("""select conceptid from cdh_truveta.concept where conceptcode in ("1065712","1065714","1065719","1065717")""").createOrReplaceTempView("invalidlab")



# COMMAND ----------

# DBTITLE 1,Create Covid Population from CORE tables
#Covid Population 
cp=spark.sql("""
  with conid as (select conceptid 
                 from cdh_truveta.concept 
                 where 1=1
                 and conceptcode in (select conceptcode from conceptcodecovid_t) --Generate Covid pop. using Diagnosis and/or Lab
                 ),

         

   cond as (select personid,encounterid, recordeddatetime as dt
            from cdh_truveta.condition 
            where 1=1
            and codeconceptmapid in (select id from cdh_truveta.conditioncodeconceptmap where codeconceptid in (select conceptid from conid))
            ),

    medreq as (select personid,encounterid,authoredondatetime as dt 
            from cdh_truveta.medicationrequest
            where 1=1
           and CodeConceptMapId in (select id from cdh_truveta.medicationcodeconceptmap where codeconceptid in (select conceptid from conid))
            ),

 medadm as (select personid,encounterid,recordeddatetime as dt 
            from cdh_truveta.medicationadministration
            where 1=1
            and codeconceptmapid in (select id from cdh_truveta.medicationcodeconceptmap where codeconceptid in (select conceptid from conid))
            ),

  meddisp as (select personid,"" as encounterid, recordeddatetime as dt
            from cdh_truveta.medicationdispense
            where 1=1
            and codeconceptmapid in (select id from cdh_truveta.medicationcodeconceptmap where codeconceptid in (select conceptid from conid))
            ),

  lab as (select personid,encounterid,effectivedatetime as dt
          from cdh_truveta.labresult l
         
          where 1=1
          and codeconceptmapid in (select id from cdh_truveta.labresultcodeconceptmap where codeconceptid in (select conceptid from conid))
          and l.NormalizedValueConceptId in (select conceptid from positivelab)
          and l.NormalizedValueConceptId not in (select conceptid from invalidlab)
         ),

  obs as (select personid,encounterid, recordeddatetime as dt
            from cdh_truveta.observation
            where 1=1
            and codeconceptmapid in (select id from cdh_truveta.observationcodeconceptmap where codeconceptid in (select conceptid from conid))
        ),
  
  proc as (select personid,encounterid, recordeddatetime as dt
          from cdh_truveta.procedure
          where 1=1
          and codeconceptmapid in (select id from cdh_truveta.procedurecodeconceptmap where codeconceptid in (select conceptid from conid))
        )

                --Identify and union all patients found in core tables and select encounterid which will be used to 
                --join to encounter table in order to identify details of each patients encounter including start 
                --and end datetime,admission status(out,inp,ed) discharge status etc
                select distinct encounterid, 1 as covid
                from(select personid,encounterid,dt from cond union
                     select personid,encounterid,dt from medreq union
                     select personid,encounterid,dt from medadm union
                     select personid,encounterid,dt from meddisp union
                     select personid,encounterid,dt from lab union
                     select personid,encounterid,dt from obs union
                     select personid,encounterid,dt from proc
                 ) where encounterid is not null
           
""")
#cp.write.mode("overwrite").saveAsTable("/Workspace/Users/ak21@cdc.gov/covid_"")
#covid=1 are patients and thier encounters associated with covid diagnosis or covid positive labs

# COMMAND ----------

# MAGIC %md
# MAGIC ###MMWR Rx General Population Requirements:
# MAGIC - Patient Encounters from 06/2023 to 09/2024
# MAGIC

# COMMAND ----------

gp=spark.sql("""
with genc as (select 
            en.personid,
            en.id,
            en.startdatetime,
            en.enddatetime,
            en.clr,
            en.discharge,
            case  --UPDATE 1
               when cast(startdatetime as date) between '2023-06-01' and '2023-09-30' then "Summer 2023" 
               when cast(startdatetime as date) between '2023-10-01' and '2024-03-30' then "Fall/Winter 2023-2024"
               when cast(startdatetime as date) between '2024-04-01' and '2024-05-31' then "Spring 2024" --excluded from analysis
               when cast(startdatetime as date) between '2024-06-01' and '2024-09-30' then "Summer 2024"
            end as season,
            coalesce(cp.covid,0) as encovid,
            max(coalesce(cp.covid,0)) over(partition by en.personid) as covid  --flag only patients with at least 1 covid encounter
            
            from (select distinct personid,id,startdatetime,enddatetime,clr,discharge from cdh_truveta_exploratory.tog0_truveta_encounterv2 
                  where 1=1
                  and id is not null
                  and clr in ('out','inp')
                  and startdatetime between '2023-06-01' and '2024-09-30' ) en   --UPDATE 2
                  left join cdh_truveta_exploratory.tog0_truveta_lavacovid cp on en.id=cp.encounterid
                  where 1=1
             

          ),
--Patients with encounters in the following 3 waves:
   --summer 2024 (June 1 – Sept 30, 2024), 
   --fall/winter 2023-2024 (Oct 1, 2023 – March 1, 2024), 
   --summer 2023 (June 1- Sept 30, 2023). 
    tp as (select 
            personid,covid,encovid,id,startdatetime,clr,
            season,
            first_value(startdatetime) over(partition by personid,season order by encovid desc, startdatetime) as indexdate,
            datediff(startdatetime,first_value(startdatetime) over(partition by personid,season order by encovid desc, startdatetime)) as encwindow, --UPDATE 3 encounterwindow variable
            max(encovid) over(partition by personid,season) as validseason --UPDATE 4 select valid season
            from genc
            where 1=1
            and covid = 1
            
          ),

--Gender, DOB, Race and Ethincity updated according to program request
eth_gen as (select  e.id,
            case 
            when r.raceconceptid in ('1067364')and e.ethnicityconceptid in ('1065401') then 'White, non-Hispanic'
            when r.raceconceptid in ('1067319')and e.ethnicityconceptid in ('1065401') then 'Black, non-Hispanic'
            when r.raceconceptid in ('1066466', '1067294','1067338', '1067388')and e.ethnicityconceptid in ('1065401') then 'Other, non-Hispanic'  
            when e.ethnicityconceptid in ('1065359','1065398','1065371','1065370','1065399','1065376') then 'Hispanic or Latino'
            --unknown?
          end as Race_Ethnicity,
          sx.conceptname as gender,
          date_add(date_trunc('MM', e.BirthDateTime),14) as dob  --Date of Birth Added and updated Vevek D

          from cdh_truveta.person e
          left join cdh_truveta.concept ec on ec.conceptid = e.ethnicityconceptid
          left join cdh_truveta.personrace r on r.personid = e.id
          left join cdh_truveta.concept rc on rc.conceptid = r.raceconceptid
          left join cdh_truveta.concept sx on sx.conceptid=e.genderconceptid
         
          )
         
       select tp.personid,tp.id,dob,race_ethnicity,gender,covid,encovid,clr,season,startdatetime,
              indexdate,encwindow,
              --determine index events associated with a covid diagnosis, sort startdates within each season, covid dx encounters first
             max(case when clr='inp' then 1 else 0 end) over(partition by tp.personid,season) as inpflag,
             max(case when clr='out' then 1 else 0 end) over(partition by tp.personid,season) as outflag
       
  
      from tp
      left join eth_gen on eth_gen.id=tp.personid
      where 1=1 
      and validseason=1 --UPDATE 5
      and encwindow between 0 and 14  --UPDATE 6
      order by personid,season,encovid desc,startdatetime
        
""")
gp.write.mode("overwrite").saveAsTable("cdh_truveta_exploratory.ak21_truveta_lavacovidgp")

#Common Table Expression (CTE):
  #genc= generate encounter events
  #tp= all encounter population charctracteristics including covid=1 and covid=0
  #race_ethnicity= race and ethnicity combined
  #eth_gen= race and ethnicity combined , and gender
  
  #encovid --DISPLAYS ONLY ENCOUNTTERS ASSOCIATED WITH COVID DGX OR +LAB(s) USE TO ID SETTINGS IN COVID POPULATION
  #covid -FLAGS ALL PATIENT RECORDS IN A PANEL AS 1 WHEN AT LEAST ONE ENCOUNTER IS ASSOCIATED WITH COVID DGX OR +LAB(S) ITS USED TO IDENTIFYSETTINGS IN GENERAL POPULATION
  

# COMMAND ----------

# MAGIC %sql
# MAGIC drop table if exists cdh_truveta_exploratory.ak21_truveta_lavacovidgp

# COMMAND ----------

# MAGIC %sql
# MAGIC select * from cdh_truveta_exploratory.ak21_truveta_lavacovidgp
# MAGIC where personid='7afa67da-86f5-7635-ecf4-fc70a785a2e0'

# COMMAND ----------

# MAGIC %md
# MAGIC ###### Identify Treatment Population (Pax,Mol,Rem)

# COMMAND ----------

# MAGIC %md
# MAGIC m table altered to include only medications dispensed  or administered after 2023/06/01
# MAGIC
# MAGIC
# MAGIC seasons were altered to reflect 
# MAGIC - summer 2024 (June 1 – Sept 30, 2024), 
# MAGIC - fall/winter 2023-2024 (Oct 1, 2023 – March 1, 2024), 
# MAGIC - summer 2023 (June 1- Sept 30, 2023). 
# MAGIC We will exclude all cases outside of the above three dates in our analysis.
# MAGIC

# COMMAND ----------

# DBTITLE 0,Medication Dispensed or Administered

m=spark.sql("""
  --Patients with Medication Dispense/Or Medication Adminsitration (Pax,Mol,Rem)

  ---------------------Pax
  with dconidpax as (select conceptid 
                     from cdh_truveta.concept 
                     where 1=1
                     and conceptcode in (select conceptcode from conceptcodemedpax_t) --Generate pax conceptid
                    ),
  --Generate Set of patients who received pax by dispensation only
adpax as (select distinct personid,dispensedatetime as meddate, 'pax' as meds
            from cdh_truveta.medicationdispense
            where 1=1
            and codeconceptmapid in (select id from cdh_truveta.medicationcodeconceptmap where codeconceptid in (select conceptid from dconidpax))
            and dispensedatetime between '2023-06-01' and getdate()          
            union

            select distinct personid, recordeddatetime as meddate, 'pax' as meds
            from cdh_truveta.medicationadministration
            where 1=1
            and codeconceptmapid in (select id from cdh_truveta.medicationcodeconceptmap where codeconceptid in (select conceptid from dconidpax))
            and recordeddatetime between '2023-06-01' and getdate()        
           ),    --End Medication Dispense for pax
---------------------------Mol
       dconidmol as (select conceptid 
                     from cdh_truveta.concept 
                     where 1=1
                     and conceptcode in (select conceptcode from conceptcodemedmol_t) --Generate mol meds conceptid
                    ),

  --Generate Set of patients who received Mol by dispensation only
admol as (select distinct personid,dispensedatetime as meddate, 'mol' as meds
            from cdh_truveta.medicationdispense
            where 1=1
            and codeconceptmapid in (select id from cdh_truveta.medicationcodeconceptmap where codeconceptid in (select conceptid from dconidmol))
            and dispensedatetime between '2023-06-01' and getdate()
            union

            select distinct personid, recordeddatetime as meddate, 'mol' as meds
            from cdh_truveta.medicationadministration
            where 1=1
            and codeconceptmapid in (select id from cdh_truveta.medicationcodeconceptmap where codeconceptid in (select conceptid from dconidpax))
            and recordeddatetime between '2023-06-01' and getdate()        
           ),    --End Medication Dispense for mol

-----------------------------Rem
      dconidrem as (select conceptid 
                     from cdh_truveta.concept 
                     where 1=1
                     and conceptcode in (select conceptcode from conceptcodemedrem_t) --Generate rem meds conceptid
                    ),
    --Generate Set of patients who received Rem by dispensation only
adrem as (select distinct personid,dispensedatetime as meddate, 'rem' as meds
            from cdh_truveta.medicationdispense
            where 1=1
            and codeconceptmapid in (select id from cdh_truveta.medicationcodeconceptmap where codeconceptid in (select conceptid from dconidrem))
            and dispensedatetime between '2023-06-01' and getdate()            
            union

            select distinct personid, recordeddatetime as meddate, 'pax' as meds
            from cdh_truveta.medicationadministration
            where 1=1
            and codeconceptmapid in (select id from cdh_truveta.medicationcodeconceptmap where codeconceptid in (select conceptid from dconidpax))
            and recordeddatetime between '2023-06-01' and getdate()        
           )  

             --End Medication Dispense for rem

              select distinct *,
              case  
               when cast(meddate as date) between '2023-06-01' and '2023-09-30' then "Summer 2023" 
               when cast(meddate as date) between '2023-10-01' and '2024-03-30' then "Fall/Winter 2023-2024"
               when cast(meddate as date) between '2024-04-01' and '2024-05-31' then "Spring 2024" --excluded from analysis
               when cast(meddate as date) between '2024-06-01' and '2024-09-30' then "Summer 2024"
              end as medseason
             from (select * from adpax union select * from admol union select * from adrem) 
             where meddate is not null

""").write.mode("overwrite").saveAsTable("cdh_truveta_exploratory.ak21_truveta_lavacovidtp_meds")  

#DEFFINITIONS OF VARIABLLES
#personid=Unique patient identifier
#pax=Paxlovid flag
#mol=Molnupiravir flag
#rem=Remdesivir flag
#meddate=Date of medication dispensation or administration
#Common Tabel Expression (CTE):
  #dconidpax =conceptid for paxlovid
  #dconidmol =conceptid for molnupiravir
  #dconidrem =conceptid for remdesivir
  #adpax=patients who received pax by administration and dispensation
  #admol=patients who received mol by administration and dispensation
  #adrem=patients who received rem by administration and dispensation


# COMMAND ----------

# MAGIC %md
# MAGIC ### Generate Target Population Table with conditions
# MAGIC ####Population characteristics addressed here: 
# MAGIC - Age: include on >=65
# MAGIC - Must have COVID lab or diagnosis
# MAGIC - Outpatient only
# MAGIC
# MAGIC ####Follow up time:
# MAGIC - Med Dispense or Admin within 14 days

# COMMAND ----------

p=spark.sql("""
with covidpop as
        (select * 
         from(select distinct personid,covid,encovid,encwindow,race_ethnicity,gender,startdatetime,clr,season,
              min(StartDatetime) over(partition by tp.personid,season) as seasonindexdate,
              concat(substr(min(StartDatetime) over(partition by tp.personid,season),1,4),
              substr(min(StartDatetime) over(partition by tp.personid,season),6,2)) as seasonindexym,
--Population Requirement (Denom): 
--Follow-up time <= 14 days 
--Age >= 65
--Outpatient only
--COVID Dx and Lab Only. Exclude COVID Rx without diagnosis or lab.
            
              case when datediff(startdatetime,min(startdatetime) over(partition by tp.personid,season)) between -1 and 14 then 1 else 0 end as win_1to14flagseason,
              case when datediff(startdatetime,min(startdatetime) over(partition by tp.personid,season)) between -1 and 7 then 1 else 0 end as win_1to7flagseason,  
              round(datediff(min(StartDatetime) over(partition by tp.personid,season),dob)/365) as age,
              
              case            
              when round(datediff(min(StartDatetime) over(partition by tp.personid,season),dob)/365) between 65 and 69 then "65-69yr"              
              when round(datediff(min(StartDatetime) over(partition by tp.personid,season),dob)/365) between 70 and 74 then "70-74yr"
              when round(datediff(min(StartDatetime) over(partition by tp.personid,season),dob)/365) between 75 and 79 then "75-79yr"
              when round(datediff(min(StartDatetime) over(partition by tp.personid,season),dob)/365) between 80 and 84 then "80-84yr"
              when round(datediff(min(StartDatetime) over(partition by tp.personid,season),dob)/365) between 85 and 89 then "85-89yr"                         
              when round(datediff(min(StartDatetime) over(partition by tp.personid,season),dob)/365) >= 90 then "90+yr"
              end agesi 
             from cdh_truveta_exploratory.ak21_truveta_lavacovidgp as tp 
             )
          where win_1to14flagseason=1 --14 days follow up
          and age >= 65 --age over 65
          and clr = "out" --outpatient only 
          and encovid = 1 --COVID Dx or Lab only
       
        ),


--Population Requirement: (Num) COVID diagnosis or lab only. Exclude COVID Rx without diagnosis or lab. 
      --Treatment population
      trt as (select distinct personid,meddate,concat(substr(meddate,1,4),substr(meddate,6,2),substr(meddate,9,2)) as medymd,medseason,meds 
             from cdh_truveta_exploratory.ak21_truveta_lavacovidtp_meds
             ),
            
            umcon as (select distinct personid, dt,umc
            from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_cmc 
            where 1=1
            and umc IS NOT NULL)

               
              --create time to treatment flag
          select distinct i.personid,encovid,covid,race_ethnicity,gender,clr,age,agesi,season,seasonindexdate,seasonindexym,startdatetime,umc,meds,
          case 
          when datediff(meddate,min(startdatetime)) between -1 and 1 then "+/- 1 day"
          when datediff(meddate,min(startdatetime)) between -2 and 2 then "+/- 2 days"
          when datediff(meddate,min(startdatetime)) between -3 and 3 then "+/- 3 days"
          when datediff(meddate,min(startdatetime)) between -4 and 4 then "+/- 4 days"
          when datediff(meddate,min(startdatetime)) between -5 and 5 then "+/- 5 days"
          when datediff(meddate,min(startdatetime)) between -6 and 6 then "+/- 6 days"
          when datediff(meddate,min(startdatetime)) between -7 and 7 then "+/- 7 days"             
          else "> 7 days" end as ttRxflag, 
          win_1to14flagseason, 
          win_1to7flagseason,      
          max(case when meds in ('rem','pax','mol') then 1 else 0 end) over(partition by i.personid) as medflag, 

          max(case when umc='heart' then 1 else 0 end) over(partition by i.personid) as heartflag,
          max(case when umc='cad' then 1 else 0 end) over(partition by i.personid) as cadflag,
          max(case when umc='chf' then 1 else 0 end) over(partition by i.personid) as chfflag,
          max(case when umc='cardiomy' then 1 else 0 end) over(partition by i.personid) as cardiomyflag,
          max(case when umc='lung' then 1 else 0 end) over(partition by i.personid) as lungflag,
          max(case when umc='asthma' then 1 else 0 end) over(partition by i.personid) as asthmaflag,
          max(case when umc='brect' then 1 else 0 end) over(partition by i.personid) as brectflag,
          max(case when umc='copd' then 1 else 0 end) over(partition by i.personid) as copdflag,
          max(case when umc='ild' then 1 else 0 end) over(partition by i.personid) as ildflag,
          max(case when umc='pulmemb' then 1 else 0 end) over(partition by i.personid) as pulmembflag,
          max(case when umc='pulmhtn' then 1 else 0 end) over(partition by i.personid) as pulmhypflag,
          max(case when umc='ckd' then 1 else 0 end) over(partition by i.personid) as ckdflag,
          max(case when umc='cliv' then 1 else 0 end) over(partition by i.personid) as liverflag,
          max(case when umc='nafld' then 1 else 0 end) over(partition by i.personid) as naflivflag,
          max(case when umc='cirrh' then 1 else 0 end) over(partition by i.personid) as cirrhflag,
          max(case when umc='alc_ld' then 1 else 0 end) over(partition by i.personid) as alc_ldflag,
          max(case when umc='autoi_hep' then 1 else 0 end) over(partition by i.personid) as autoihepflag,
          max(case when umc='stroke' then 1 else 0 end) over(partition by i.personid) as strokeflag,
          max(case when umc='neuro_all' then 1 else 0 end) over(partition by i.personid) as allneuroflag,
          max(case when umc='cf' then 1 else 0 end) over(partition by i.personid) as cystfflag,
          max(case when umc='demen' then 1 else 0 end) over(partition by i.personid) as demflag,
          max(case when umc='parkins' then 1 else 0 end) over(partition by i.personid) as parkinsflag,
          max(case when umc='dm' then 1 else 0 end) over(partition by i.personid) as dmflag,
          max(case when umc='disab' then 1 else 0 end) over(partition by i.personid) as disabflag,  
          max(case when umc='canc' then 1 else 0 end) over(partition by i.personid) as cancflag,
          max(case when umc='hematmal' then 1 else 0 end) over(partition by i.personid) as hematmalflag,
          max(case when umc='hiv' then 1 else 0 end) over(partition by i.personid) as hivflag,
          max(case when umc='tb' then 1 else 0 end) over(partition by i.personid) as tbflag,
          max(case when umc='obes' then 1 else 0 end) over(partition by i.personid) as obesflag,
          max(case when umc='nsobes' then 1 else 0 end) over(partition by i.personid) as nsobesflag,
          max(case when umc='sevobes' then 1 else 0 end) over(partition by i.personid) as sevobesflag,
          max(case when umc='smoker' then 1 else 0 end) over(partition by i.personid) as smokeflag,
          max(case when umc='immudx' then 1 else 0 end) over(partition by i.personid) as immudxflag,
          max(case when umc='orgtransp' then 1 else 0 end) over(partition by i.personid) as orgtranspflag,
          max(case when umc='stemtransp' then 1 else 0 end) over(partition by i.personid) as stemtranspflag,
          max(case when umc='primimm' then 1 else 0 end) over(partition by i.personid) as primimmflag,
          max(case when umc='immurx' then 1 else 0 end) over(partition by i.personid) as imsuprxflag,
          max(case when umc='sterrx' then 1 else 0 end) over(partition by i.personid) as sterrxflag,          
          max(case when umc='vax' then 1 else 0 end) over(partition by i.personid) as vaxflag

          from covidpop i 
          left join trt t on i.personid=t.personid 
            and t.medseason=i.season
            left join umcon u on i.personid=u.personid
          group by i.personid,covid,encovid,encwindow,race_ethnicity,gender,startdatetime,clr,season,age,agesi,win_1to14flagseason,win_1to7flagseason,seasonindexdate,seasonindexym,meds,meddate,umc
          order by i.personid

""").write.mode('overwrite').saveAsTable('cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop')
#.write.mode('overwrite').option('mergeSchema', 'true').saveAsTable('cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop')  

# Use this Target Population Table to generate solutions to specific requests as shown in the counts below
#Note: imcomp=Immnunosuppresed; preg=Pregnancy; cvd=Cardiovascular Disease; hem=Haematological; ren=Renal; pul=Pulmonary; hep=Hepatic; neuro=Neurological; met=Metabolic; ppatum=PostPartum
#tp='covid' or tp="cf" -selects from umc table only covid high risk and underlying medical conditions. cf=high risk and underlying medical conditions common to flu and covid
#clr = admssion type ("inpatient", "outpatient", "emergency")
# NOTE: Must set the following flags to meet the criteria:encovid=1 and win_1to14flagseason=1. 
# NOTE: Set the following flag as desired: inpatient(inpflag=1), outpatient(outflag=1) and ed(edflag=1)

# COMMAND ----------

# MAGIC %sql
# MAGIC drop table if exists cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop

# COMMAND ----------

# MAGIC %sql
# MAGIC SELECT * from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop

# COMMAND ----------

# MAGIC %md
# MAGIC Plots below developed to investigate COVID treatment timing.

# COMMAND ----------

# DBTITLE 1,Prelim Analysis - vaccination
vax_tru =["207","208","210","211","212","213","217","218","219","221","225","226","227","228","229","230","300","301","302","308","309","310","311","312","313","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515","516","517","518","519","520","521","2468235","2470234","2479835","2583743","2593847","2598700","2606078","2691172","2691181","2691189","2691196","2691200","2691212","2691219","59267007801","59267007804","59267100001","59267100002","59267100003","59267102501","59267102502","59267102503","59267102504","59267105501","59267105502","59267105504","59676058005","59676058015","80777027310","80777027315","80777027398","80777027399","91300","91301","91302","91303","91304","91305","91306","91307"]
df_vax_tru = spark.createDataFrame(vax_tru,col).withColumn('tp', F.lit('')).createOrReplaceTempView("vax_Tru")

vaccine=spark.sql("""
with conid as (
select conceptid from cdh_truveta.concept 
where 1=1
and codesystem in ('NDC','CPT','CVX','RxNorm','ICD10CM','ICD9') 
and conceptcode in (select conceptcode from vax_Tru)
),


cond as (select personid,recordeddatetime as dt
            from cdh_truveta.condition 
            where 1=1
            and codeconceptmapid in (select id from cdh_truveta.conditioncodeconceptmap where codeconceptid in (select conceptid from conid))
            ),

medreq as (select personid,authoredondatetime as dt 
            from cdh_truveta.medicationrequest
            where 1=1
           and CodeConceptMapId in (select id from cdh_truveta.medicationcodeconceptmap where codeconceptid in (select conceptid from conid))
            ),

 medadm as (select personid,recordeddatetime as dt 
            from cdh_truveta.medicationadministration
            where 1=1
            and codeconceptmapid in (select id from cdh_truveta.medicationcodeconceptmap where codeconceptid in (select conceptid from conid))
            ),

  meddisp as (select personid, recordeddatetime as dt
            from cdh_truveta.medicationdispense
            where 1=1
            and codeconceptmapid in (select id from cdh_truveta.medicationcodeconceptmap where codeconceptid in (select conceptid from conid))
            ),

  lab as (select personid,effectivedatetime as dt
          from cdh_truveta.labresult l
         
          where 1=1
          and codeconceptmapid in (select id from cdh_truveta.labresultcodeconceptmap where codeconceptid in (select conceptid from conid))
          and l.NormalizedValueConceptId in (select conceptid from positivelab)
          and l.NormalizedValueConceptId not in (select conceptid from invalidlab)
         ),

  obs as (select personid,recordeddatetime as dt
            from cdh_truveta.observation
            where 1=1
            and codeconceptmapid in (select id from cdh_truveta.observationcodeconceptmap where codeconceptid in (select conceptid from conid))
        ),
  
  proc as (select personid, recordeddatetime as dt
          from cdh_truveta.procedure
          where 1=1
          and codeconceptmapid in (select id from cdh_truveta.procedurecodeconceptmap where codeconceptid in (select conceptid from conid))
        )

  
                select distinct personid,dt,'vax' as umc,"cf" as tp
                from(select personid,dt from cond union
                     select personid,dt from medreq union 
                     select personid,dt from medadm union  
                     select personid,dt from meddisp union
                     select personid,dt from lab union
                     select personid,dt from obs union
                     select personid,dt from proc
                 ) where dt is not null

""").createOrReplaceTempView("vaccine")

# COMMAND ----------


df_tot = spark.sql('''SELECT distinct agesi,
                        count(case when agesi = agesi then personid end) as count_tot
                   from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop
        WHERE win_1to14flagseason=1
        GROUP BY agesi
        ORDER BY agesi
''').toPandas()

display(df_tot)

df_vax1 = spark.sql('''SELECT distinct agesi, umc,
                      count(case when agesi = agesi and umc = 'vax' then personid end) as count
                   from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop
        WHERE win_1to14flagseason=1 and umc = 'vax'
        GROUP BY agesi, umc
        ORDER BY agesi
''').toPandas()

display(df_vax1)

df_vax1['%vax'] = df_vax1['count']/df_tot['count_tot']
df_vaxtbl = pd.concat([df_tot, df_vax1],join="inner",axis=1)

df_vaxtbl = df_vaxtbl[['agesi','%vax','count','%vax']]

display(df_vaxtbl)

# COMMAND ----------

df_vaxtbl.display()

# COMMAND ----------

# DBTITLE 1,Table 1: Characteristics of study population
##Characteristics table currently include age group, sex, race, ethnicity, region,
##Add immunocompromising conditions, vaccination history, SVI, resident of a nursing home 

df_char1 = spark.sql("""SELECT distinct personid,
                     agesi,
                     gender,
                     race_ethnicity,
                     season,
                     meds,
                     HHSregion,
                     encovid,
                     season,
                     umc
                     from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop
                WHERE 1=1
                GROUP BY personid, agesi, gender, race_ethnicity, HHSregion, encovid, season, meds, umc
                ORDER BY agesi, gender, race_ethnicity, HHSregion, encovid
""")   

characteristics = ["agesi","gender","race_ethnicity","HHSregion","encovid","meds","umc"]
chars_counts = {}
for char in characteristics:
    dist_vals = df_char1.select(char).distinct().collect()
    for value in dist_vals:
        if isinstance(value, Row):
            value = value[char]

        chars_counts[f"{char}_{value}"] = df_char1.filter(F.col(char) == value).count()
charscounts_df = spark.createDataFrame(list(chars_counts.items()), [ "characteristic", "count"])

display(charscounts_df)

# COMMAND ----------

# DBTITLE 1,Characteristics Table, By Season
##Characteristics table currently include age group, sex, race, ethnicity, region,
##Add immunocompromising conditions, vaccination history, SVI, resident of a nursing home 

df_char1 = spark.sql("""SELECT distinct personid,
                     agesi,
                     gender,
                     race_ethnicity,
                     season,
                     meds,
                     HHSregion,
                     encovid,
                     season,
                     umc
                     from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop
                WHERE 1=1
                GROUP BY personid, agesi, gender, race_ethnicity, HHSregion, encovid, season, umc, meds
                ORDER BY agesi, gender, race_ethnicity, HHSregion, encovid
""")   

characteristics = ["agesi","gender","race_ethnicity","HHSregion","encovid","meds","umc"]
seasons = ["All Seasons", "Summer 2023", "Fall/Winter 2023-2024", "Summer 2024"]
chars_counts = {}
for char in characteristics:
    dist_vals = df_char1.select(char).distinct().collect()
    for value in dist_vals:
        if isinstance(value, Row):
            value = value[char]
        season_counts = {
            "All Seasons":df_char1.filter(F.col(char) == value).count(),
            "Summer 2023":df_char1.filter(F.col(char) == value).filter(F.col("season") == "Summer 2023").count(),
            "Fall/Winter 2023-2024":df_char1.filter(F.col(char) == value).filter(F.col("season") == "Fall/Winter 2023-2024").count(),  
            "Summer 2024":df_char1.filter(F.col(char) == value).filter(F.col("season") == "Summer 2024").count()
        }
        chars_counts[f"{char}_{value}"] = season_counts        
charscounts_df = spark.createDataFrame(list(chars_counts.items()),  ["characteristic_value", "season_counts"]) \
                   .withColumn("All Seasons", F.col("season_counts.All Seasons")) \
                   .withColumn("Summer 2023", F.col("season_counts.Summer 2023")) \
                   .withColumn("Fall/Winter 2023-2024", F.col("season_counts.Fall/Winter 2023-2024")) \
                   .withColumn("Summer 2024", F.col("season_counts.Summer 2024")) \
                   .drop("season_counts")

display(charscounts_df)

# COMMAND ----------

# DBTITLE 1,Plot 1a: Summer 2023
df_plot1atot = spark.sql('''SELECT distinct agesi,
                      count(case when agesi = agesi then personid end) as count_tot
                   from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop
        WHERE win_1to14flagseason=1 and season="Summer 2023"
        GROUP BY agesi
        ORDER BY agesi
''').toPandas()

display(df_plot1atot)

df_plot1arx = spark.sql('''SELECT distinct agesi,
                        count(case when meds in ('rem','mol','pax') then personid end) as count_rx
                   from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop
        WHERE win_1to14flagseason=1 and season="Summer 2023"
        GROUP BY agesi
        ORDER BY agesi
''').toPandas()

display(df_plot1arx)



# COMMAND ----------



# COMMAND ----------

labels = ['65-69yr','70-74yr','75-79yr','80-84yr','85-89yr','90+yr']


gwidth = 0.8
gspace = 0.4
positions = np.arange(len(labels))

heights1 = []
heights2 = []
for label in labels:
    heights1.append(df_plot1atot[df_plot1atot['agesi']==label]['count_tot'].values[0])
    heights2.append(round(df_plot1arx[df_plot1arx['agesi']==label]['count_rx'].values[0]/df_plot1atot[df_plot1atot['agesi']==label]['count_tot'].values[0]*100))
    

fig, ax1 = plt.subplots()
ax2 = ax1.twinx()
bar1 = ax1.bar(positions, heights1, gwidth/2, align="center", label="Total Encounters*", color="skyblue")
bar2 = ax2.bar(positions+gspace, heights2, gwidth/2, align="center", label="Percent Treated**", color="orange")
ax1.bar_label(bar1, label_type="edge")
ax2.bar_label(bar2, label_type="edge", fmt="%g")
       
ax1.set_xticks(positions + gwidth/4)
ax1.set_xticklabels(labels)
#ax1.set_xlabel("Age Group")
ax1.set_ylabel("Total Encounters").set_color("skyblue")
ax2.set_ylabel("Percent Treated").set_color("orange")
ax2.set_ylim(0, 100)

bars = [bar1, bar2]
labs = [b.get_label() for b in bars]
ax1.legend(bars, labs, loc='lower center', bbox_to_anchor=(0.5, -0.175), ncol=len(labels)/2)
#sns.despine(left=True)
#ax1.set_style("whitegrid")

plt.suptitle("SARS-CoV-2 Encounters, Percent Treated by Age Group")
plt.title("Summer 2023")
plt.figtext(0.01, -0.20, "Data Source: Truveta electronic health records data from 20 U.S. health systems \n*Total encounters includes outpatient encounters for patients age 65+ in Truveta Health Records with positive lab and/or COVID-19 diagnosis \n**Percent of patients who received a treatment within 14 days out of total encounters in each age group.", fontsize=10)

# COMMAND ----------

# DBTITLE 1,Plot 1b Fall/Winter 2023-2024
df_plot1btot = spark.sql('''SELECT distinct agesi,
                      count(case when agesi = agesi then personid end) as count_tot
                   from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop
        WHERE win_1to14flagseason=1 and season="Fall/Winter 2023-2024"
        GROUP BY agesi
        ORDER BY agesi
''').toPandas()

display(df_plot1btot)

df_plot1brx = spark.sql('''SELECT distinct agesi,
                        count(case when meds in ('rem','mol','pax') then personid end) as count_rx
                   from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop
        WHERE win_1to14flagseason=1 and season="Fall/Winter 2023-2024"
        GROUP BY agesi
        ORDER BY agesi
''').toPandas()

display(df_plot1brx)



# COMMAND ----------

labels = ['65-69yr','70-74yr','75-79yr','80-84yr','85-89yr','90+yr']


gwidth = 0.8
gspace = 0.4
positions = np.arange(len(labels))

heights1 = []
heights2 = []
for label in labels:
    heights1.append(df_plot1btot[df_plot1btot['agesi']==label]['count_tot'].values[0])
    heights2.append(round(df_plot1brx[df_plot1brx['agesi']==label]['count_rx'].values[0]/df_plot1btot[df_plot1btot['agesi']==label]['count_tot'].values[0]*100))
    
fig, ax1 = plt.subplots()
ax2 = ax1.twinx()
bar1 = ax1.bar(positions, heights1, gwidth/2, align="center", label="Total Encounters*", color="skyblue")
bar2 = ax2.bar(positions+gspace, heights2, gwidth/2, align="center", label="Percent Treated**", color="orange")
ax1.bar_label(bar1, label_type="edge")
ax2.bar_label(bar2, label_type="edge", fmt="%g")
       
ax1.set_xticks(positions + gwidth/4)
ax1.set_xticklabels(labels)
#ax1.set_xlabel("Age Group")
ax1.set_ylabel("Total Encounters").set_color("skyblue")
ax2.set_ylabel("Percent Treated").set_color("orange")
ax2.set_ylim(0, 100)

bars = [bar1, bar2]
labs = [b.get_label() for b in bars]
ax1.legend(bars, labs, loc='lower center', bbox_to_anchor=(0.5, -0.175), ncol=len(labels)/2)
#sns.despine(left=True)
#ax1.set_style("whitegrid")

plt.title("Fall/Winter 2023-2024")
plt.suptitle("SARS-CoV-2 Encounters, Percent Treated by Age Group")
plt.figtext(0.01, -0.20, "Data Source: Truveta electronic health records data from 20 U.S. health systems \n*Total encounters includes outpatient encounters for patients age 65+ in Truveta Health Records with positive lab and/or COVID-19 diagnosis \n**Percent of patients who received a treatment within 14 days out of total encounters in each age group.", fontsize=10)

# COMMAND ----------

# DBTITLE 1,Plot 1c: Summer 2024
df_plot1ctot = spark.sql('''SELECT distinct agesi,
                      count(case when agesi = agesi then personid end) as count_tot
                   from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop
        WHERE win_1to14flagseason=1 and season="Summer 2024"
        GROUP BY agesi
        ORDER BY agesi
''').toPandas()

display(df_plot1ctot)

df_plot1crx = spark.sql('''SELECT distinct agesi,
                        count(case when meds in ('rem','mol','pax') then personid end) as count_rx
                   from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop
        WHERE win_1to14flagseason=1 and season="Summer 2024"
        GROUP BY agesi
        ORDER BY agesi
''').toPandas()

display(df_plot1crx)


# COMMAND ----------

labels = ['65-69yr','70-74yr','75-79yr','80-84yr','85-89yr','90+yr']

gwidth = 0.8
gspace = 0.4
positions = np.arange(len(labels))

heights1 = []
heights2 = []
for label in labels:
    heights1.append(df_plot1ctot[df_plot1ctot['agesi']==label]['count_tot'].values[0])
    heights2.append(round(df_plot1crx[df_plot1crx['agesi']==label]['count_rx'].values[0]/df_plot1ctot[df_plot1ctot['agesi']==label]['count_tot'].values[0]*100))

fig, ax1 = plt.subplots()
ax2 = ax1.twinx()
bar1 = ax1.bar(positions, heights1, gwidth/2, align="center", label="Total Encounters*", color="skyblue")
bar2 = ax2.bar(positions+gspace, heights2, gwidth/2, align="center", label="Percent Treated**", color="orange")
ax1.bar_label(bar1, label_type="edge")
ax2.bar_label(bar2, label_type="edge", fmt="%g")
       
ax1.set_xticks(positions + gwidth/4)
ax1.set_xticklabels(labels)
#ax1.set_xlabel("Age Group")
ax1.set_ylabel("Total Encounters").set_color("skyblue")
ax2.set_ylabel("Percent Treated").set_color("orange")
ax2.set_ylim(0, 100)

bars = [bar1, bar2]
labs = [b.get_label() for b in bars]
ax1.legend(bars, labs, loc='lower center', bbox_to_anchor=(0.5, -0.175), ncol=len(labels)/2)
#sns.despine(left=True)
#ax1.set_style("whitegrid")

plt.title("Summer 2024")
plt.suptitle("SARS-CoV-2 Encounters, Percent Treated by Age Group")
plt.figtext(0.01, -0.20, "Data Source: Truveta electronic health records data from 20 U.S. health systems \n*Total encounters includes outpatient encounters for patients age 65+ in Truveta Health Records with positive lab and/or COVID-19 diagnosis \n**Percent of patients who received a treatment within 14 days out of total encounters in each age group.", fontsize=10)

# COMMAND ----------

# DBTITLE 1,Table 2:  Treatment by age group and surge
#Treatment rate by age group
df_char1 = spark.sql("""SELECT distinct personid,
                     agesi,
                     gender,
                     race_ethnicity,
                     season,
                     meds,
                     HHSregion,
                     encovid,
                     season,
                     meds
                     from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop
                WHERE 1=1
                GROUP BY personid, agesi, gender, race_ethnicity, HHSregion, encovid, season, meds
                ORDER BY agesi, gender, race_ethnicity, HHSregion, encovid
""")   

characteristics = ["agesi"]
seasons = ["All Seasons", "Summer 2023", "Fall/Winter 2023-2024", "Summer 2024"]
chars_counts = {}
for char in characteristics:
    dist_vals = df_char1.select(char).distinct().collect()
    for value in dist_vals:
        if isinstance(value, Row):
            value = value[char]
        season_counts = {
            "All Seasons":df_char1.filter(F.col(char) == value).count(),
            "Summer 2023":df_char1.filter(F.col(char) == value).filter(F.col("season") == "Summer 2023").count(),
            "Fall/Winter 2023-2024":df_char1.filter(F.col(char) == value).filter(F.col("season") == "Fall/Winter 2023-2024").count(),  
            "Summer 2024":df_char1.filter(F.col(char) == value).filter(F.col("season") == "Summer 2024").count()
        }
        chars_counts[f"{char}_{value}"] = season_counts        
charscounts_df = spark.createDataFrame(list(chars_counts.items()),  ["characteristic_value", "season_counts"]) \
                   .withColumn("All Seasons", F.col("season_counts.All Seasons")) \
                   .withColumn("Summer 2023", F.col("season_counts.Summer 2023")) \
                   .withColumn("Fall/Winter 2023-2024", F.col("season_counts.Fall/Winter 2023-2024")) \
                   .withColumn("Summer 2024", F.col("season_counts.Summer 2024")) \
                   .drop("season_counts")


display(charscounts_df)

# COMMAND ----------

# DBTITLE 1,Time to treatment bar chart, All seasons
df_plot2a = spark.sql(
    """SELECT distinct
    case when meds='rem' then 'Remdisivir' when meds='mol' then 'Molnupiravir' when meds='pax' then 'Paxlovid' end as meds,
    count(case when ttRxflag='+/- 1 day' then personid end) as count_ttRxflag1, 
    count(case when ttRxflag='+/- 2 days' then personid end) as count_ttRxflag2, 
    count(case when ttRxflag='+/- 3 days' then personid end) as count_ttRxflag3, 
    count(case when ttRxflag='+/- 4 days' then personid end) as count_ttRxflag4,
    count(case when ttRxflag='+/- 5 days' then personid end) as count_ttRxflag5, 
    count(case when ttRxflag='+/- 6 days' then personid end) as count_ttRxflag6,
    count(case when ttRxflag='+/- 7 days' then personid end) as count_ttRxflag7,
    count_ttRxflag1 + count_ttRxflag2 + count_ttRxflag3 + count_ttRxflag4 + count_ttRxflag5 + count_ttRxflag6 + count_ttRxflag7 as tot_Rx,

    count_ttRxflag1/tot_Rx*100 as rx1dr,
    count_ttRxflag2/tot_Rx*100 as rx2dr,
    count_ttRxflag3/tot_Rx*100 as rx3dr,
    count_ttRxflag4/tot_Rx*100 as rx4dr,
    count_ttRxflag5/tot_Rx*100 as rx5dr,
    count_ttRxflag6/tot_Rx*100 as rx6dr,
    count_ttRxflag7/tot_Rx*100 as rx7dr
    from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop
        WHERE win_1to14flagseason=1 and meds is NOT NULL
        GROUP BY meds
        ORDER BY 1
"""
).toPandas()

display(df_plot2a)


gwidth = 0.8
gspace = 0.3

offsets = np.arange(len(df_plot2a['meds']))*(gwidth+gspace)
fig, ax = plt.subplots()

labels = ['+/- 1 day','+/- 2 days','+/- 3 days','+/- 4 days','+/- 5 days','+/- 6 days','+/- 7 days']
heights = [df_plot2a['rx1dr'],df_plot2a['rx2dr'],df_plot2a['rx3dr'],df_plot2a['rx4dr'],df_plot2a['rx5dr'],df_plot2a['rx6dr'],df_plot2a['rx7dr']]

for i, label in enumerate(labels):
    ax.bar(offsets + i * gwidth/len(labels), height=heights[i], width=gwidth/len(labels), label=label)
       
ax.set_xticks(offsets + gwidth/2)
ax.set_xticklabels(df_plot2a['meds'])
ax.set_xlabel("COVID Medication")
ax.set_ylabel("% of Medication Prescribed")

ax.legend(loc='lower center', bbox_to_anchor=(0.5, -0.4), ncol=len(labels)/2)

plt.title("Time from Index Date to Medication Request")
plt.suptitle("All Seasons")


# COMMAND ----------

df_plot2b = spark.sql(
    """SELECT distinct
    case when meds='rem' then 'Remdisivir' when meds='mol' then 'Molnupiravir' when meds='pax' then 'Paxlovid' end as meds,
    count(case when ttRxflag='+/- 1 day' then personid end) as count_ttRxflag1, 
    count(case when ttRxflag='+/- 2 days' then personid end) as count_ttRxflag2, 
    count(case when ttRxflag='+/- 3 days' then personid end) as count_ttRxflag3, 
    count(case when ttRxflag='+/- 4 days' then personid end) as count_ttRxflag4,
    count(case when ttRxflag='+/- 5 days' then personid end) as count_ttRxflag5, 
    count(case when ttRxflag='+/- 6 days' then personid end) as count_ttRxflag6,
    count(case when ttRxflag='+/- 7 days' then personid end) as count_ttRxflag7,
    count_ttRxflag1 + count_ttRxflag2 + count_ttRxflag3 + count_ttRxflag4 + count_ttRxflag5 + count_ttRxflag6 + count_ttRxflag7 as tot_Rx,

    count_ttRxflag1/tot_Rx*100 as rx1dr,
    count_ttRxflag2/tot_Rx*100 as rx2dr,
    count_ttRxflag3/tot_Rx*100 as rx3dr,
    count_ttRxflag4/tot_Rx*100 as rx4dr,
    count_ttRxflag5/tot_Rx*100 as rx5dr,
    count_ttRxflag6/tot_Rx*100 as rx6dr,
    count_ttRxflag7/tot_Rx*100 as rx7dr
    from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop
        WHERE win_1to14flagseason=1 and meds is NOT NULL and season="Spring 2024"
        GROUP BY meds
        ORDER BY 1
"""
).toPandas()

display(df_plot2b)


gwidth = 0.8
gspace = 0.3

offsets = np.arange(len(df_plot2b['meds']))*(gwidth+gspace)
fig, ax = plt.subplots()

labels = ['+/- 1 day','+/- 2 days','+/- 3 days','+/- 4 days','+/- 5 days','+/- 6 days','+/- 7 days']
heights = [df_plot2b['rx1dr'],df_plot2b['rx2dr'],df_plot2b['rx3dr'],df_plot2b['rx4dr'],df_plot2b['rx5dr'],df_plot2b['rx6dr'],df_plot2b['rx7dr']]

for i, label in enumerate(labels):
    ax.bar(offsets + i * gwidth/len(labels), height=heights[i], width=gwidth/len(labels), label=label)
       
ax.set_xticks(offsets + gwidth/2)
ax.set_xticklabels(df_plot2b['meds'])
ax.set_xlabel("COVID Medication")
ax.set_ylabel("% of Medication Prescribed")

ax.legend(loc='lower center', bbox_to_anchor=(0.5, -0.3), ncol=len(labels)/2)

plt.title("Time from Index Date to Medication Request")
plt.suptitle("Spring 2024")


# COMMAND ----------

# DBTITLE 0,Time to treatment bar chart, Summer 2023
df_plot2b = spark.sql(
    """SELECT distinct
    case when meds='rem' then 'Remdisivir' when meds='mol' then 'Molnupiravir' when meds='pax' then 'Paxlovid' end as meds,
    count(case when ttRxflag='+/- 1 day' then personid end) as count_ttRxflag1, 
    count(case when ttRxflag='+/- 2 days' then personid end) as count_ttRxflag2, 
    count(case when ttRxflag='+/- 3 days' then personid end) as count_ttRxflag3, 
    count(case when ttRxflag='+/- 4 days' then personid end) as count_ttRxflag4,
    count(case when ttRxflag='+/- 5 days' then personid end) as count_ttRxflag5, 
    count(case when ttRxflag='+/- 6 days' then personid end) as count_ttRxflag6,
    count(case when ttRxflag='+/- 7 days' then personid end) as count_ttRxflag7,
    count_ttRxflag1 + count_ttRxflag2 + count_ttRxflag3 + count_ttRxflag4 + count_ttRxflag5 + count_ttRxflag6 + count_ttRxflag7 as tot_Rx,

    count_ttRxflag1/tot_Rx*100 as rx1dr,
    count_ttRxflag2/tot_Rx*100 as rx2dr,
    count_ttRxflag3/tot_Rx*100 as rx3dr,
    count_ttRxflag4/tot_Rx*100 as rx4dr,
    count_ttRxflag5/tot_Rx*100 as rx5dr,
    count_ttRxflag6/tot_Rx*100 as rx6dr,
    count_ttRxflag7/tot_Rx*100 as rx7dr
    from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop
        WHERE win_1to14flagseason=1 and meds is NOT NULL and season="Summer 2023"
        GROUP BY meds
        ORDER BY 1
"""
).toPandas()

display(df_plot2b)


gwidth = 0.8
gspace = 0.3

offsets = np.arange(len(df_plot2b['meds']))*(gwidth+gspace)
fig, ax = plt.subplots()

labels = ['+/- 1 day','+/- 2 days','+/- 3 days','+/- 4 days','+/- 5 days','+/- 6 days','+/- 7 days']
heights = [df_plot2b['rx1dr'],df_plot2b['rx2dr'],df_plot2b['rx3dr'],df_plot2b['rx4dr'],df_plot2b['rx5dr'],df_plot2b['rx6dr'],df_plot2b['rx7dr']]

for i, label in enumerate(labels):
    ax.bar(offsets + i * gwidth/len(labels), height=heights[i], width=gwidth/len(labels), label=label)
       
ax.set_xticks(offsets + gwidth/2)
ax.set_xticklabels(df_plot2b['meds'])
ax.set_xlabel("COVID Medication")
ax.set_ylabel("% of Medication Prescribed")

ax.legend(loc='lower center', bbox_to_anchor=(0.5, -0.3), ncol=len(labels)/2)

plt.title("Time from Index Date to Medication Request")
plt.suptitle("Summer 2023")


# COMMAND ----------

# DBTITLE 1,Time to Treatment Bar Chart Fall/Winter 2023-2024
df_plot2c = spark.sql(
    """SELECT distinct
    case when meds='rem' then 'Remdisivir' when meds='mol' then 'Molnupiravir' when meds='pax' then 'Paxlovid' end as meds,
    count(case when ttRxflag='+/- 1 day' then personid end) as count_ttRxflag1, 
    count(case when ttRxflag='+/- 2 days' then personid end) as count_ttRxflag2, 
    count(case when ttRxflag='+/- 3 days' then personid end) as count_ttRxflag3, 
    count(case when ttRxflag='+/- 4 days' then personid end) as count_ttRxflag4,
    count(case when ttRxflag='+/- 5 days' then personid end) as count_ttRxflag5, 
    count(case when ttRxflag='+/- 6 days' then personid end) as count_ttRxflag6,
    count(case when ttRxflag='+/- 7 days' then personid end) as count_ttRxflag7,
    count_ttRxflag1 + count_ttRxflag2 + count_ttRxflag3 + count_ttRxflag4 + count_ttRxflag5 + count_ttRxflag6 + count_ttRxflag7 as tot_Rx,

    count_ttRxflag1/tot_Rx*100 as rx1dr,
    count_ttRxflag2/tot_Rx*100 as rx2dr,
    count_ttRxflag3/tot_Rx*100 as rx3dr,
    count_ttRxflag4/tot_Rx*100 as rx4dr,
    count_ttRxflag5/tot_Rx*100 as rx5dr,
    count_ttRxflag6/tot_Rx*100 as rx6dr,
    count_ttRxflag7/tot_Rx*100 as rx7dr
    from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop
        WHERE win_1to14flagseason=1 and meds is NOT NULL and season="Fall/Winter 2023-2024"
        GROUP BY meds
        ORDER BY 1
"""
).toPandas()

display(df_plot2c)


gwidth = 0.8
gspace = 0.3

offsets = np.arange(len(df_plot2c['meds']))*(gwidth+gspace)
fig, ax = plt.subplots()

labels = ['+/- 1 day','+/- 2 days','+/- 3 days','+/- 4 days','+/- 5 days','+/- 6 days','+/- 7 days']
heights = [df_plot2c['rx1dr'],df_plot2c['rx2dr'],df_plot2c['rx3dr'],df_plot2c['rx4dr'],df_plot2c['rx5dr'],df_plot2c['rx6dr'],df_plot2c['rx7dr']]

for i, label in enumerate(labels):
    ax.bar(offsets + i * gwidth/len(labels), height=heights[i], width=gwidth/len(labels), label=label)
       
ax.set_xticks(offsets + gwidth/2)
ax.set_xticklabels(df_plot2c['meds'])
ax.set_xlabel("COVID Medication")
ax.set_ylabel("% of Medication Prescribed")

ax.legend(loc='lower center', bbox_to_anchor=(0.5, -0.4), ncol=len(labels)/2)

plt.title("Time from Index Date to Medication Request")
plt.suptitle("Fall/Winter 2023-2024")


# COMMAND ----------

# DBTITLE 1,Time to treatment bar chart, Summer 2024
df_plot2d = spark.sql(
    """SELECT distinct
    case when meds='rem' then 'Remdisivir' when meds='mol' then 'Molnupiravir' when meds='pax' then 'Paxlovid' end as meds,
    count(case when ttRxflag='+/- 1 day' then personid end) as count_ttRxflag1, 
    count(case when ttRxflag='+/- 2 days' then personid end) as count_ttRxflag2, 
    count(case when ttRxflag='+/- 3 days' then personid end) as count_ttRxflag3, 
    count(case when ttRxflag='+/- 4 days' then personid end) as count_ttRxflag4,
    count(case when ttRxflag='+/- 5 days' then personid end) as count_ttRxflag5, 
    count(case when ttRxflag='+/- 6 days' then personid end) as count_ttRxflag6,
    count(case when ttRxflag='+/- 7 days' then personid end) as count_ttRxflag7,
    count_ttRxflag1 + count_ttRxflag2 + count_ttRxflag3 + count_ttRxflag4 + count_ttRxflag5 + count_ttRxflag6 + count_ttRxflag7 as tot_Rx,

    count_ttRxflag1/tot_Rx*100 as rx1dr,
    count_ttRxflag2/tot_Rx*100 as rx2dr,
    count_ttRxflag3/tot_Rx*100 as rx3dr,
    count_ttRxflag4/tot_Rx*100 as rx4dr,
    count_ttRxflag5/tot_Rx*100 as rx5dr,
    count_ttRxflag6/tot_Rx*100 as rx6dr,
    count_ttRxflag7/tot_Rx*100 as rx7dr
    from cdh_truveta_exploratory.ak21_truveta_MMWR_rx_tpop
        WHERE win_1to14flagseason=1 and meds is NOT NULL and season="Summer 2024"
        GROUP BY meds
        ORDER BY 1
"""
).toPandas()

display(df_plot2d)


gwidth = 0.8
gspace = 0.3

offsets = np.arange(len(df_plot2d['meds']))*(gwidth+gspace)
fig, ax = plt.subplots()

labels = ['+/- 1 day','+/- 2 days','+/- 3 days','+/- 4 days','+/- 5 days','+/- 6 days','+/- 7 days']
heights = [df_plot2d['rx1dr'],df_plot2d['rx2dr'],df_plot2d['rx3dr'],df_plot2d['rx4dr'],df_plot2d['rx5dr'],df_plot2d['rx6dr'],df_plot2d['rx7dr']]

for i, label in enumerate(labels):
    ax.bar(offsets + i * gwidth/len(labels), height=heights[i], width=gwidth/len(labels), label=label)
       
ax.set_xticks(offsets + gwidth/2)
ax.set_xticklabels(df_plot2d['meds'])
ax.set_xlabel("COVID Medication")
ax.set_ylabel("% of Medication Prescribed")

ax.legend(loc='lower center', bbox_to_anchor=(0.5, -0.4), ncol=len(labels)/2)

plt.title("Time from Index Date to Medication Request")
plt.suptitle("Summer 2024")


# COMMAND ----------

# MAGIC %sql
# MAGIC select * from cdh_truveta_exploratory.tog0_truveta_lavacovidgp

# COMMAND ----------

df = (
    pd.merge(
        df_plot1atot, 
        df_plot1arx, 
        on='agesi',
        how='left',
        suffixes=('_tot','_rx')
    )
)

df['treatment_rate'] = (df['count_rx']/df['count_tot'])*100

df.display()

# COMMAND ----------


